// Copyright (C) 2009 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Ivan Galkin
// Created:    2009.05.07

using System;
using System.Linq;
using Xtensive.Sql;
using Xtensive.Sql.Model;
using Xtensive.Storage.Model;
using Xtensive.Storage.Providers.Sql.Resources;

namespace Xtensive.Storage.Providers.Sql
{
  /// <summary>
  /// Generator factory.
  /// </summary>
  public class KeyGeneratorFactory : Providers.KeyGeneratorFactory
  {
    /// <inheritdoc/>
    public override bool IsSchemaBoundGenerator(GeneratorInfo generatorInfo)
    {
      if (generatorInfo.KeyGeneratorType!=typeof (KeyGenerator))
        return false;
      var generatorTypeCode = Type.GetTypeCode(generatorInfo.TupleDescriptor[0]);
      return generatorTypeCode==TypeCode.SByte
        || generatorTypeCode==TypeCode.Byte
        || generatorTypeCode==TypeCode.Int16
        || generatorTypeCode==TypeCode.UInt16
        || generatorTypeCode==TypeCode.Int32
        || generatorTypeCode==TypeCode.UInt32
        || generatorTypeCode==TypeCode.Int64
        || generatorTypeCode==TypeCode.UInt64;
    }

    protected override KeyGenerator CreateGenerator<TFieldType>(GeneratorInfo generatorInfo)
    {
      var domainHandler = (DomainHandler) Handlers.DomainHandler;
      var sqlNext = GetNextValueStatement(domainHandler.ProviderInfo, domainHandler.Schema, generatorInfo.MappingName);
      return new SqlCachingKeyGenerator<TFieldType>(generatorInfo, sqlNext);
    }

    internal static ISqlCompileUnit GetNextValueStatement(ProviderInfo providerInfo, Schema schema, string generatorMappingName)
    {
      if (providerInfo.SupportsSequences)
        return GetSequenceBasedNext(schema, generatorMappingName);
      if (providerInfo.SupportsAutoincrementColumns)
        return GetAutoIncrementColumnBasedNext(schema, generatorMappingName);
      throw new NotSupportedException();
    }

    private static ISqlCompileUnit GetSequenceBasedNext(Schema schema, string generatorMappingName)
    {
      var sequence = schema.Sequences
        .FirstOrDefault(s => s.Name==generatorMappingName);
      if (sequence==null)
        throw new DomainBuilderException(
          string.Format(Strings.ExSequenceXIsNotFoundInStorage, generatorMappingName));
      return SqlDml.Select(SqlDml.NextValue(sequence));
    }

    private static ISqlCompileUnit GetAutoIncrementColumnBasedNext(Schema schema, string generatorMappingName)
    {
      var generatorTable = schema.Tables
        .FirstOrDefault(t => t.Name==generatorMappingName);
      if (generatorTable==null)
        throw new DomainBuilderException(
          string.Format(Strings.ExTableXIsNotFound, generatorMappingName));
      var generatorColumn = generatorTable.Columns
        .FirstOrDefault(c => c.Name==WellKnown.GeneratorColumnName) as TableColumn;
      if (generatorColumn==null)
        throw new DomainBuilderException(
          string.Format(Strings.ExColumnXIsNotFoundInTableY, WellKnown.GeneratorColumnName, generatorTable.Name));
      var result = SqlDml.Batch();
      result.Add(SqlDml.Insert(SqlDml.TableRef(generatorTable)));
      result.Add(SqlDml.Select(SqlDml.LastAutoGeneratedId()));
      return result;
    }
  }
}