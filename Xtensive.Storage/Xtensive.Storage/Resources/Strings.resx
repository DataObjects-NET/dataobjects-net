<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExCouldNotLoadTypesFromAssembly" xml:space="preserve">
    <value>Could not load types from assembly {0}.</value>
  </data>
  <data name="ExThereAreNoSuitableTypes" xml:space="preserve">
    <value>There are no suitable types in "{0}".</value>
  </data>
  <data name="ExElementWithNameContainedInThisInstanceAlready" xml:space="preserve">
    <value>Element with name '{0}' is contained in this instance already.</value>
  </data>
  <data name="ExServiceWithNameAlreadyExistsInStorageInfoServicesCollection" xml:space="preserve">
    <value>Service with name '{0}' already exists in StorageInfo.Services collection.</value>
  </data>
  <data name="ExFieldWithNameAlreadyExistsInEntityFieldsCollection" xml:space="preserve">
    <value>Field with name '{0}' already exists in Entity.Fields collection.</value>
  </data>
  <data name="ExIndexWithNameAlreadyExistsInEntityInfoIndexesCollection" xml:space="preserve">
    <value>Index with name '{0}' already exists in EntityInfo.Indexes collection.</value>
  </data>
  <data name="ExUnsupportedType" xml:space="preserve">
    <value>Unsupported type: {0}.</value>
  </data>
  <data name="ExElementWithTypeIsContainedInThisInstanceAlready" xml:space="preserve">
    <value>Element with type {0} is contained in this instance already.</value>
  </data>
  <data name="ExComparerForTypeIsNotAvailable" xml:space="preserve">
    <value>Comparer for type '{0}' is not available.</value>
  </data>
  <data name="ExTypeCantBeNull" xml:space="preserve">
    <value>Type cannot be null</value>
  </data>
  <data name="ExIndexAlreadyContainsField" xml:space="preserve">
    <value>Index already contains field '{0}'.</value>
  </data>
  <data name="ExIndexFieldXIsIncorrect" xml:space="preserve">
    <value>Index field '{0}' is incorrect.</value>
  </data>
  <data name="ExTransactionRequired" xml:space="preserve">
    <value>Unable to process operation without transaction. Please create TransactionScope before.</value>
  </data>
  <data name="ExTypeNotFoundInModel" xml:space="preserve">
    <value>Type {0} not found in model.</value>
  </data>
  <data name="ExOutOfTransactionScope" xml:space="preserve">
    <value>Object outside of initial transaction scope.</value>
  </data>
  <data name="ExUnableToModifyDeletedObject" xml:space="preserve">
    <value>Unable to modify deleted object.</value>
  </data>
  <data name="ExSessionBoundObjectOutOfSessionScope" xml:space="preserve">
    <value>Session bound object out of session scope.</value>
  </data>
  <data name="ExFieldNotFoundInModel" xml:space="preserve">
    <value>Field {0} not found in model.</value>
  </data>
  <data name="ExResultTypeIncorrect" xml:space="preserve">
    <value>Type {0} is not dervied from {1}.</value>
  </data>
  <data name="ExStorageProviderNotFound" xml:space="preserve">
    <value>Handler provider not found for "{0}" connection type. Search folder "{1}".</value>
  </data>
  <data name="ExInvalidKeyParams" xml:space="preserve">
    <value>Unable to create key. Key params do not correspond to key structure.</value>
  </data>
  <data name="ExTypeInfoHierarchyMistmatch" xml:space="preserve">
    <value>TypeInfo hierarchy does not correspond to provided hierarchy.</value>
  </data>
  <data name="ExPrimaryKeyFieldCantBeChanged" xml:space="preserve">
    <value>Field {0} is a part of Primary Key. It can't be changed.</value>
  </data>
  <data name="ExEntityRemoved" xml:space="preserve">
    <value>Unable to modify removed entity.</value>
  </data>
  <data name="AspectExMultipleAttributesOfTypeXAreNotAllowedHere" xml:space="preserve">
    <value>{0}: multiple attributes of type '{1}' are not allowed here.</value>
  </data>
  <data name="ExColumnLength" xml:space="preserve">
    <value>Value length {0} greater than column Length {1}. </value>
  </data>
  <data name="ExColumnNotNullable" xml:space="preserve">
    <value>Unable to assign null to not-nullable column.</value>
  </data>
  <data name="ExTypeMustBeEntityDescendant" xml:space="preserve">
    <value>Invalid type specified.</value>
  </data>
  <data name="LogSessionBoundMethodXOfTypeY" xml:space="preserve">
    <value>SessionBound method '{0} 'of type '{1}'</value>
  </data>
  <data name="InvalidSession" xml:space="preserve">
    <value>The Session of specified ISessionBound object is invalid.</value>
  </data>
  <data name="ValueCanNotBeNull" xml:space="preserve">
    <value>Value can not be null.</value>
  </data>
  <data name="ExEntityIsRemoved" xml:space="preserve">
    <value>Entity is removed.</value>
  </data>
  <data name="ValueLengthCanNotExceedX" xml:space="preserve">
    <value>Value can not exceed {0}.</value>
  </data>
  <data name="ValueShouldMatchRegexPatternX" xml:space="preserve">
    <value>Value should match regex pattern '{0}'</value>
  </data>
  <data name="InvalidFieldValueConstraintXIsViolated" xml:space="preserve">
    <value>Invalid field value, constraint {0} is violated.</value>
  </data>
  <data name="ValueCanNotBeLessThenX" xml:space="preserve">
    <value>Value can not be less then {0}.</value>
  </data>
  <data name="ExErrorsDuringStorageBuild" xml:space="preserve">
    <value>Some errors have been occurred during storage build. See error log for details.</value>
  </data>
  <data name="ExKeyFieldXWasNotFoundInTypeY" xml:space="preserve">
    <value>Key field '{0}' was not found in type '{1}'.</value>
  </data>
  <data name="ValueTypeMismatchForFieldX" xml:space="preserve">
    <value>Value type mismatch for field '{0}'</value>
  </data>
  <data name="FieldWithNameXIsAlreadyRegistered" xml:space="preserve">
    <value>Field with name '{0}' is already registered.</value>
  </data>
  <data name="FieldXIsAlreadyDefinedInTypeXOrItsAncestor" xml:space="preserve">
    <value>Field {0} is already defined in type {1} or its ancestor.</value>
  </data>
  <data name="InterfaceXDoesNotBelongToXHierarchy" xml:space="preserve">
    <value>Interface '{0}' does not belong to '{1}' hierarchy.</value>
  </data>
  <data name="TypeXDoesNotImplementYZField" xml:space="preserve">
    <value>Type {0} does not implement '{1}.{2} field.'</value>
  </data>
  <data name="ExConstraintViolation" xml:space="preserve">
    <value>Constraint violation: constraint {0} on field '{1}.{2}' of object '{3}' failed on value {4}.</value>
  </data>
  <data name="ValueCanNotBeRemovedEntity" xml:space="preserve">
    <value>Value can not be an entity that is already removed.</value>
  </data>
  <data name="IndexedPropertiesAreNotSupported" xml:space="preserve">
    <value>Indexed properties are not supported.</value>
  </data>
  <data name="ExTypeXIsNotRegisteredInTheModel" xml:space="preserve">
    <value>Type '{0}' is not registered in the model.</value>
  </data>
  <data name="ExFieldXCanTBeLoadOnDemandAsItIsIncludedInPrimaryKey" xml:space="preserve">
    <value>Field '{0}' can't have LazyLoad attribute as it is included in primary key.</value>
  </data>
  <data name="TypeWithNameXIsAlreadyDefined" xml:space="preserve">
    <value>Type with name '{0}' is already defined.</value>
  </data>
  <data name="TypeXIsAlreadyDefined" xml:space="preserve">
    <value>Type '{0}' is already defined.</value>
  </data>
  <data name="IndexWithNameXIsAlreadyRegistered" xml:space="preserve">
    <value>Index with name '{0}' is already registered.</value>
  </data>
  <data name="TypeXWasNotRegisteredForActivation" xml:space="preserve">
    <value>Type '{0}' was not registered for activation</value>
  </data>
  <data name="ExTypeDefXIsAlreadyBelongsToHierarchyWithTheRootY" xml:space="preserve">
    <value>TypeDef '{0}' is already belongs to hierarchy with the root = '{1}'.</value>
  </data>
  <data name="ExXDescendantIsAlreadyARootOfAnotherHierarchy" xml:space="preserve">
    <value>'{0}' descendant is already a root of another hierarchy.</value>
  </data>
  <data name="PairedFieldXHasInsufficientTypeItShouldBeReferenceToEntityOrAEntitySet" xml:space="preserve">
    <value>Paired field '{0}' has insufficient type. It should be reference to Entity or a EntitySet.</value>
  </data>
  <data name="ReferencedFieldXAndPairedFieldAreEqual" xml:space="preserve">
    <value>Referenced field '{0}' and paired field are equal.</value>
  </data>
  <data name="ExPairedFieldXWasNotFoundInYType" xml:space="preserve">
    <value>Paired field '{0}' was not found in '{1}' type.</value>
  </data>
  <data name="ExPairToAttributeCanNotBeUsedWithXField" xml:space="preserve">
    <value>'PairTo' attribute can not be used with '{0}' field.</value>
  </data>
  <data name="ExKeyProviderXShouldDefineAtLeastOneKeyField" xml:space="preserve">
    <value>Key provider '{0}' should define at least one key field.</value>
  </data>
  <data name="ExKeyProviderXAndHierarchyYKeyFieldAmountMismatch" xml:space="preserve">
    <value>Key provider '{0}' and hierarchy {1} key field amount mismatch.</value>
  </data>
  <data name="ExInvalidLengthAttributeOnXField" xml:space="preserve">
    <value>Invalid 'Length' attribute on '{0}' field.</value>
  </data>
  <data name="InvalidOnDeleteAttributeUsageOnFieldXFieldIsNotEntityReference" xml:space="preserve">
    <value>Invalid 'OnDelete' attribute usage on field '{0}'. Field is not entity reference.</value>
  </data>
  <data name="ExplicitIsNullableAttributeIsRedundant" xml:space="preserve">
    <value>Explicit 'IsNullable' attribute is redundant</value>
  </data>
  <data name="ExFieldXHasYTypeButIsMarkedAsNotNullable" xml:space="preserve">
    <value>Field {0} has '{1}' type but is marked as not nullable.</value>
  </data>
  <data name="ExplicitLazyLoadAttributeOnFieldXIsRedundant" xml:space="preserve">
    <value>Explicit 'LazyLoad' attribute on field '{0}' is redundant</value>
  </data>
  <data name="ExplicitMappingNameSettingIsRedundantTheSameNameXWillBeGeneratedAutomatically" xml:space="preserve">
    <value>Explicit mapping name setting is redundant. The same name '{0}' will be generated automatically.</value>
  </data>
  <data name="InvalidMappingNameX" xml:space="preserve">
    <value>Invalid mapping name '{0}'.</value>
  </data>
  <data name="ExIndexMustContainAtLeastOneField" xml:space="preserve">
    <value>Index must contain at least one field.</value>
  </data>
  <data name="ExInvalidFillFactorXValueMustBeBetween0And1" xml:space="preserve">
    <value>Invalid fill factor '{0}'. Value must be between 0 and 1.</value>
  </data>
  <data name="ExColumnXIsNotFound" xml:space="preserve">
    <value>Column '{0}' is not found.</value>
  </data>
  <data name="ExTypeXMustHavePublicInstanceParameterlessConstructorInOrderToBeUsedAsStorageDefinitionBuilder" xml:space="preserve">
    <value>Type '{0}' must have public instance parameterless constructor in order to be used as storage definition builder.</value>
  </data>
  <data name="ExTypeXDoesNotImplementYInterface" xml:space="preserve">
    <value>Type '{0}' does not implement '{1}' interface.</value>
  </data>
  <data name="ExTypeXIsNotCollatable" xml:space="preserve">
    <value>Type {0} is not collatable.</value>
  </data>
  <data name="XIsNotApplicableToYDescendants" xml:space="preserve">
    <value>'{0}' is not applicable to '{1}' descendants.</value>
  </data>
  <data name="NameXIsInvalid" xml:space="preserve">
    <value>Name {0} is invalid.</value>
  </data>
  <data name="IndexNameXIsInvalid" xml:space="preserve">
    <value>Index name '{0}' is invalid.</value>
  </data>
  <data name="ExPropertyXMustBeDeclaredInTypeY" xml:space="preserve">
    <value>Property {0} must be declared in type '{1}'.</value>
  </data>
  <data name="UnsupportedFieldTypeX" xml:space="preserve">
    <value>Unsupported field type: '{0}'</value>
  </data>
  <data name="ExKeyXWasNotFoundInStorage" xml:space="preserve">
    <value>Key '{0}' was not found in storage.</value>
  </data>
  <data name="ExCannotFindHandler" xml:space="preserve">
    <value>Cannot find a hanlder of type '{0}'.</value>
  </data>
  <data name="KeyCanNotBeNull" xml:space="preserve">
    <value>Key can not be null.</value>
  </data>
  <data name="LogCreatingX" xml:space="preserve">
    <value>Creating {0}</value>
  </data>
  <data name="LogBuildingX" xml:space="preserve">
    <value>Building {0}</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="Generators" xml:space="preserve">
    <value>Generators</value>
  </data>
  <data name="LogValidatingX" xml:space="preserve">
    <value>Validating {0}</value>
  </data>
  <data name="ActualModel" xml:space="preserve">
    <value>Actual Model</value>
  </data>
  <data name="ModelDefinition" xml:space="preserve">
    <value>Model Definition</value>
  </data>
  <data name="CustomDefinitions" xml:space="preserve">
    <value>Custom Definitions</value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="Services" xml:space="preserve">
    <value>Services</value>
  </data>
  <data name="LogDefiningX" xml:space="preserve">
    <value>Defining '{0}'</value>
  </data>
  <data name="Associations" xml:space="preserve">
    <value>Associations</value>
  </data>
  <data name="Indexes" xml:space="preserve">
    <value>Indexes</value>
  </data>
  <data name="Columns" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="HierarchyColumns" xml:space="preserve">
    <value>Hierarchy columns</value>
  </data>
  <data name="ExWrongPersistentTypeCandidate" xml:space="preserve">
    <value>Wrong persistent type candidate: '{0}'.</value>
  </data>
  <data name="ExNotNullableConstraintViolationOnFieldX" xml:space="preserve">
    <value>'NotNullable' constraint violation on field '{0}'</value>
  </data>
  <data name="ExLengthConstraintViolationOnFieldX" xml:space="preserve">
    <value>'Length' constraint violation on field '{0}'</value>
  </data>
  <data name="SessionIsAlreadyDisposed" xml:space="preserve">
    <value>Session is already disposed.</value>
  </data>
  <data name="SessionIsNotActivated" xml:space="preserve">
    <value>Session is not activated.</value>
  </data>
  <data name="UnableToUseDefaultGeneratorForComplexKeys" xml:space="preserve">
    <value>UnableToUseDefaultGeneratorForComplexKeys</value>
  </data>
  <data name="ExUnableToCloneSystemSessionConfiguration" xml:space="preserve">
    <value>Unable to clone system session configuration.</value>
  </data>
  <data name="ExEntityIsInInconsistentState" xml:space="preserve">
    <value>Entity is in inconsistent state.</value>
  </data>
  <data name="EntityWasNotRemoved" xml:space="preserve">
    <value>Entity was not removed.</value>
  </data>
  <data name="ExCanNotOpenTransactionNoCurrentSession" xml:space="preserve">
    <value>Can't open a transaction, since there is no current Session.</value>
  </data>
  <data name="ExFieldXYIsNotFound" xml:space="preserve">
    <value>Field '{0}.{1}' is not found.</value>
  </data>
  <data name="EntityXIsBoundToAnotherSession" xml:space="preserve">
    <value>Entity '{0}' is bound to another session.</value>
  </data>
  <data name="ExValueShouldBeXDescendant" xml:space="preserve">
    <value>Value should be '{0}' descendant.</value>
  </data>
  <data name="ExEntitySetCanTBeAssigned" xml:space="preserve">
    <value>EntitySet can't be assigned</value>
  </data>
  <data name="ExAssociationMultiplicityIsNotValidForField" xml:space="preserve">
    <value>Association multiplicity '{0}' is not valid for field '{1}'</value>
  </data>
  <data name="ExMasterAssociationIsAlreadyPaired" xml:space="preserve">
    <value>Master association '{0}' is already paired with '{1}'</value>
  </data>
  <data name="ExUnableToActivateEntitySetWithoutAssociation" xml:space="preserve">
    <value>Unable to activate EntitySet for '{0}' field because it does not has association.</value>
  </data>
  <data name="ExEntitySetInvalidBecauseTransactionIsNotActive" xml:space="preserve">
    <value>Entity set is invalid due to current transaction is not active.</value>
  </data>
  <data name="ExCanNotCommitTransactionValidationContextIsInInconsistentState" xml:space="preserve">
    <value>Can not commit transaction: Validation context is in inconsistent state.</value>
  </data>
  <data name="ExItemNotFoundInEntitySet" xml:space="preserve">
    <value>Item not found in EntitySet</value>
  </data>
  <data name="ExCanNotGetValidationContextThereIsNoActiveTransaction" xml:space="preserve">
    <value>Can not get validation context: There is no active transaction.</value>
  </data>
  <data name="ExDefaultGeneratorCanServeHierarchyWithExactlyOneKeyField" xml:space="preserve">
    <value>Default generator can serve hierarchy with exactly one key field.</value>
  </data>
  <data name="ExTypeXIsNotSupported" xml:space="preserve">
    <value>Type '{0}' is not supported.</value>
  </data>
  <data name="ExKeyFieldXInTypeYShouldNotHaveSetAccessor" xml:space="preserve">
    <value>Key property '{0}' declared at '{1}' should not have public or protected set accessor. Use  base protected constructor instead.</value>
  </data>
  <data name="ExUnableToSetKeyFieldXExplicitly" xml:space="preserve">
    <value>Unable to set key field '{0}' explicitly.</value>
  </data>
  <data name="ExSectionIsNotFoundInApplicationConfigurationFile" xml:space="preserve">
    <value>Section '{0}' is not found in application configuration file.</value>
  </data>
  <data name="ExConfigurationForDomainIsNotFoundInApplicationConfigurationFile" xml:space="preserve">
    <value>Configuration for Domain with name '{0}' is not found in application configuration file (section '{1}').</value>
  </data>
  <data name="ExFieldXCanTBeNullableAsItIsIncludedInPrimaryKey" xml:space="preserve">
    <value>Field '{0}' can't be Nullable as it is included in primary key.</value>
  </data>
  <data name="ExNoCurrentSession" xml:space="preserve">
    <value>There is no current Session.</value>
  </data>
</root>