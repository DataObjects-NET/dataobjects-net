<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExCouldNotLoadTypesFromAssembly" xml:space="preserve">
    <value>Could not load types from assembly '{0}'.</value>
  </data>
  <data name="ExThereAreNoSuitableTypes" xml:space="preserve">
    <value>There are no suitable types in '{0}'.</value>
  </data>
  <data name="ExElementWithNameContainedInThisInstanceAlready" xml:space="preserve">
    <value>Element with name '{0}' is contained in this instance already.</value>
  </data>
  <data name="ExServiceWithNameAlreadyExistsInStorageInfoServicesCollection" xml:space="preserve">
    <value>Service with name '{0}' already exists in StorageInfo.Services collection.</value>
  </data>
  <data name="ExFieldWithNameAlreadyExistsInEntityFieldsCollection" xml:space="preserve">
    <value>Field with name '{0}' already exists in EntityInfo.Fields collection.</value>
  </data>
  <data name="ExIndexWithNameAlreadyExistsInEntityInfoIndexesCollection" xml:space="preserve">
    <value>Index with name '{0}' already exists in EntityInfo.Indexes collection.</value>
  </data>
  <data name="ExUnsupportedType" xml:space="preserve">
    <value>Unsupported type: '{0}'.</value>
  </data>
  <data name="ExElementWithTypeIsContainedInThisInstanceAlready" xml:space="preserve">
    <value>Element with type '{0}' is already contained in this instance.</value>
  </data>
  <data name="ExComparerForTypeIsNotAvailable" xml:space="preserve">
    <value>Comparer for type '{0}' is not available.</value>
  </data>
  <data name="ExTypeCantBeNull" xml:space="preserve">
    <value>Type cannot be null.</value>
  </data>
  <data name="ExIndexAlreadyContainsField" xml:space="preserve">
    <value>Index already contains field '{0}'.</value>
  </data>
  <data name="ExIndexFieldXIsIncorrect" xml:space="preserve">
    <value>Index field '{0}' is incorrect.</value>
  </data>
  <data name="ExTransactionRequired" xml:space="preserve">
    <value>Unable to process operation without a transaction. Use Transaction.Open(...) to open it.</value>
  </data>
  <data name="ExTypeNotFoundInModel" xml:space="preserve">
    <value>Type '{0}' is not found in model.</value>
  </data>
  <data name="ExOutOfTransactionScope" xml:space="preserve">
    <value>Object is outside of initial transaction scope.</value>
  </data>
  <data name="ExUnableToModifyDeletedObject" xml:space="preserve">
    <value>Unable to modify removed object.</value>
  </data>
  <data name="ExSessionBoundObjectOutOfSessionScope" xml:space="preserve">
    <value>Session bound object is out of session scope.</value>
  </data>
  <data name="ExFieldNotFoundInModel" xml:space="preserve">
    <value>Field '{0}' is not found in model.</value>
  </data>
  <data name="ExResultTypeIncorrect" xml:space="preserve">
    <value>Value of '{0}' type cannot be assigned to property of '{1}' type.</value>
  </data>
  <data name="ExStorageProviderNotFound" xml:space="preserve">
    <value>Handler provider is not found for "{0}" connection type.</value>
  </data>
  <data name="ExInvalidKeyParams" xml:space="preserve">
    <value>Unable to create Key. Key params do not correspond to its structure.</value>
  </data>
  <data name="ExTypeInfoHierarchyMistmatch" xml:space="preserve">
    <value>TypeInfo hierarchy does not correspond to provided hierarchy.</value>
  </data>
  <data name="ExPrimaryKeyFieldCantBeChanged" xml:space="preserve">
    <value>Field '{0}' is a part of primary key. It can't be changed.</value>
  </data>
  <data name="ExEntityRemoved" xml:space="preserve">
    <value>Unable to modify removed entity.</value>
  </data>
  <data name="AspectExMultipleAttributesOfTypeXAreNotAllowedHere" xml:space="preserve">
    <value>{0}: multiple attributes of type '{1}' are not allowed here.</value>
  </data>
  <data name="ExColumnLength" xml:space="preserve">
    <value>Value length {0} is greater than column length {1}.</value>
  </data>
  <data name="ExColumnNotNullable" xml:space="preserve">
    <value>Unable to assign null to non-nullable column.</value>
  </data>
  <data name="ExTypeMustBeEntityDescendant" xml:space="preserve">
    <value>Invalid type specified.</value>
  </data>
  <data name="LogSessionBoundMethodXOfTypeY" xml:space="preserve">
    <value>SessionBound method '{0}' of type '{1}'</value>
  </data>
  <data name="ExInvalidSession" xml:space="preserve">
    <value>The Session of specified ISessionBound object is invalid.</value>
  </data>
  <data name="ValueCanNotBeNull" xml:space="preserve">
    <value>Value can not be null.</value>
  </data>
  <data name="ExEntityIsRemoved" xml:space="preserve">
    <value>Entity is removed.</value>
  </data>
  <data name="ValueLengthCanNotExceedX" xml:space="preserve">
    <value>Value can not exceed {0}.</value>
  </data>
  <data name="ValueShouldMatchRegexPatternX" xml:space="preserve">
    <value>Value should match regex pattern '{0}'</value>
  </data>
  <data name="ExInvalidFieldValueConstraintXIsViolated" xml:space="preserve">
    <value>Invalid field value, constraint {0} is violated.</value>
  </data>
  <data name="ValueCanNotBeLessThenX" xml:space="preserve">
    <value>Value can not be less then {0}.</value>
  </data>
  <data name="ExErrorsDuringStorageBuild" xml:space="preserve">
    <value>Some errors have been occurred during storage build. See error log for details.</value>
  </data>
  <data name="ExKeyFieldXWasNotFoundInTypeY" xml:space="preserve">
    <value>Key field '{0}' was not found in type '{1}'.</value>
  </data>
  <data name="ValueTypeMismatchForFieldX" xml:space="preserve">
    <value>Value type mismatch for field '{0}'</value>
  </data>
  <data name="ExFieldWithNameXIsAlreadyRegistered" xml:space="preserve">
    <value>Field with name '{0}' is already registered.</value>
  </data>
  <data name="ExFieldXIsAlreadyDefinedInTypeXOrItsAncestor" xml:space="preserve">
    <value>Field '{0}' is already defined in type '{1}' or in its ancestor.</value>
  </data>
  <data name="ExInterfaceXDoesNotBelongToXHierarchy" xml:space="preserve">
    <value>Interface '{0}' does not belong to '{1}' hierarchy.</value>
  </data>
  <data name="TypeXDoesNotImplementYZField" xml:space="preserve">
    <value>Type '{0}' does not implement '{1}.{2}' property.</value>
  </data>
  <data name="ExConstraintViolation" xml:space="preserve">
    <value>Constraint violation: constraint {0} on field '{1}.{2}' of object '{3}' failed on value {4}.</value>
  </data>
  <data name="ValueCanNotBeRemovedEntity" xml:space="preserve">
    <value>Value can not be an entity that is already removed.</value>
  </data>
  <data name="ExIndexedPropertiesAreNotSupported" xml:space="preserve">
    <value>Indexed properties are not supported.</value>
  </data>
  <data name="ExTypeXIsNotRegisteredInTheModel" xml:space="preserve">
    <value>Type '{0}' is not registered in the model.</value>
  </data>
  <data name="ExFieldXCanTBeLoadOnDemandAsItIsIncludedInPrimaryKey" xml:space="preserve">
    <value>Field '{0}' can't have LazyLoad attribute as it is included into primary key.</value>
  </data>
  <data name="ExTypeWithNameXIsAlreadyDefined" xml:space="preserve">
    <value>Type with name '{0}' is already defined.</value>
  </data>
  <data name="ExTypeXIsAlreadyDefined" xml:space="preserve">
    <value>Type '{0}' is already defined.</value>
  </data>
  <data name="ExIndexWithNameXIsAlreadyRegistered" xml:space="preserve">
    <value>Index with name '{0}' is already registered.</value>
  </data>
  <data name="ExTypeXWasNotRegisteredForActivation" xml:space="preserve">
    <value>Type '{0}' was not registered for activation.</value>
  </data>
  <data name="ExTypeDefXIsAlreadyBelongsToHierarchyWithTheRootY" xml:space="preserve">
    <value>TypeDef '{0}' already belongs to hierarchy with '{1}' root.</value>
  </data>
  <data name="ExXDescendantIsAlreadyARootOfAnotherHierarchy" xml:space="preserve">
    <value>'{0}' descendant is already a root of another hierarchy.</value>
  </data>
  <data name="ExPairedFieldXHasWrongTypeItShouldBeReferenceToEntityOrAEntitySet" xml:space="preserve">
    <value>Paired field '{0}' has wrong type. A descendant of Entity or EntitySet is expected.</value>
  </data>
  <data name="ExReferencedFieldXAndPairedFieldAreEqual" xml:space="preserve">
    <value>Referenced field '{0}' and paired field are equal.</value>
  </data>
  <data name="ExPairedFieldXWasNotFoundInYType" xml:space="preserve">
    <value>Paired field '{0}' was not found in '{1}' type.</value>
  </data>
  <data name="ExAssociationAttributeCanNotBeAppliedToXField" xml:space="preserve">
    <value>'AssociationAttribute' can't be applied to '{0}' field.</value>
  </data>
  <data name="ExKeyProviderXShouldDefineAtLeastOneKeyField" xml:space="preserve">
    <value>Key provider '{0}' should define at least one key field.</value>
  </data>
  <data name="ExKeyProviderXAndHierarchyYKeyFieldAmountMismatch" xml:space="preserve">
    <value>Key provider '{0}' and hierarchy {1} key field amount mismatch.</value>
  </data>
  <data name="ExInvalidLengthAttributeOnXField" xml:space="preserve">
    <value>Invalid 'Length' attribute on '{0}' field.</value>
  </data>
  <data name="ExInvalidOnDeleteAttributeUsageOnFieldXFieldIsNotEntityReference" xml:space="preserve">
    <value>Invalid 'OnDelete' attribute usage on field '{0}'. Field is not entity reference.</value>
  </data>
  <data name="ExplicitIsNullableAttributeIsRedundant" xml:space="preserve">
    <value>Explicit 'IsNullable' attribute is redundant</value>
  </data>
  <data name="ExFieldXHasYTypeButIsMarkedAsNotNullable" xml:space="preserve">
    <value>Field '{0}' has '{1}' type but is marked as not nullable.</value>
  </data>
  <data name="ExplicitLazyLoadAttributeOnFieldXIsRedundant" xml:space="preserve">
    <value>Explicit 'LazyLoad' attribute on field '{0}' is redundant</value>
  </data>
  <data name="ExplicitMappingNameSettingIsRedundantTheSameNameXWillBeGeneratedAutomatically" xml:space="preserve">
    <value>Explicit mapping name setting is redundant. The same name '{0}' will be generated automatically.</value>
  </data>
  <data name="ExInvalidMappingNameX" xml:space="preserve">
    <value>Invalid mapping name '{0}'.</value>
  </data>
  <data name="ExIndexMustContainAtLeastOneField" xml:space="preserve">
    <value>Index must contain at least one field.</value>
  </data>
  <data name="ExInvalidFillFactorXValueMustBeBetween0And1" xml:space="preserve">
    <value>Invalid fill factor '{0}'. Value must be between 0 and 1.</value>
  </data>
  <data name="ExColumnXIsNotFound" xml:space="preserve">
    <value>Column '{0}' is not found.</value>
  </data>
  <data name="ExTypeXDoesNotImplementYInterface" xml:space="preserve">
    <value>Type '{0}' does not implement '{1}' interface.</value>
  </data>
  <data name="ExTypeXIsNotCollatable" xml:space="preserve">
    <value>Type '{0}' is not collatable.</value>
  </data>
  <data name="XIsNotApplicableToYDescendants" xml:space="preserve">
    <value>'{0}' is not applicable to '{1}' descendants.</value>
  </data>
  <data name="ExNameXIsInvalid" xml:space="preserve">
    <value>Name '{0}' is invalid.</value>
  </data>
  <data name="ExIndexNameXIsInvalid" xml:space="preserve">
    <value>Index name '{0}' is invalid.</value>
  </data>
  <data name="ExPropertyXMustBeDeclaredInTypeY" xml:space="preserve">
    <value>Property '{0}' must be declared in type '{1}'.</value>
  </data>
  <data name="ExUnsupportedFieldTypeX" xml:space="preserve">
    <value>Unsupported field type: '{0}'</value>
  </data>
  <data name="ExKeyXWasNotFoundInStorage" xml:space="preserve">
    <value>Key '{0}' was not found in storage.</value>
  </data>
  <data name="ExCannotFindHandlerOfTypeX" xml:space="preserve">
    <value>Cannot find a hanlder of type '{0}'.</value>
  </data>
  <data name="ExKeyCanNotBeNull" xml:space="preserve">
    <value>Key can not be null.</value>
  </data>
  <data name="LogCreatingX" xml:space="preserve">
    <value>Creating {0}</value>
  </data>
  <data name="LogBuildingX" xml:space="preserve">
    <value>Building {0}</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="Generators" xml:space="preserve">
    <value>Generators</value>
  </data>
  <data name="LogValidatingX" xml:space="preserve">
    <value>Validating {0}</value>
  </data>
  <data name="ActualModel" xml:space="preserve">
    <value>Actual Model</value>
  </data>
  <data name="ModelDefinition" xml:space="preserve">
    <value>Model Definition</value>
  </data>
  <data name="CustomDefinitions" xml:space="preserve">
    <value>Custom Definitions</value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="LogDefiningX" xml:space="preserve">
    <value>Defining '{0}'</value>
  </data>
  <data name="Associations" xml:space="preserve">
    <value>Associations</value>
  </data>
  <data name="Indexes" xml:space="preserve">
    <value>Indexes</value>
  </data>
  <data name="Columns" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="HierarchyColumns" xml:space="preserve">
    <value>Hierarchy columns</value>
  </data>
  <data name="ExWrongPersistentTypeCandidate" xml:space="preserve">
    <value>Wrong persistent type candidate: '{0}'.</value>
  </data>
  <data name="ExNotNullableConstraintViolationOnFieldX" xml:space="preserve">
    <value>'NotNullable' constraint violation on field '{0}'.</value>
  </data>
  <data name="ExLengthConstraintViolationOnFieldX" xml:space="preserve">
    <value>'Length' constraint violation on field '{0}'.</value>
  </data>
  <data name="ExSessionIsAlreadyDisposed" xml:space="preserve">
    <value>Session is already disposed.</value>
  </data>
  <data name="ExCannotUseDefaultGeneratorForComplexKeys" xml:space="preserve">
    <value>Cannot use default generator for complex (multicolumn) Keys.</value>
  </data>
  <data name="ExUnableToCloneNonUserSessionConfiguration" xml:space="preserve">
    <value>Unable to clone non-user session configuration.</value>
  </data>
  <data name="ExEntityIsInInconsistentState" xml:space="preserve">
    <value>Entity is in inconsistent state.</value>
  </data>
  <data name="ExCanNotOpenTransactionNoCurrentSession" xml:space="preserve">
    <value>Can not open a transaction: there is no current Session.</value>
  </data>
  <data name="ExFieldXYIsNotFound" xml:space="preserve">
    <value>Field '{0}.{1}' is not found.</value>
  </data>
  <data name="ExEntityXIsBoundToAnotherSession" xml:space="preserve">
    <value>Entity '{0}' is bound to another Session.</value>
  </data>
  <data name="ExValueShouldBeXDescendant" xml:space="preserve">
    <value>Value should be '{0}' descendant.</value>
  </data>
  <data name="ExEntitySetCanTBeAssigned" xml:space="preserve">
    <value>EntitySet can't be assigned.</value>
  </data>
  <data name="ExAssociationMultiplicityIsNotValidForField" xml:space="preserve">
    <value>Association multiplicity '{0}' is not valid for field '{1}'.</value>
  </data>
  <data name="ExMasterAssociationIsAlreadyPaired" xml:space="preserve">
    <value>Master association '{0}' is already paired with '{1}'.</value>
  </data>
  <data name="ExUnableToActivateEntitySetWithoutAssociation" xml:space="preserve">
    <value>Unable to activate EntitySet for '{0}' field because it does not has association.</value>
  </data>
  <data name="ExEntitySetInvalidBecauseTransactionIsNotActive" xml:space="preserve">
    <value>Entity set is invalid due to current transaction is not active.</value>
  </data>
  <data name="ExCannotCommitATransactionValidationContextIsInInconsistentState" xml:space="preserve">
    <value>Cannot commit a transaction: ValidationContext is in inconsistent state.</value>
  </data>
  <data name="ExItemNotFoundInEntitySet" xml:space="preserve">
    <value>Item is not found in EntitySet.</value>
  </data>
  <data name="ExCanNotGetValidationContextThereIsNoActiveTransaction" xml:space="preserve">
    <value>Can not get validation context: there is no active transaction.</value>
  </data>
  <data name="ExDefaultGeneratorCanServeHierarchyWithExactlyOneKeyField" xml:space="preserve">
    <value>Default generator can serve hierarchy with exactly one key field.</value>
  </data>
  <data name="ExTypeXIsNotSupported" xml:space="preserve">
    <value>Type '{0}' is not supported.</value>
  </data>
  <data name="ExKeyFieldXInTypeYShouldNotHaveSetAccessor" xml:space="preserve">
    <value>Key property '{0}' declared in '{1}' should not have public or protected set accessor. Use base protected constructor to set Key value.</value>
  </data>
  <data name="ExUnableToSetKeyFieldXExplicitly" xml:space="preserve">
    <value>Unable to set Key field '{0}' explicitly.</value>
  </data>
  <data name="ExSectionIsNotFoundInApplicationConfigurationFile" xml:space="preserve">
    <value>Section '{0}' is not found in application configuration file.</value>
  </data>
  <data name="ExConfigurationForDomainIsNotFoundInApplicationConfigurationFile" xml:space="preserve">
    <value>Configuration for Domain with name '{0}' is not found in application configuration file (section '{1}').</value>
  </data>
  <data name="ExFieldXCanTBeNullableAsItIsIncludedInPrimaryKey" xml:space="preserve">
    <value>Field '{0}' cannot be Nullable as it is included into primary key.</value>
  </data>
  <data name="ExNoCurrentSession" xml:space="preserve">
    <value>There is no current Session.</value>
  </data>
  <data name="ExWrongKeyStructure" xml:space="preserve">
    <value>Wrong key structure.</value>
  </data>
  <data name="ExStateTransactionIsDifferent" xml:space="preserve">
    <value>StateTransaction property value differs from the current transaction.</value>
  </data>
  <data name="ExInvalidKeyString" xml:space="preserve">
    <value>String representaion of the Key has invalid format.</value>
  </data>
  <data name="ExCannotAssociateNonEmptyEntityStateWithKeyOfUnknownType" xml:space="preserve">
    <value>Attempt to associate non-empty EntityState with Key of unknown type.</value>
  </data>
  <data name="ExPairToAttributeCanNotBeAppliedToXField" xml:space="preserve">
    <value>'PairTo' attribute can not be applied to field '{0}' of type '{1}'. It is already applied to field '{2}' of type '{3}'.</value>
  </data>
  <data name="ExSessionWithNameXAlreadyExists" xml:space="preserve">
    <value>Session with name '{0}' already exists.</value>
  </data>
  <data name="ExUnknownExpressionType" xml:space="preserve">
    <value>Unknown expression type: '{0} ({1})'.</value>
  </data>
  <data name="SystemTypes" xml:space="preserve">
    <value>system types</value>
  </data>
  <data name="ExUnsupportedExpressionType" xml:space="preserve">
    <value>Unsupported expression type: '{0}'.</value>
  </data>
  <data name="ExFieldIsNotAnEntityField" xml:space="preserve">
    <value>Field '{0}' is not an Entity field in Type '{1}'.</value>
  </data>
  <data name="TypeXIsNotAnYDescendant" xml:space="preserve">
    <value>Type '{0}' is not an '{1}' descendant.</value>
  </data>
  <data name="ExSessionIsNotOpen" xml:space="preserve">
    <value>Session is not open. Use Session.Open(...) to open it.</value>
  </data>
  <data name="ExPersistentAttributeIsNotSetOnTypeX" xml:space="preserve">
    <value>Persistent attribute isn't applied. Add the following line to AssemblyInfo.cs for "{0}" assembly: [assembly: Persistent(AttributeTargetAssemblies = "{0}")].</value>
  </data>
  <data name="ExActiveSerializationContextIsNotFound" xml:space="preserve">
    <value>Active serialization context is not found.</value>
  </data>
  <data name="ExCannotResolveEntityWithKeyX" xml:space="preserve">
    <value>Cannot resolve entity with key '{0}'.</value>
  </data>
  <data name="ExUnableToResolveTypeForKeyX" xml:space="preserve">
    <value>Unable to resolve type for Key '{0}'.</value>
  </data>
  <data name="ExUnknownEntitySerializationKindX" xml:space="preserve">
    <value>Unknown entity serialization kind '{0}'.</value>
  </data>
  <data name="ExUnableToCreateKeyForXHierarchy" xml:space="preserve">
    <value>Unable to create key for '{0}' hierarchy. Key value or key generator should be specified.</value>
  </data>
  <data name="ExCompilerContainerAttributeIsNotAppliedToTypeX" xml:space="preserve">
    <value>'CompilerContainer' attribute isn't applied to type '{0}'.</value>
  </data>
  <data name="ExInvalidUpgraderVersion" xml:space="preserve">
    <value>Invalid upgrader version.</value>
  </data>
  <data name="ExTypeIdForTypeXIsNotFound" xml:space="preserve">
    <value>TypeId for type '{0}' is not found.</value>
  </data>
  <data name="ExTypeWithTypeIdXIsNotFound" xml:space="preserve">
    <value>Type with type TypeId='{0}' is not found.</value>
  </data>
  <data name="ExExpressionOfTypeXIsNotASequence" xml:space="preserve">
    <value>The expression of type '{0}' is not a sequence.</value>
  </data>
  <data name="ExActualSchemaVersionOfAssemblyXIsExpectedToBeYButCurrentlyItIsZ" xml:space="preserve">
    <value>Actual schema version of assembly '{0}' is expected to be '{1}', but currently it is '{2}'.</value>
  </data>
  <data name="ExOnlyEqualityRangesAreSupported" xml:space="preserve">
    <value>Only equality ranges are supported.</value>
  </data>
  <data name="ExCouldNotFindFieldSegmentForFieldX" xml:space="preserve">
    <value>Could not find field segment for field '{0}'.</value>
  </data>
  <data name="ExCouldNotFindEntityMappingForFieldX" xml:space="preserve">
    <value>Could not find entity mapping for field '{0}'.</value>
  </data>
  <data name="ExCouldNotFindAnonymousMappingForFieldX" xml:space="preserve">
    <value>Could not find anonymous mapping for field '{0}'.</value>
  </data>
  <data name="ExBinaryExpressionsWithNodeTypeXAreNotSupported" xml:space="preserve">
    <value>Binary expressions with NodeType = 'ExpressionType.{0}' aren't supported.</value>
  </data>
  <data name="ExCouldNotFindGroupingMappingForFieldX" xml:space="preserve">
    <value>Could not find grouping mapping for field '{0}'.</value>
  </data>
  <data name="ExCouldNotFindSubqueryMappingForFieldX" xml:space="preserve">
    <value>Could not find subquery mapping for field '{0}'.</value>
  </data>
  <data name="ExSpecifiedValuesArentEnoughToCreateKeyForTypeX" xml:space="preserve">
    <value>Specified values aren't enough to create key for type '{0}'.</value>
  </data>
  <data name="ExExtractedSchemaIsNotCompatibleWithTheTargetSchema" xml:space="preserve">
    <value>Extracted schema is not compatible with the target schema.</value>
  </data>
  <data name="ExCannotUpgradeSchemaSafely" xml:space="preserve">
    <value>Cannot upgrade schema safely.</value>
  </data>
  <data name="ExUpgradeOfAssemblyXFromVersionYToZIsNotSupported" xml:space="preserve">
    <value>Upgrade of assembly '{0}' from version '{1}' to '{2}' is not supported.</value>
  </data>
  <data name="ZeroAssemblyVersion" xml:space="preserve">
    <value>&lt;none&gt;</value>
  </data>
  <data name="ExDuplicateAssemblyNameX" xml:space="preserve">
    <value>Duplicate assembly name: '{0}'.</value>
  </data>
  <data name="ExNoUpgradeHandlerIsFoundForAssemblyXVersionY" xml:space="preserve">
    <value>No upgrade handler is found for assembly '{0}', version '{1}'.</value>
  </data>
  <data name="ExTypeWithNameXIsNotFoundInMetadata" xml:space="preserve">
    <value>Type with name '{0}' is not found in metadata.</value>
  </data>
  <data name="LogMetadataTypeRenamedXToY" xml:space="preserve">
    <value>Metadata.Type renamed: '{0}' to '{1}'</value>
  </data>
  <data name="MetadataAssemblyFormat" xml:space="preserve">
    <value>{0} (Version={1})</value>
  </data>
  <data name="MetadataTypeFormat" xml:space="preserve">
    <value>{0} (Id={1})</value>
  </data>
  <data name="LogMetadataAssemblyCreatedX" xml:space="preserve">
    <value>Metadata.Assembly created: '{0}'</value>
  </data>
  <data name="LogMetadataAssemblyUpdatedXFromVersionYToZ" xml:space="preserve">
    <value>Metadata.Assembly updated: '{0}', from version '{1}' to '{2}'</value>
  </data>
  <data name="ExMoreThanOneEnabledXIsProvidedForAssemblyY" xml:space="preserve">
    <value>More than one enabled {0} is provided for assembly '{1}'.</value>
  </data>
  <data name="ExExtractedSchemaIsNotEqualToTheTargetSchema" xml:space="preserve">
    <value>Extracted schema is not equal to the target schema.</value>
  </data>
  <data name="SchemaComparisonResultFormat" xml:space="preserve">
    <value>Status: {0}
Hints:
{1}
Difference:
{2}
Actions:
{3}</value>
  </data>
  <data name="LogComparisonResultX" xml:space="preserve">
    <value>Comparison result:
{0}</value>
  </data>
  <data name="LogClearingComparisonResultX" xml:space="preserve">
    <value>Clearing comparison result:
{0}</value>
  </data>
  <data name="LogSynchronizingSchemaInXMode" xml:space="preserve">
    <value>Synchronizing schema in {0} mode</value>
  </data>
  <data name="LogTargetSchema" xml:space="preserve">
    <value>Target schema:</value>
  </data>
  <data name="LogExtractedSchema" xml:space="preserve">
    <value>Extracted schema:</value>
  </data>
  <data name="ExStructuresDoNotSupportFieldsOfTypeX" xml:space="preserve">
    <value>Structures do not support fields of type '{0}'.</value>
  </data>
  <data name="ExMultipleHierarchyAttributesAreNotAllowed" xml:space="preserve">
    <value>Multiple hierarchy attributes are not allowed.</value>
  </data>
  <data name="LogDefiningHierarchyForTypeX" xml:space="preserve">
    <value>Defining hierarchy for type '{0}'</value>
  </data>
  <data name="LogDefiningFieldX" xml:space="preserve">
    <value>Defining field '{0}'</value>
  </data>
  <data name="LogBuildingDeclaredFieldXY" xml:space="preserve">
    <value>Building declared field '{0}.{1}'</value>
  </data>
  <data name="LogBuildingInheritedFieldXY" xml:space="preserve">
    <value>Building inherited field '{0}.{1}'</value>
  </data>
  <data name="LogBuildingInterfaceFieldXY" xml:space="preserve">
    <value>Building interface field '{0}.{1}'</value>
  </data>
  <data name="LogDefiningIndexes" xml:space="preserve">
    <value>Defining indexes.</value>
  </data>
  <data name="LogBuildingIndexX" xml:space="preserve">
    <value>Building index '{0}'</value>
  </data>
  <data name="LogSkippingEntityXAsItDoesNotBelongToAnyHierarchyThusItCannotBePersistent" xml:space="preserve">
    <value>Skipping entity '{0}' as it does not belong to any hierarchy thus it cannot be persistent.</value>
  </data>
  <data name="ExDowncastFromXToXNotSupportedUseOfTypeOrAsOperatorInstead" xml:space="preserve">
    <value>Downcast from '{0}' to '{1}' not supported. Use 'OfType' or 'as' operator instead.</value>
  </data>
  <data name="ExAsOperatorSupportsEntityOnly" xml:space="preserve">
    <value>'as' operator supports casting only inside Entity hierarchy.</value>
  </data>
  <data name="ExPrefetchDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>Prefetch does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExExcludeFieldsDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>ExcludeFields does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExIncludeFieldsDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>IncludeFields does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExMethodXNotFound" xml:space="preserve">
    <value>Method '{0}' is not found.</value>
  </data>
  <data name="ExOfTypeSupportsOnlyEntityConversion" xml:space="preserve">
    <value>OfType supports casting only inside Entity hierarchy.</value>
  </data>
  <data name="ExLambdaParameterIsOutOfScope" xml:space="preserve">
    <value>Lambda parameter is out of scope!</value>
  </data>
  <data name="LogFailedToExtractDomainModelFromStorage" xml:space="preserve">
    <value>Failed to extract domain model from the storage.</value>
  </data>
  <data name="LogDomainModelIsNotFoundInStorage" xml:space="preserve">
    <value>Domain model is not found in the storage.</value>
  </data>
  <data name="ExTypeXIsNotFound" xml:space="preserve">
    <value>Type '{0}' is not found.</value>
  </data>
  <data name="ExHintXIsConflictingWithHintY" xml:space="preserve">
    <value>Hint '{0}' is conflicting with hint '{1}'</value>
  </data>
  <data name="ExKeyOfXDoesNotMatchKeyOfY" xml:space="preserve">
    <value>Key of '{0}' does not match key of '{1}'.</value>
  </data>
  <data name="ExTypeXMustBelongToHierarchy" xml:space="preserve">
    <value>Type '{0}' must belong to hierarchy.</value>
  </data>
  <data name="ExUnauthorizedAccessDeclarationOfCallerTypeIsNotInRegisteredAssembly" xml:space="preserve">
    <value>Unauthorized: the caller is declared outside of any of registered assemblies.</value>
  </data>
  <data name="ExStructureOfFieldXDoesNotMatchStructureOfFieldY" xml:space="preserve">
    <value>Structure of field '{0}' does not match structure of field '{1}'.</value>
  </data>
  <data name="InvalidScaleAttributeOnFieldX" xml:space="preserve">
    <value>Invalid 'Scale' attribute on field '{0}'</value>
  </data>
  <data name="InvalidPrecisionAttributeOnFieldX" xml:space="preserve">
    <value>Invalid 'Precision' attribute on field '{0}'</value>
  </data>
  <data name="ExKeyComparerNotSupportedInGroupJoin" xml:space="preserve">
    <value>Key comparer is not supported in GroupJoin.</value>
  </data>
  <data name="TypeXDoesNotParticipateInTheSpecifiedAssociation" xml:space="preserve">
    <value>Type '{0}' does not participate in the specified association.</value>
  </data>
  <data name="ExActiveSessionIsRequiredForThisOperation" xml:space="preserve">
    <value>Active Session is required for this operation. Use Session.Open(...) to open it.</value>
  </data>
  <data name="ExReferentialIntegrityViolation" xml:space="preserve">
    <value>Referential integrity violation.</value>
  </data>
  <data name="ReferentialIntegrityViolationOnAttemptToRemoveXKeyY" xml:space="preserve">
    <value>Referential integrity violation on attempt to remove '{0}', Key='{1}'.</value>
  </data>
  <data name="ExJoinLeftDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>JoinLeft does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExTypeXDoesNotHaveAParameterlessConstructor" xml:space="preserve">
    <value>Type '{0}' does not have a parameterless constructor.</value>
  </data>
  <data name="ExCurrentSessionGetterIsAlreadyAssigned" xml:space="preserve">
    <value>Current session getter is already assigned.</value>
  </data>
  <data name="ExValueIsAlreadyAssigned" xml:space="preserve">
    <value>Value is already assigned.</value>
  </data>
  <data name="ExMaterializationErrorTypeIdColumnDoesNotExistsInTheUnderlyingRecordSet" xml:space="preserve">
    <value>Materialization error: Entity's TypeId column does not exist in the underlying RecordSet.</value>
  </data>
  <data name="KeyFormat" xml:space="preserve">
    <value>{0}, {1}</value>
  </data>
  <data name="KeyFormatUnknownKeyType" xml:space="preserve">
    <value>{0} (unknown), {1}</value>
  </data>
  <data name="ExKeyValuesArrayIsEmpty" xml:space="preserve">
    <value>Key values array is empty.</value>
  </data>
  <data name="ExKeyIndexesAreSpecifiedForNonGenericKey" xml:space="preserve">
    <value>Key indexes are specified for non-generic Key.</value>
  </data>
  <data name="ExSequenceContainsNoElements" xml:space="preserve">
    <value>Sequence contains no elements.</value>
  </data>
  <data name="EntityStateFormat" xml:space="preserve">
    <value>Key = '{0}', Tuple = {1}, State = {2}</value>
  </data>
  <data name="NA" xml:space="preserve">
    <value>n/a</value>
  </data>
  <data name="ExTableXIsNotFound" xml:space="preserve">
    <value>Table with name '{0}' is not found.</value>
  </data>
  <data name="ExColumnXIsNotFoundInTableY" xml:space="preserve">
    <value>Column with name '{0}' is not found in table '{1}'.</value>
  </data>
  <data name="ExProtocolXIsNotSupportedUseOneOfTheFollowingY" xml:space="preserve">
    <value>Protocol "{0}" is not supported. Use one of the following: "{1}".</value>
  </data>
  <data name="ExTypeXDoesNotContainYField" xml:space="preserve">
    <value>Type '{0}' does not contain '{1}' field.</value>
  </data>
  <data name="ExFieldMustBeOfEntitySetType" xml:space="preserve">
    <value>Field must be of EntitySet&lt;&gt; type.</value>
  </data>
  <data name="ExFieldXIsNotAnEntitySetField" xml:space="preserve">
    <value>Field '{0}' is not an EntitySet field.</value>
  </data>
  <data name="ExEntityOfTypeXIsIncompatibleWithThisEntitySet" xml:space="preserve">
    <value>Entity of type '{0}' is incompatible with this EntitySet.</value>
  </data>
  <data name="EntityWithKeyXDoesNotExist" xml:space="preserve">
    <value>Entity with Key = '{0}' does not exist.</value>
  </data>
  <data name="CanUpgradeTypeSafely" xml:space="preserve">
    <value>Can upgrade types safely</value>
  </data>
  <data name="CantUpgradeTypeSafely" xml:space="preserve">
    <value>Can't upgrade types safely</value>
  </data>
  <data name="ExThereIsNoCurrentHttpRequestOrSessionManagerIsnTBoundToItYet" xml:space="preserve">
    <value>There is no current HttpRequest, or SessionManager is not bound to it yet.</value>
  </data>
  <data name="ExQueryContainsClosuresOfDifferentTypes" xml:space="preserve">
    <value>The query contains closures of different types.</value>
  </data>
  <data name="ExInvalidPrefetchSelectorX" xml:space="preserve">
    <value>Invalid prefetch selector '{0}'</value>
  </data>
  <data name="ExCanNotCommitATransactionValidationContextIsInInvalidState" xml:space="preserve">
    <value>Can not commit a transaction. Validation context is in invalid state.</value>
  </data>
  <data name="ExLockDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>Lock does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExCurrentTransactionIsDifferentFromTransactionBoundToThisInstance" xml:space="preserve">
    <value>The current transaction is different from the transaction bound to this instance.</value>
  </data>
  <data name="ExOnOwnerRemoveActionIsNotEqualToOnTargetRemoveAction" xml:space="preserve">
    <value>'{0}.{1}' OnOwnerRemove action is not equal to '{2}.{3}' OnTargetRemove action.</value>
  </data>
  <data name="ExTypeMappingDoesNotContainXType" xml:space="preserve">
    <value>Type mapping does not contain '{0}' type</value>
  </data>
  <data name="ExFieldMappingDoesNotContainField" xml:space="preserve">
    <value>Field mapping does not contain '{0} field.</value>
  </data>
  <data name="ExInheritanceSchemaIsInvalid" xml:space="preserve">
    <value>Inheritance schema '{0}' is invalid</value>
  </data>
  <data name="ExVisitKeyFieldIsNotSupportedByX" xml:space="preserve">
    <value>VisitKeyField is not supported by '{0}'.</value>
  </data>
  <data name="ExPairedIdentityColumnsForTypesXAndXNotFound" xml:space="preserve">
    <value>Paired identity columns for types '{0}' and '{1}' not found</value>
  </data>
  <data name="ExCouldNotGetMemberXFromExpression" xml:space="preserve">
    <value>Could not get member {0} from expression.</value>
  </data>
  <data name="ExIncorrectNamespaceSynonyms" xml:space="preserve">
    <value>Incorrect namespace synonyms.</value>
  </data>
  <data name="ExMethodXIsntSupported" xml:space="preserve">
    <value>'{0}' method isn't supported.</value>
  </data>
  <data name="ExpressionXIsUnknown" xml:space="preserve">
    <value>Expression '{0}' is unknown</value>
  </data>
  <data name="ExFieldIsNotStructure" xml:space="preserve">
    <value>Field '{0}' is not structure.</value>
  </data>
  <data name="ExNestedFieldXIsNotSupported" xml:space="preserve">
    <value>Nested field '{0}' is not supported.</value>
  </data>
  <data name="ExFieldXIsNotPrimitive" xml:space="preserve">
    <value>Field '{0}' is not primitive.</value>
  </data>
  <data name="ExFieldXIsNotEntity" xml:space="preserve">
    <value>Field '{0}' is not entity.</value>
  </data>
  <data name="ExPersistentTypeXIsNotEntityOrPersistentInterface" xml:space="preserve">
    <value>Persistent type '{0}' is not entity or persistent interface.</value>
  </data>
  <data name="ExConfigurationWithXNameAlreadyRegistered" xml:space="preserve">
    <value>Configuration with '{0}' name already registered.</value>
  </data>
  <data name="ExXNameCantBeEmpty" xml:space="preserve">
    <value>'{0}' name can't be empty.</value>
  </data>
  <data name="ExXIsNotValidNameForX" xml:space="preserve">
    <value>'{0}' is not valid name for {1}.</value>
  </data>
  <data name="ExHierarchyXDoesntContainAnyKeyFields" xml:space="preserve">
    <value>Hierarchy '{0}' doesn't contain any key fields.</value>
  </data>
  <data name="ExKeyStructureForXContainsNULLValue" xml:space="preserve">
    <value>Key structure for '{0}' contains NULL value.</value>
  </data>
  <data name="ExKeyFieldXXIsNotFound" xml:space="preserve">
    <value>Key field '{0}.{1}' is not found.</value>
  </data>
  <data name="ExKeyFieldCantBeOfXType" xml:space="preserve">
    <value>Key field can't be of '{0}' type.</value>
  </data>
  <data name="ExXMustBeInheritedFromX" xml:space="preserve">
    <value>'{0}' must be inherited from '{1}'.</value>
  </data>
  <data name="ExFieldOfTypeXCannotBeNullableForValueTypesConsiderUsingNullableT" xml:space="preserve">
    <value>Field of type '{0}' cannot be nullable. For value types consider using Nullable&lt;T&gt;.</value>
  </data>
  <data name="ExStructureXCantContainFieldOfTheSameType" xml:space="preserve">
    <value>Structure '{0}' can't contain field of the same type.</value>
  </data>
  <data name="ExValueIsNotAcceptableForOnTargetRemoveProperty" xml:space="preserve">
    <value>'{0}.{1}': '{2}' value is not acceptable for 'OnTargetRemove' property.</value>
  </data>
  <data name="ExHierarchyIsNotFoundForTypeX" xml:space="preserve">
    <value>Hierarchy is not found for type '{0}'</value>
  </data>
  <data name="ExUnableToBuildGenericInstanceTypesForXTypeBecauseItContainsMoreThen1GenericParameter" xml:space="preserve">
    <value>Unable to build generic instance types for '{0}' type because it contains more then 1 generic parameter.</value>
  </data>
  <data name="ExUnableToBuildGenericInstanceTypesForXTypeBecauseParameterIsNotConstrained" xml:space="preserve">
    <value>Unable to build generic instance types for '{0}' type because parameter is not constrained.</value>
  </data>
  <data name="ExItemByKeyXWasNotFound" xml:space="preserve">
    <value>Item by key ='{0}' was not found.</value>
  </data>
  <data name="ExAtLeastOneLoopHaveBeenFoundInPersistentTypeDependenciesGraphSuspiciousTypesX" xml:space="preserve">
    <value>At least one loop have been found in persistent type dependencies graph. Suspicious types: {0}</value>
  </data>
  <data name="ExKeyFieldsXAndXHaveTheSamePositionX" xml:space="preserve">
    <value>Key fields '{0}' and '{1}' have the same position: '{2}'.</value>
  </data>
  <data name="ExUnableToRemapFieldExpression" xml:space="preserve">
    <value>Unable to remap FieldExpression.</value>
  </data>
  <data name="ExNonpersistentFieldsAreNotSupported" xml:space="preserve">
    <value>Nonpersistent fields are not supported.</value>
  </data>
  <data name="CachedQuerySupportsOnlyQueriesWrittenWithinItsExecuteMethods" xml:space="preserve">
    <value>CachedQuery supports only queries written within its Execute methods.</value>
  </data>
  <data name="ExAggregatesForNonPrimitiveTypesAreNotSupported" xml:space="preserve">
    <value>Aggregates for non primitive types are not supported.</value>
  </data>
  <data name="ExParameterExpressionMustHaveSameTypeAsProjectionExpressionItemProjector" xml:space="preserve">
    <value>ParameterExpression must have same type as ProjectionExpression.ItemProjector</value>
  </data>
  <data name="ExXDoesNotSupportX" xml:space="preserve">
    <value>'{0}' does not support '{1}'.</value>
  </data>
  <data name="ExHierarchyRootIsNotRegistered" xml:space="preserve">
    <value>Hierarchy root is not registered.</value>
  </data>
  <data name="ExOnlyEntitiesCouldBeHierarchyRoots" xml:space="preserve">
    <value>Only entities could be hierarchy roots.</value>
  </data>
  <data name="ExFieldXIsNotAnEntityReferenceNorEntitySet" xml:space="preserve">
    <value>Field '{0}' is not an entity reference, nor entity set.</value>
  </data>
  <data name="ExUnableToRemapKeyExpression" xml:space="preserve">
    <value>Unable to remap KeyExpression</value>
  </data>
  <data name="ExUnableToHandleEntitySetExpressionWithoutSpecifiedOwner" xml:space="preserve">
    <value>Unable to handle EntitySetExpression without specified Owner.</value>
  </data>
  <data name="ExUnableToRemoveOwnerFromEntitySetExpression" xml:space="preserve">
    <value>Unable to remove Owner from EntitySetExpression.</value>
  </data>
  <data name="ExUnableToUseBaseImplementationOfVisitGenericExpressionWithoutSpecifyingGenericProcessorDelegate" xml:space="preserve">
    <value>Unable to use base implementation of VisitGenericExpression without specifying genericProcessor delegate.</value>
  </data>
  <data name="ExUnableToResolveOwnerOfStructureExpressionX" xml:space="preserve">
    <value>Unable to resolve owner of StructureExpression '{0}'.</value>
  </data>
  <data name="ExUnableToResolveOwnerOfFieldExpressionX" xml:space="preserve">
    <value>Unable to resolve owner of FieldExpression '{0}'.</value>
  </data>
  <data name="ExSelectManyCollectionSelector0MustHaveOnlyOneLambdaParameter" xml:space="preserve">
    <value>SelectMany collection selector '{0}' must have only one lambda parameter.</value>
  </data>
  <data name="SubqueryXHeaderMustHaveOnlyOneColumn" xml:space="preserve">
    <value>Subquery '{0}' header must have only one column.</value>
  </data>
  <data name="ExLINQTranslatorDoesNotSupportMethodX" xml:space="preserve">
    <value>LINQ translator does not support method '{0}'</value>
  </data>
  <data name="ExContainsMethodIsOnlySupportedForRootExpressionsOrSubqueries" xml:space="preserve">
    <value>'Contains' method is only supported for root expressions or subqueries.</value>
  </data>
  <data name="ExAllMethodIsOnlySupportedForRootExpressionsOrSubqueries" xml:space="preserve">
    <value>'All' method is only supported for root expressions or subqueries.</value>
  </data>
  <data name="ExAnyMethodIsOnlySupportedForRootExpressionsOrSubqueries" xml:space="preserve">
    <value>'Any' method is only supported for root expressions or subqueries.</value>
  </data>
  <data name="ExTypeIsMethodSupportsOnlyEntitiesAndStructures" xml:space="preserve">
    <value>'TypeIs' method supports only Entities and Structures.</value>
  </data>
  <data name="ExBinaryExpressionXOfTypeXIsNotSupported" xml:space="preserve">
    <value>Binary expression '{0}' of type '{1}' is not supported.</value>
  </data>
  <data name="ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotStructureExpression" xml:space="preserve">
    <value>Both left and right part of binary expression '{0}' are NULL or not StructureExpression.</value>
  </data>
  <data name="ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotEntityExpressionEntityFieldExpression" xml:space="preserve">
    <value>Both left and right part of binary expression '{0}' are NULL or not EntityExpression(EntityFieldExpression).</value>
  </data>
  <data name="ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotKeyExpression" xml:space="preserve">
    <value>Both left and right part of binary expression '{0}' are NULL or not KeyExpression.</value>
  </data>
  <data name="ExMistmatchCountOfLeftAndRightExpressions" xml:space="preserve">
    <value>Mistmatch count of left and right expressions.</value>
  </data>
  <data name="ExUnableToBuildSubqueryResultForExpressionXStateContainsNoParameters" xml:space="preserve">
    <value>Unable to build subquery result for expression '{0}'. State contains no parameters.</value>
  </data>
  <data name="ExUnableToBuildSubqueryResultForExpressionXResultTypeIsNotIEnumerable" xml:space="preserve">
    <value>Unable to build subquery result for expression '{0}'. resultType is not IEnumerable&lt;&gt;.</value>
  </data>
  <data name="ExMethodCallExpressionXIsNotSupported" xml:space="preserve">
    <value>MethodCall expression '{0}' is not supported.</value>
  </data>
  <data name="ExLambdaXMustHaveOnlyOneParameter" xml:space="preserve">
    <value>Lambda '{0}' must have only one parameter.</value>
  </data>
  <data name="ExAggregateMethodXIsNotSupported" xml:space="preserve">
    <value>Aggregate method '{0} is not supported.</value>
  </data>
  <data name="ExCantAccessMemberOfTypeEntitySet" xml:space="preserve">
    <value>Can't access member of type 'EntitySet&lt;&gt;'.</value>
  </data>
  <data name="CantAccessMemberX" xml:space="preserve">
    <value>Can't access member '{0}'</value>
  </data>
  <data name="ExUnableToTranslateLambdaExpressionXBecauseItRequiresToMaterializeEntityOfTypeX" xml:space="preserve">
    <value>Unable to translate lambda expression '{0}' because it requires to materialize entity of type '{1}'.</value>
  </data>
  <data name="ExTypeXIsNotSupportedInNewExpression" xml:space="preserve">
    <value>Type '{0}' is not supported in 'new' expression.</value>
  </data>
  <data name="ExCanNotCommitATransactionEntitiesValidationFailed" xml:space="preserve">
    <value>Can not commit a transaction. Entities validation failed.</value>
  </data>
  <data name="ExTypeXIsNotStructure" xml:space="preserve">
    <value>Type '{0}' is not structure.</value>
  </data>
  <data name="ExUnableToMaterializeBackLocalCollectionItem" xml:space="preserve">
    <value>Unable to materialize back local collection item.</value>
  </data>
  <data name="ExTypeXDoesNotHasAnyPublicReadablePropertiesOrFieldsSoItCanTBePersistedToStorage" xml:space="preserve">
    <value>Type '{0}' does not has any public readable properties or fields, so it can't be persisted to storage.</value>
  </data>
  <data name="ExSpecifiedTypeHierarchyIsDifferentFromKeyHierarchy" xml:space="preserve">
    <value>The specified type's hierarchy is different from the key's hierarchy.</value>
  </data>
  <data name="ExFieldXIsNotDeclaredInTypeYOrInOneOfItsAncestors" xml:space="preserve">
    <value>The field {0} is not declared in the type {1} or in one of its ancestors.</value>
  </data>
  <data name="ExIndexesOfColumnsToBeLoadedAreNotSpecified" xml:space="preserve">
    <value>Indexes of columns to be loaded are not specified.</value>
  </data>
  <data name="ExReferencingEntityWithKeyXIsNotFound" xml:space="preserve">
    <value>The referencing entity with key {0} is not found.</value>
  </data>
  <data name="ExReferencingEntityTupleIsNotLoaded" xml:space="preserve">
    <value>The referencing entity's tuple is not loaded.</value>
  </data>
  <data name="ExForeignKeyValueHaveNotBeenLoaded" xml:space="preserve">
    <value>The foreign key's value have not been loaded.</value>
  </data>
  <data name="ExSpecifiedExpressionIsNotMemberExpression" xml:space="preserve">
    <value>The specified expression is not MemberExpression</value>
  </data>
  <data name="ExAccessToTypeMemberCanNotBeExtractedFromSpecifiedExpression" xml:space="preserve">
    <value>The access to a type's member can not be extracted from the specified expression.</value>
  </data>
  <data name="ExAccessedMemberIsNotProperty" xml:space="preserve">
    <value>The accessed member is not a property.</value>
  </data>
  <data name="ExSpecifiedPropertyXIsNotPersistent" xml:space="preserve">
    <value>The specified property {0} is not persistent.</value>
  </data>
  <data name="ExPrimaryKeyFieldXCanTBeMarkedAsVersion" xml:space="preserve">
    <value>Primary key field '{0}' can't be marked as Version.</value>
  </data>
  <data name="ExVersionFieldXCanTBeLazyLoadField" xml:space="preserve">
    <value>Version field '{0}' can't be LazyLoad field.</value>
  </data>
  <data name="ExVersionFieldXCanTBeOfYType" xml:space="preserve">
    <value>Version field '{0}' can't be of {1} type.</value>
  </data>
  <data name="ExVersionFieldXCanTBeSystemField" xml:space="preserve">
    <value>Version field '{0}' can't be System field.</value>
  </data>
  <data name="VersionFieldXCanTBeTypeIdField" xml:space="preserve">
    <value>Version field '{0}' can't be TypeId field.</value>
  </data>
  <data name="ExTypeXCantContainsVersionFieldsAsItsNotAHierarchyRoot" xml:space="preserve">
    <value>Type '{0}' can't contains Version fields as it's not a HierarchyRoot.</value>
  </data>
</root>