// Copyright (C) 2009 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Alexey Gamzov
// Created:    2009.12.11

using System;
using NUnit.Framework;
using Xtensive.Core.Tuples;
using Xtensive.Storage.Configuration;
using Xtensive.Storage.Model;


namespace Xtensive.Storage.Manual.Attributes
{
  [TestFixture]
  public class AttributesSample
  {
    // Custom int key generator
    public class CustomIntKeyGenerator : KeyGenerator
    {
      private int counter;

      public override Tuple Next()
      {
        return Tuple.Create(counter++);
      }

      public CustomIntKeyGenerator(KeyProviderInfo keyProviderInfo)
        : base(keyProviderInfo)
      {
      }
    }

    // All descendant entities will be placed in the same table.
    [HierarchyRoot(InheritanceSchema = InheritanceSchema.SingleTable)]
    // Index on field "ISBN" that includes additiona "Title" field along with keyfield.
    [Index("ISBN", IncludedFields = new[] {"Title"})]
    // "Book" keys will be generated by custom "CustomKeyGenerator" key generator. 
    // KeyGenerator will generate 1024 keys per iteration.
    [KeyGenerator(typeof (CustomIntKeyGenerator), CacheSize = 1024)]
    public abstract class Book : Entity
    {
      // This field will be used for descendant entities type information.
      [Field(TypeDiscriminator = true)]
      public bool BookType { get; private set; }

      [Key, Field]
      public int Id { get; private set; }

      [Field]
      public string ISBN { get; set; }

      [Field]
      public int Title { get; set; }

      // Field associated to "Books" field int the "Author" entity
      [Association(PairTo = "Books")]
      [Field]
      public Author Author { get; set; }
    }

    // If "BookType" field contains "true" value, the entity is "SciFi"
    [TypeDiscriminatorValue(true)]
    public class SciFi : Book
    {
    }

    // If "BookType" field contains "false" value, the entity is "Horror"
    [TypeDiscriminatorValue(false)]
    public class Horror : Book
    {
    }

    // Entity "Author" will be mapped to "Persons" table.
    [TableMapping("Persons")]
    // Key will include "TypeId" field.
    [HierarchyRoot(IncludeTypeId = true)]
    public class Author : Entity
    {
      // Key field. The default key generator will be used 
      // because [HierarchyRoot] attribute does not specify custom key generator
      [Key]
      [Field]
      // Field will be mapped to "ID_PERSON" table column.
      [FieldMapping("ID_PERSON")]
      public int Id { get; private set; }

      [Field]
      public string Name { get; set; }

      // Then author removed, all its books will be removed too.
      [Field, Association(OnOwnerRemove = OnRemoveAction.Cascade)]
      public EntitySet<Book> Books { get; set; }
    }


    [Test]
    public void BuildModelTest()
    {
      var config = new DomainConfiguration("sqlserver://localhost/DO40-Tests");
      config.UpgradeMode = DomainUpgradeMode.Recreate;
      config.Types.Register(typeof (Author).Assembly, typeof(Author).Namespace);
      var domain = Domain.Build(config);
      using (var session = Session.Open(domain)) {
        using (Transaction.Open(session)) {
          var author = new Author();
          var sciFi = new SciFi {Author = author};
          var horror = new Horror {Author = author};
          session.Persist();
        }
      }
    }
  }
}