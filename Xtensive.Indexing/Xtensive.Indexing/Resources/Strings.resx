<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExMeasurementIsAlreadyCompleted" xml:space="preserve">
    <value>Measurement is already completed.</value>
  </data>
  <data name="ExItemWithTheSameKeyHasBeenAdded" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
  </data>
  <data name="ExMeasureIsNotDefined" xml:space="preserve">
    <value>Measure "{0}" is not defined.</value>
  </data>
  <data name="ExNodeRefIsOutOfRange" xml:space="preserve">
    <value>Node reference is out of range.</value>
  </data>
  <data name="ExIndexIsAlreadyInitialized" xml:space="preserve">
    <value>Index is already initialized.</value>
  </data>
  <data name="ExUseAnotherCreateMethod" xml:space="preserve">
    <value>Use another Create method to create StreamPageRef of such type.</value>
  </data>
  <data name="ExStreamIsNotEmpty" xml:space="preserve">
    <value>Stream is not empty.</value>
  </data>
  <data name="ExIndexPageProviderDoesntSupportSerialize" xml:space="preserve">
    <value>IndexPageProvider doesn't support serialization (Serialize method).</value>
  </data>
  <data name="ExIndexPageProviderDoesntSupportWrite" xml:space="preserve">
    <value>IndexPageProvider doesn't support data modification operations (Add \ Remove \ Clear methods).</value>
  </data>
  <data name="ExIncorrectKeyOrder" xml:space="preserve">
    <value>Incorrect key order. Keys should be enumerated in the direction specified by comparer.</value>
  </data>
  <data name="ExIndexDoesntSupportMeasures" xml:space="preserve">
    <value>Index "{0}" doesn't support measures.</value>
  </data>
  <data name="ExCantDeserializeIndexPage" xml:space="preserve">
    <value>Can't deserialize index page with the following identifier: {0}. Exception: {1}</value>
  </data>
  <data name="ExCantDeserializeBloomFilter" xml:space="preserve">
    <value>Can't deserialize Bloom filter.</value>
  </data>
  <data name="ExIndexPageProviderIsUnboundToTheIndex" xml:space="preserve">
    <value>IndexPageProvider is unbound to the Index.</value>
  </data>
  <data name="ExHasherNotFound" xml:space="preserve">
    <value>Hasher for type {0} not found.</value>
  </data>
  <data name="EntireFormat" xml:space="preserve">
    <value>E:{0}</value>
  </data>
  <data name="ExCantPassNoInfinityToThisConstructor" xml:space="preserve">
    <value>InfinityType.None can't be passed to this constructor.</value>
  </data>
  <data name="ExEnumerationIsAlreadyFinished" xml:space="preserve">
    <value>Enumeration is already finished.</value>
  </data>
  <data name="ExFieldIsInfinite" xml:space="preserve">
    <value>Field with index '{0}' is infinitу.</value>
  </data>
  <data name="ExValueIsNotAvailable" xml:space="preserve">
    <value>Value is not available.</value>
  </data>
  <data name="InfinitesimalFormat" xml:space="preserve">
    <value>{0}{1}d</value>
  </data>
  <data name="Infinity" xml:space="preserve">
    <value>inf</value>
  </data>
  <data name="NotAvailable" xml:space="preserve">
    <value>n\a</value>
  </data>
  <data name="Null" xml:space="preserve">
    <value>null</value>
  </data>
  <data name="ExBothMeasurementsHaveNoValue" xml:space="preserve">
    <value>Both measurements have no value.</value>
  </data>
  <data name="ExEndPointOrderMustBeEqual" xml:space="preserve">
    <value>EndPoints order of both ranges must be equal.</value>
  </data>
  <data name="ExMeasurementMustHaveValue" xml:space="preserve">
    <value>Measurement '{0}' must have value.</value>
  </data>
  <data name="ExMergeOperationRequireIntersectionOfOperands" xml:space="preserve">
    <value>Merge operation require intersection of operands.</value>
  </data>
  <data name="ExRangeIsEmpty" xml:space="preserve">
    <value>Range is empty.</value>
  </data>
  <data name="MeasuresAndMeasurementsHaveDifferentAmountOfItems" xml:space="preserve">
    <value>Measures and measurements have different amount of items.</value>
  </data>
  <data name="MeasureWithTheNameWasNotFound" xml:space="preserve">
    <value>Measure with the name '{0}' was not found.</value>
  </data>
  <data name="RangeFormat" xml:space="preserve">
    <value>({0} ... {1})</value>
  </data>
  <data name="RayFormat" xml:space="preserve">
    <value>({0} -&gt; {1})</value>
  </data>
  <data name="ReversedFormat" xml:space="preserve">
    <value>Reversed({0})</value>
  </data>
  <data name="ExUnableToGetCountForBloomFilter" xml:space="preserve">
    <value>Argument must be ICountable, ICollection or ICollection&lt;TITem&gt; in order to get Count.</value>
  </data>
  <data name="ExInvalidPageSize" xml:space="preserve">
    <value>Invalid IndexConfiguration.PageSize property value. Should be greater than 0, less then 65536 and must be an even value.</value>
  </data>
  <data name="ExEnumerationIsNotStarted" xml:space="preserve">
    <value>Enumeration is not started.</value>
  </data>
  <data name="SeekResultPointerFormat" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="SeekResultFormat" xml:space="preserve">
    <value>{0} ({1}</value>
  </data>
  <data name="ExIndexesCannotBeMerged" xml:space="preserve">
    <value>Indexes cannot be merged.</value>
  </data>
</root>