<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <NoBuild>true</NoBuild>
    <!-- prevents error `The 'NoBuild' property was set to true but the 'Build' target was invoked` -->
    <!-- will be removed after https://github.com/NuGet/Home/issues/7801 in netcore > 5 ? -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>
    <CopyDocumentationFileToOutputDirectory>false</CopyDocumentationFileToOutputDirectory>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <PackageId>tmp</PackageId>
    <PackageOutputPath>$(BaseIntermediateOutputPath)</PackageOutputPath>
    <RunAnalyzersDuringBuild>false</RunAnalyzersDuringBuild>
    <RunAnalyzersDuringLiveAnalysis>false</RunAnalyzersDuringLiveAnalysis>
    <RunAnalyzers>false</RunAnalyzers>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <WarningLevel>0</WarningLevel>
  </PropertyGroup>
  <!-- Force Release Configuration build and check env variables / User.Directory.Build.props -->
  <Target Name="_CheckConfiguration" BeforeTargets="CoreBuild">
    <Error Condition="'$(Configuration)' != 'Release'" Text="You should build this project only in 'Release' configuration. Use `dotnet build -c Release`" />
    <Error Condition="'$(DoNugetFeedUserName)' == ''" Text="You should set 'DoNugetFeedUserName' property in User.Directory.Build.props or in env variable" />
    <Error Condition="'$(DoNugetFeedPassword)' == ''" Text="You should set 'DoNugetFeedPassword' property in User.Directory.Build.props or in env variable" />
    <Error Condition="'$(DoNugetFeedUrl)' == ''" Text="You should set 'DoNugetFeedUrl' property in User.Directory.Build.props or in env variable" />
  </Target>

  <ItemGroup Label="Build order">
    <ProjectReference Include="$(SolutionDir)\Extensions\**\*.csproj" ReferenceOutputAssembly="false" SkipGetTargetFrameworkProperties="true" />
    <ProjectReference Include="$(SolutionDir)\Orm\**\*.csproj" ReferenceOutputAssembly="false" SkipGetTargetFrameworkProperties="true" />
    <ProjectReference Include="$(SolutionDir)\Weaver\**\*.csproj" ReferenceOutputAssembly="false" SkipGetTargetFrameworkProperties="true" />
  </ItemGroup>
  <!-- You can add to this list in User.Directory.Build.props -->
  <ItemGroup>
    <NugetPublishInput Include="$(SolutionDir)_Build\Release\packages\Xtensive.Orm.$(Version).nupkg" />
    <NugetPublishInput Include="$(SolutionDir)_Build\Release\packages\Xtensive.Orm.BulkOperations.$(Version).nupkg" />
    <NugetPublishInput Include="$(SolutionDir)_Build\Release\packages\Xtensive.Orm.Logging.NLog.$(Version).nupkg" />
    <NugetPublishInput Include="$(SolutionDir)_Build\Release\packages\Xtensive.Orm.Security.$(Version).nupkg" />
    <NugetPublishInput Include="$(SolutionDir)_Build\Release\packages\Xtensive.Orm.SqlServer.$(Version).nupkg" />
    <NugetPublishInput Include="$(SolutionDir)_Build\Release\packages\Xtensive.Orm.Tracking.$(Version).nupkg" />
  </ItemGroup>

  <!-- If package-lock.json has changed, perform an NPM install -->
  <Target Name="PublishToNuget" AfterTargets="Pack" DependsOnTargets="Pack">
    <Message Importance="high" Text="Publish nupkg %(NugetPublishInput.Identity) to server" />
    <!-- Create empty valid NuGet.Config file and add credentials there -->
    <WriteLinesToFile File="$(SolutionDir)_Build\Release\packages\NuGet.Config" Lines="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;configuration&gt;&lt;/configuration&gt;" Overwrite="True" />
    <Exec Command="dotnet nuget add source $(DoNugetFeedUrl) --username $(DoNugetFeedUserName) --password $(DoNugetFeedPassword) --store-password-in-clear-text --configfile NuGet.Config" WorkingDirectory="$(SolutionDir)_Build\Release\packages" />
    <!-- Push packages using credentials from NuGet.Config file and then delete NuGet.Config  -->
    <Exec Command="dotnet nuget push %(NugetPublishInput.Identity) --force-english-output --timeout 60 --api-key az --source $(DoNugetFeedUrl)" WorkingDirectory="$(SolutionDir)_Build\Release\packages" />
    <Delete Files="$(SolutionDir)_Build\Release\packages\NuGet.Config" />
  </Target>
</Project>