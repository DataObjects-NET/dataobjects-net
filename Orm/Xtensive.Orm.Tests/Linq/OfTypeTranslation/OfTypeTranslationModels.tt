<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (C) 2019 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Denis Kudelin
// Created:    2019.02.07

using Xtensive.Orm.Model;
using System.Linq.Expressions;
using System;

<#
Func<string> GetClassName = null;
string rootAttr = null;

Action PopulateData = () => {
#>
    new TestEntity3a<#=GetClassName()#>()
    {
        BaseField = 1,
        Field1 = 10,
        Field2 = 1000,
        Field3 = new TestStructure1<#=GetClassName()#>
        {
        Value1 = 10000,
        Value2 = new TestStructure2<#=GetClassName()#>
        {
            Value1 = 100000,
            Value2 = DateTime.FromBinary(10)
        },
        Value3 = "StructureString1"
        },
        Field4 = "String1",
        Field5 = 2.5,
    }.Field6.Add(
        new TestEntity3a<#=GetClassName()#>
        {
        BaseField = 2,
        Field1 = 20,
        Field2 = 2000,
        Field3 = new TestStructure1<#=GetClassName()#>
        {
            Value1 = 20000,
            Value2 = new TestStructure2<#=GetClassName()#>
            {
            Value1 = 200000,
            Value2 = DateTime.FromBinary(1000)
            },
            Value3 = "StructureString2"
        },
        Field4 = "String2",
        Field5 = 3.5,
        });
    new TestEntity2b<#=GetClassName()#>()
    {
        BaseField = 3,
        Field1 = 30,
        Field2 = 3000,
        Field3 = new TestStructure1<#=GetClassName()#>
        {
        Value1 = 30000,
        Value2 = new TestStructure2<#=GetClassName()#>
        {
            Value1 = 300000,
            Value2 = DateTime.FromBinary(100000)
        },
        Value3 = "StructureString3"
        },
        Field4 = "String3"
    };
    new TestEntity2c<#=GetClassName()#>()
    {
        BaseField = 4,
        Field1 = 40,
        Field2 = 4000,
        Field3 = new TestStructure1<#=GetClassName()#>
        {
        Value1 = 40000,
        Value2 = new TestStructure2<#=GetClassName()#>
        {
            Value1 = 400000,
            Value2 = DateTime.FromBinary(400000)
        },
        Value3 = "StructureString4"
        },
        Field4 = "String4"
    };
    new TestEntityHierarchy2<#=GetClassName()#>()
    {
        BaseField = 5,
        Field1 = 50,
        Field3 = new TestStructure1<#=GetClassName()#>
        {
        Value1 = 50000,
        Value2 = new TestStructure2<#=GetClassName()#>
        {
            Value1 = 500000,
            Value2 = DateTime.FromBinary(5000000)
        },
        Value3 = "StructureString5"
        },
        Field4 = "String5"
    };
<#
};

Action TestModels = () => {
#>
  public interface IBaseEntity<#=GetClassName()#> : IEntity
  {
    [Field, Key]
    int Id { get; }

    [Field]
    long Field1 { get; set; }
  }

  public interface ITestEntityBase<#=GetClassName()#> : IEntity
  {
    [Field]
    ulong BaseField { get; set; }
  }

  public interface ITestEntity2<#=GetClassName()#> : ITestEntityBase<#=GetClassName()#>
  {
    [Field]
    TestStructure1<#=GetClassName()#> Field3 { get; set; }

    [Field]
    string Field4 { get; set; }
  }

  public interface ITestEntity3a<#=GetClassName()#> : ITestEntityBase<#=GetClassName()#>
  {
    [Field]
    double Field5 { get; set; }

    [Field]
    EntitySet<TestEntity2a<#=GetClassName()#>> Field6 { get; set; }
  }

  public interface ITestEntity2c<#=GetClassName()#> : ITestEntityBase<#=GetClassName()#>
  {
    [Field]
    TestStructure1<#=GetClassName()#> Field3 { get; set; }

    [Field]
    string Field4 { get; set; }
  }

  public class BaseEntity<#=GetClassName()#> : Entity, IBaseEntity<#=GetClassName()#>
  {
    public int Id { get; private set; }

    public long Field1 { get; set; }
  }

  <#=rootAttr#>
  public class TestEntity1<#=GetClassName()#> : BaseEntity<#=GetClassName()#>
  {
    [Field]
    public long Field2 { get; set; }
  }

  public class TestEntity2a<#=GetClassName()#> : TestEntity1<#=GetClassName()#>, ITestEntity2<#=GetClassName()#>
  {
    public TestStructure1<#=GetClassName()#> Field3 { get; set; }

    public ulong BaseField { get; set; }

    public string Field4 { get; set; }
  }

  public class TestEntity3a<#=GetClassName()#> : TestEntity2a<#=GetClassName()#>, ITestEntity3a<#=GetClassName()#>
  {
    public double Field5 { get; set; }

    public EntitySet<TestEntity2a<#=GetClassName()#>> Field6 { get; set; }
  }

  public class TestEntity2b<#=GetClassName()#> : TestEntity1<#=GetClassName()#>, ITestEntity2<#=GetClassName()#>
  {
    [Field]
    public EntitySet<TestEntity2b<#=GetClassName()#>> Field5 { get; set; }

    public ulong BaseField { get; set; }

    public string Field4 { get; set; }

    public TestStructure1<#=GetClassName()#> Field3 { get; set; }
  }

  public class TestEntity2c<#=GetClassName()#> : TestEntity1<#=GetClassName()#>, ITestEntity2c<#=GetClassName()#>
  {
    public ulong BaseField { get; set; }

    public TestStructure1<#=GetClassName()#> Field3 { get; set; }

    public string Field4 { get; set; }
  }

  <#=rootAttr#>
  public class TestEntityHierarchy2<#=GetClassName()#> : BaseEntity<#=GetClassName()#>, ITestEntity2<#=GetClassName()#>
  {
    public ulong BaseField { get; set; }

    public TestStructure1<#=GetClassName()#> Field3 { get; set; }

    public string Field4 { get; set; }
  }

  public class TestStructure1<#=GetClassName()#> : Structure
  {
    [Field]
    public int Value1 { get; set; }

    [Field]
    public TestStructure2<#=GetClassName()#> Value2 { get; set; }

    [Field]
    public string Value3 { get; set; }
  }

  public class TestStructure2<#=GetClassName()#> : Structure
  {
    [Field]
    public int Value1 { get; set; }

    [Field]
    public DateTime Value2 { get; set; }
  }


  public static class <#=GetClassName()#>Data
  {
    public static void PopulateData() 
    {
      <#PopulateData();#>
    }
  }
<#
};


Action<Action> WriteModels = action => {
    foreach(var schema in new []{ "ClassTable", "SingleTable", "ConcreteTable"}) {
            rootAttr = "[HierarchyRoot(InheritanceSchema." + schema + ")]";
            GetClassName = () =>  schema;
            action();
        
        WriteLine("");
    }
};
#>
namespace Xtensive.Orm.Tests.Linq.OfTypeTranslation
{
  namespace Models
  {
    <#WriteModels(TestModels);#>
  }
}