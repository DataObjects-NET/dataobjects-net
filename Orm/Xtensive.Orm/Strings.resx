<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema

    Version 1.3

    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
      [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
      [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>

    There are any number of "resheader" rows that contain simple 
    name/value pairs.

    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.

    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
      : System.Serialization.Formatters.Binary.BinaryFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
      : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
      : using a System.ComponentModel.TypeConverter
      : and then encoded with base64 encoding.
  -->
  
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExArgumentValueMustBeGreaterThanOrEqualToZero" xml:space="preserve">
    <value>Argument value must be greater than or equal to zero.</value>
  </data>
  <data name="ExArgumentValueMustBeGreaterThanZero" xml:space="preserve">
    <value>Argument value must be greater than zero.</value>
  </data>
  <data name="ExCollectionAlreadyContainsItemWithSpecifiedKey" xml:space="preserve">
    <value>Collection already contains item with the specified key.</value>
  </data>
  <data name="ExCollectionHasBeenChanged" xml:space="preserve">
    <value>Collection has been changed during the enumeration.</value>
  </data>
  <data name="ExCollectionIsEmpty" xml:space="preserve">
    <value>Collection is empty.</value>
  </data>
  <data name="ExCollectionIsReadOnly" xml:space="preserve">
    <value>Collection is read-only.</value>
  </data>
  <data name="ExDependencyOperationIsAlreadyRegistered" xml:space="preserve">
    <value>Dependency operation with full name "{0}" is already registered.</value>
  </data>
  <data name="ExDescriptorIsInInvalidState" xml:space="preserve">
    <value>Descriptor is in invalid state.</value>
  </data>
  <data name="ExDestionationArrayIsTooSmall" xml:space="preserve">
    <value>Destionation array is too small.</value>
  </data>
  <data name="ExGivenKeyNotPresent" xml:space="preserve">
    <value>The given key was not present in the dictionary.</value>
  </data>
  <data name="ExIncompatibleArrayType" xml:space="preserve">
    <value>Incompatible array type.</value>
  </data>
  <data name="ExInconsistentComparisons" xml:space="preserve">
    <value>The two collections cannot be combined because they use different comparison operations.</value>
  </data>
  <data name="ExIndexShouldBeInNMRange" xml:space="preserve">
    <value>Index should be in [{0}...{1}] range.</value>
  </data>
  <data name="ExInstanceIsLocked" xml:space="preserve">
    <value>Instance is locked.</value>
  </data>
  <data name="ExInvalidCapacity" xml:space="preserve">
    <value>The specified capacity value is less than collection count.</value>
  </data>
  <data name="ExItemCantBeCachedIncompatibleType" xml:space="preserve">
    <value>The specified item cannot be cached because its type is incompatible with underlying storage format.</value>
  </data>
  <data name="ExItemIsInUse" xml:space="preserve">
    <value>Specified item is already in use.</value>
  </data>
  <data name="ExItemIsNotInUse" xml:space="preserve">
    <value>Specified item is not in use.</value>
  </data>
  <data name="ExItemIsNotPooled" xml:space="preserve">
    <value>Specified item isn't pooled.</value>
  </data>
  <data name="ExItemNotFound" xml:space="preserve">
    <value>Specified item isn't found.</value>
  </data>
  <data name="ExLinkedOperationMissingFormat" xml:space="preserve">
    <value>Linked operation for property {0} missing.</value>
  </data>
  <data name="ExMaxItemCountIsN" xml:space="preserve">
    <value>Maximal item count is {0}.</value>
  </data>
  <data name="ExNoAvailableItems" xml:space="preserve">
    <value>There are no more available items.</value>
  </data>
  <data name="ExNoObjectWithSpecifiedKey" xml:space="preserve">
    <value>There is no object with specified key.</value>
  </data>
  <data name="ExOperationLinkTypeUndefined" xml:space="preserve">
    <value>Operation LinkType should be defined before it can be registered in OperationDictionary.</value>
  </data>
  <data name="ExOperationMustBeLocked" xml:space="preserve">
    <value>Operation must be locked before it can be registered in OperationDictionary.</value>
  </data>
  <data name="ExOperationPropertyNameUndefined" xml:space="preserve">
    <value>Operation PropertyName must be specified before it can be registered in OperationDictionary.</value>
  </data>
  <data name="ExPoolMustBeSyncronized" xml:space="preserve">
    <value>Pool should be in syncronized mode to utilize AutoCleanup feature.</value>
  </data>
  <data name="ExPoolWrongKey" xml:space="preserve">
    <value>Item already exists in the pool with another key.</value>
  </data>
  <data name="ExPortOutOfRange" xml:space="preserve">
    <value>Port value must be in [0,65535] range.</value>
  </data>
  <data name="ExInvalidUrl" xml:space="preserve">
    <value>"{0}" is invalid URL.</value>
  </data>
  <data name="ExArrayDoesNotHaveZeroBasedIndexing" xml:space="preserve">
    <value>Array does not have zero-based indexing.</value>
  </data>
  <data name="ExWrongSourceCollectionElementType" xml:space="preserve">
    <value>Source collection contains at least one item of type "{0}", that cannot be cast to the item type of the destination collection.</value>
  </data>
  <data name="ExInstanceMustHaveSyncRoot" xml:space="preserve">
    <value>A instance must have non-null IHasSyncRoot.SyncRoot property value.</value>
  </data>
  <data name="ExCouldNotLoadTypesFromAssembly" xml:space="preserve">
    <value>Could not load types from the assembly '{0}'.</value>
  </data>
  <data name="ExItemCantBeComparedIncompatibleType" xml:space="preserve">
    <value>The specified item cannot be cached because its type is incompatible with ITuple.</value>
  </data>
  <data name="ExArgumentCannotBeEmptyString" xml:space="preserve">
    <value>Argument can't be an empty string.</value>
  </data>
  <data name="ExArrayIsMultidimensional" xml:space="preserve">
    <value>Array is multidimentional.</value>
  </data>
  <data name="ExCollectionAlreadyContainsSpecifiedItem" xml:space="preserve">
    <value>Collecton already contains specified item.</value>
  </data>
  <data name="ExSpecifiedCapacityIsLessThenCollectionCount" xml:space="preserve">
    <value>The specified capacity value is less than collection count.</value>
  </data>
  <data name="ExIndexOutOfRange" xml:space="preserve">
    <value>Index is out of range.</value>
  </data>
  <data name="ExInvalidArgumentType" xml:space="preserve">
    <value>Invalid argument type: expected type is {0}.</value>
  </data>
  <data name="ExSystemTimeChanged" xml:space="preserve">
    <value>System date \ time has been changed.</value>
  </data>
  <data name="ExMeasurementIsAlreadyCompleted" xml:space="preserve">
    <value>Measurement is already completed.</value>
  </data>
  <data name="ExInternalError" xml:space="preserve">
    <value>Internal error: {0}</value>
  </data>
  <data name="ExItemWithTheSameKeyHasBeenAdded" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
  </data>
  <data name="ExArgumentShouldBeInRange" xml:space="preserve">
    <value>Argument should be in range [{0}...{1}].</value>
  </data>
  <data name="ExPropertyDoesNotHaveGetter" xml:space="preserve">
    <value>Property '{0}' of type '{1}' does not have public get accessor.</value>
  </data>
  <data name="ExPropertyDoesNotHaveSetter" xml:space="preserve">
    <value>Property '{0}' of type '{1}' does not have public set accessor.</value>
  </data>
  <data name="ExMemberIsNotPublicPropertyOrField" xml:space="preserve">
    <value>Member: '{0}' is not a Public Property or Field of Type: '{1}'</value>
  </data>
  <data name="ExDeserializationStreamLengthIncorrect" xml:space="preserve">
    <value>Stream length not enough to deserialize object of specified type.</value>
  </data>
  <data name="ExTypeIsNotSupportedByBinaryPrimitiveSerializer" xml:space="preserve">
    <value>Type is not supported by BinaryPrimitiveSerializer.</value>
  </data>
  <data name="ExObjectIsReadOnly" xml:space="preserve">
    <value>Object is read-only.</value>
  </data>
  <data name="ExAlreadyInitialized" xml:space="preserve">
    <value>Instance is already initialized.</value>
  </data>
  <data name="ExPropertyIsAlreadyInitialized" xml:space="preserve">
    <value>Property '{0}' is already initialized.</value>
  </data>
  <data name="ExInvalidActiveScope" xml:space="preserve">
    <value>Active scope is invalid - it differs from the expected one. Probably you have forgot to dispose some nested scope.</value>
  </data>
  <data name="ExScopeCantBeDisposed" xml:space="preserve">
    <value>Scope can't be disposed. Most likely it is bound to a different thread.</value>
  </data>
  <data name="ExContextRequired" xml:space="preserve">
    <value>{0} is required. Use {1} to set it.</value>
  </data>
  <data name="ExCantFindAssociate" xml:space="preserve">
    <value>Can't find associated {0} of type '{1}' for type '{2}'.</value>
  </data>
  <data name="ExCopyToMustOperateWithDifferentStreams" xml:space="preserve">
    <value>Unable to copy a part of the stream to itself. Use StreamExtensions.Copy method instead.</value>
  </data>
  <data name="ExUnableToCreateProviderInstance" xml:space="preserve">
    <value>Unable to create provider instance. Check if provider's class has static "Instance" property.</value>
  </data>
  <data name="LogScopeDisposeError" xml:space="preserve">
    <value>Scope dispose error.</value>
  </data>
  <data name="ExCollectionOrCoutableExcpected" xml:space="preserve">
    <value>Item should be either an ICollection or ICountable.</value>
  </data>
  <data name="ExCantCreateAssociateForGenericTypeDefinitions" xml:space="preserve">
    <value>Can't create associates for generic type definitions (type '{0}').</value>
  </data>
  <data name="ExMultipleAssociatesMatch" xml:space="preserve">
    <value>Multiple associates match type '{0}' by its interfaces (at least '{1}' and '{2}').</value>
  </data>
  <data name="LogGenericAssociateCreationHasFailedFor" xml:space="preserve">
    <value>'{0}&lt;{1}, {2}&gt;' creation has failed for '{3}'.</value>
  </data>
  <data name="LogGenericAssociateIsUsedFor" xml:space="preserve">
    <value>'{0}&lt;{1}, {2}&gt;' was used for '{3}'.</value>
  </data>
  <data name="ExCantFindAssociate2" xml:space="preserve">
    <value>Can't find associated {0} of type '{1}' for type '{2}' or '{3}'.</value>
  </data>
  <data name="ExCantPassNoInfinityToThisConstructor" xml:space="preserve">
    <value>InfinityType.None can't be passed to this constructor.</value>
  </data>
  <data name="ExValueIsNotAvailable" xml:space="preserve">
    <value>Value is not available.</value>
  </data>
  <data name="Infinity" xml:space="preserve">
    <value>inf</value>
  </data>
  <data name="ReversedFormat" xml:space="preserve">
    <value>Reversed({0})</value>
  </data>
  <data name="ExInadmissibleTypeConversion" xml:space="preserve">
    <value>Conversion from type {0} to type {1} is inadmissible.</value>
  </data>
  <data name="LogCantFindAssociateFor" xml:space="preserve">
    <value>Can't find {0} ('{1}') for type '{2}'.</value>
  </data>
  <data name="ExMinMaxValuesAreNotSupportedForTupleFieldAdvancedComparer" xml:space="preserve">
    <value>MinMaxValues aren't supported for TupleFieldAdvancedComparer.</value>
  </data>
  <data name="ExSpecifiedTypeShouldBeGeneratedTupleDescriptorOrItsDescendant" xml:space="preserve">
    <value>Specified type should be either GeneratedTupleDescriptor or its descendant.</value>
  </data>
  <data name="ExTypeXMustBeReferenceType" xml:space="preserve">
    <value>Type '{0}' must be reference type.</value>
  </data>
  <data name="ExTypeXMustImplementY" xml:space="preserve">
    <value>Type '{0}' must implement '{1}', or must be its descendant.</value>
  </data>
  <data name="ExFieldIsInfinite" xml:space="preserve">
    <value>Field with index '{0}' is infinitу.</value>
  </data>
  <data name="ExCultureOfAppliedRuleShouldBeEitherNullOrTheSameAsOnTarget" xml:space="preserve">
    <value>Culture of the applied rule should either be undefined (null), or be the same as on target rule.</value>
  </data>
  <data name="InfinitesimalFormat" xml:space="preserve">
    <value>{0}{1}d</value>
  </data>
  <data name="ExGenericParameterShouldBeOfTypeT" xml:space="preserve">
    <value>Generic parameter '{0}' should be of type '{1}'.</value>
  </data>
  <data name="ExMergeOperationRequireIntersectionOfOperands" xml:space="preserve">
    <value>Merge operation require intersection of operands.</value>
  </data>
  <data name="ExEndPointOrderMustBeEqual" xml:space="preserve">
    <value>EndPoints order of both ranges must be equal.</value>
  </data>
  <data name="ExRangeIsEmpty" xml:space="preserve">
    <value>Range is empty.</value>
  </data>
  <data name="ExValueXIsNotAllowedHere" xml:space="preserve">
    <value>'{0}' is not allowed or invalid here.</value>
  </data>
  <data name="ExItemWithNameWasNotFound" xml:space="preserve">
    <value>Item with name '{0}' was not found.</value>
  </data>
  <data name="ExEnumerationIsAlreadyFinished" xml:space="preserve">
    <value>Enumeration is already finished.</value>
  </data>
  <data name="ExInvalidCast" xml:space="preserve">
    <value>Cast from '{0}' to '{1}' is invalid.</value>
  </data>
  <data name="ExBothMeasurementsHaveNoValue" xml:space="preserve">
    <value>Both measurements have no value.</value>
  </data>
  <data name="ExMeasurementMustHaveValue" xml:space="preserve">
    <value>Measurement '{0}' must have value.</value>
  </data>
  <data name="AnyCulture" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="ComparisonRuleFormat" xml:space="preserve">
    <value>ComparisonRule({0}, {1})</value>
  </data>
  <data name="ComparisonRulesFormat" xml:space="preserve">
    <value>ComparisonRules({0}, [{1}])</value>
  </data>
  <data name="BoxFormat" xml:space="preserve">
    <value>Box({0})</value>
  </data>
  <data name="EntireFormat" xml:space="preserve">
    <value>Entire({0})</value>
  </data>
  <data name="PairFormat" xml:space="preserve">
    <value>({0}, {1})</value>
  </data>
  <data name="TripletFormat" xml:space="preserve">
    <value>({0}, {1}, {2})</value>
  </data>
  <data name="TupleFormat" xml:space="preserve">
    <value>({0})</value>
  </data>
  <data name="Null" xml:space="preserve">
    <value>null</value>
  </data>
  <data name="Recursive" xml:space="preserve">
    <value>recursive</value>
  </data>
  <data name="ExRecursiveAssociateLookupDetected" xml:space="preserve">
    <value>Recursive associate lookup is detected.</value>
  </data>
  <data name="ExNotInitialized" xml:space="preserve">
    <value>Instance is not initialized (or not initialized properly).</value>
  </data>
  <data name="ExPropertyIsNotInitialized" xml:space="preserve">
    <value>Property '{0}' is not initialized (or not initialized properly).</value>
  </data>
  <data name="ExDifferentTupleDescriptors" xml:space="preserve">
    <value>Different TupleDescriptors are not valid here: {0} and {1}.</value>
  </data>
  <data name="LogRegionBegin" xml:space="preserve">
    <value>{0}: started.</value>
  </data>
  <data name="LogRegionEnd" xml:space="preserve">
    <value>{0}: completed.</value>
  </data>
  <data name="LogAttemptToUseDisposedInstance" xml:space="preserve">
    <value>Attempt to use disposed instance of type '{0}'.</value>
  </data>
  <data name="LogSafeDisposeFailing" xml:space="preserve">
    <value>Safe dispose of '{0}' failing.</value>
  </data>
  <data name="ExInvalidTupleDescriptorExpectedDescriptorIs" xml:space="preserve">
    <value>Invalid TupleDescriptor. Expected descriptor is {0}.</value>
  </data>
  <data name="TransformedTupleFormat" xml:space="preserve">
    <value>{0}: {1} of ({2})</value>
  </data>
  <data name="TupleTransformFormat" xml:space="preserve">
    <value>{0}({1})</value>
  </data>
  <data name="ExTheNumberOfSourcesIsTooSmallExpected" xml:space="preserve">
    <value>The number of sources is too small. Expected number is {0}.</value>
  </data>
  <data name="TupleDescriptorFormat" xml:space="preserve">
    <value>TupleDescriptor({0})</value>
  </data>
  <data name="SegmentFormat" xml:space="preserve">
    <value>[{0} ... {1}]</value>
  </data>
  <data name="ReadOnly" xml:space="preserve">
    <value>read-only</value>
  </data>
  <data name="ReadOnlyShort" xml:space="preserve">
    <value>r/o</value>
  </data>
  <data name="ReadWrite" xml:space="preserve">
    <value>read-write</value>
  </data>
  <data name="ReadWriteShort" xml:space="preserve">
    <value>r/w</value>
  </data>
  <data name="ExMultipleAttributesOfTypeXAreNotAllowedHere" xml:space="preserve">
    <value>{0}: multiple attributes of type '{1}' are not allowed here.</value>
  </data>
  <data name="HasVersionFormat" xml:space="preserve">
    <value>{0} (v{1})</value>
  </data>
  <data name="LogException" xml:space="preserve">
    <value>Exception!</value>
  </data>
  <data name="ExUseLogCaptureScopeConstructorInstead" xml:space="preserve">
    <value>Use LogCaptureScope constructor instead.</value>
  </data>
  <data name="LogUnableToGetDefaultHasherForTypeXxx" xml:space="preserve">
    <value>Unable to get default hasher for type {0}</value>
  </data>
  <data name="OriginalExceptions" xml:space="preserve">
    <value>Original exception(s)</value>
  </data>
  <data name="ExASetOfExceptionsIsCaught" xml:space="preserve">
    <value>A set of exceptions is caught.</value>
  </data>
  <data name="ExServiceNotFound" xml:space="preserve">
    <value>Service '{0}' is not found.</value>
  </data>
  <data name="CachedFormat" xml:space="preserve">
    <value>Cached({0})</value>
  </data>
  <data name="ThreadSafeCachedFormat" xml:space="preserve">
    <value>ThreadSafeCached({0})</value>
  </data>
  <data name="ExValueForParameterXIsNotSet" xml:space="preserve">
    <value>Value for parameter '{0}' is not set.</value>
  </data>
  <data name="ExAlreadyDisposed" xml:space="preserve">
    <value>Object is already disposed.</value>
  </data>
  <data name="ExInvalidRecordType" xml:space="preserve">
    <value>Record with invalid (possibly - unspecified) type is found.</value>
  </data>
  <data name="ExInvalidSerializerType" xml:space="preserve">
    <value>Generic parameter T is resolved to associated '{0}', although '{1}' is expected.</value>
  </data>
  <data name="ExInvalidFormatterProcessType" xml:space="preserve">
    <value>'{0}' formatter process type is invalid for the current operation.</value>
  </data>
  <data name="ExReferenceIsAlreadyDefined" xml:space="preserve">
    <value>Reference '{0}' is already defined.</value>
  </data>
  <data name="ExReferenceIsNotResolvedYet" xml:space="preserve">
    <value>Reference '{0}' is not resolved yet.</value>
  </data>
  <data name="ExReferenceIsNull" xml:space="preserve">
    <value>Reference points to null.</value>
  </data>
  <data name="ReferenceFormat" xml:space="preserve">
    <value>#({0})</value>
  </data>
  <data name="ExInvalidFieldMapSizeExpectedX" xml:space="preserve">
    <value>Invalid field map size. Expected {0}.</value>
  </data>
  <data name="EmptyString" xml:space="preserve">
    <value>''</value>
  </data>
  <data name="ExDeserializationErrorUnrecognizedSlotsAreFound" xml:space="preserve">
    <value>Deserialization error: some SerializationData slots were not recognized, thus the format of the serialized data differs from the supported one.</value>
  </data>
  <data name="ExInvalidSerializerBehaviorMustNotBeReferable" xml:space="preserve">
    <value>'{0}' can't be an IsReferable serializer, since it serializes IReference type.</value>
  </data>
  <data name="UnableToDisposeItemWhenContainerIsNotDisposed" xml:space="preserve">
    <value>Unable to dispose an item when disposable container has an invalid state.</value>
  </data>
  <data name="ExValueWithNameXAlreadyExists" xml:space="preserve">
    <value>Value with name '{0}' already exists.</value>
  </data>
  <data name="ExValueWithNameXIsNotFound" xml:space="preserve">
    <value>Value with name '{0}' is not found.</value>
  </data>
  <data name="SerializationDataFormat" xml:space="preserve">
    <value>Type='{0}', #='{1}' ({2})</value>
  </data>
  <data name="ExInvalidObjectSerializerSimilarValueSerializerExists" xml:space="preserve">
    <value>Object serializer is invalid, since similar value serializer exists.</value>
  </data>
  <data name="ExStringDoesNotCorrespondToDescriptor" xml:space="preserve">
    <value>String does not correspond to the specified descriptor.</value>
  </data>
  <data name="ExUnknownExpressionType" xml:space="preserve">
    <value>Unknown expression type: '{0} ({1})'</value>
  </data>
  <data name="ExEscapeCharacterMustDifferFromDelimiterCharacter" xml:space="preserve">
    <value>Escape character must differ from delimiter character.</value>
  </data>
  <data name="ExExpressionMustReturnValueOfTypeX" xml:space="preserve">
    <value>The expression must return a value of type '{0}'.</value>
  </data>
  <data name="ExArgumentMustnotBeOfTypeX" xml:space="preserve">
    <value>The argument must not be of type '{0}'.</value>
  </data>
  <data name="ExExpressionHavingEqualNormalFormMustBeRoot" xml:space="preserve">
    <value>The expression having the equal normal form must be a root expression.</value>
  </data>
  <data name="ExExpressionHavingDifferentNormalFormMustNotBeRoot" xml:space="preserve">
    <value>The expression having the different normal form must not be a root expression.</value>
  </data>
  <data name="ExOnlyNormalizedExpressionCanBeAddedAsChildToRoot" xml:space="preserve">
    <value>Only the normalized expression having the different normal form can be added as the immediate descendant to the root expression.</value>
  </data>
  <data name="ExActualConjunctionOperandCountGreaterThanExpected" xml:space="preserve">
    <value>Actual conjunction operand count greater than MaxConjunctionOperandCount.</value>
  </data>
  <data name="ExCannotParseCallToComparisonMethod" xml:space="preserve">
    <value>Can't parse the call to the comparison method.</value>
  </data>
  <data name="ExSomeOperandsAreNotExpressionsOfTypeBoolean" xml:space="preserve">
    <value>Some operands are not Expressions  of type 'System.Boolean'.</value>
  </data>
  <data name="ExExpectedValueOfParameterIsAlreadySet" xml:space="preserve">
    <value>The expected value of the parameter is already set.</value>
  </data>
  <data name="ExThisOperationIsNotAllowedForParameterContextOperatingWithExpectedValuesOfParameters" xml:space="preserve">
    <value>This operation is not allowed for the parameter context operating with expected values of parameters.</value>
  </data>
  <data name="ExScopeRequired" xml:space="preserve">
    <value>{0} is required.</value>
  </data>
  <data name="ExOnlyOneAncestorOfEachInstanceOfThisGenericTypeIsAllowed" xml:space="preserve">
    <value>Only one ancestor of each instance of this generic type is allowed.</value>
  </data>
  <data name="ExLambdaParameterXIsOutOfScope" xml:space="preserve">
    <value>Lambda parameter '{0}' is out of scope.</value>
  </data>
  <data name="ExArgumentXIsLessThanArgumentY" xml:space="preserve">
    <value>The argument '{0}' is less than the argument '{1}'.</value>
  </data>
  <data name="ExArgumentMustBeGreaterThanX" xml:space="preserve">
    <value>Argument must be greater than '{0}'</value>
  </data>
  <data name="ExArgumentMustBeLessThanX" xml:space="preserve">
    <value>Argument must be less than '{0}'</value>
  </data>
  <data name="ExKeyAlreadyExists" xml:space="preserve">
    <value>Key already exists.</value>
  </data>
  <data name="ExTypeXMustBeNonAbstractType" xml:space="preserve">
    <value>Type '{0}' must be non-abstract type.</value>
  </data>
  <data name="ExExceptionWasThrownDuringTaskExecution" xml:space="preserve">
    <value>The exception was thrown during the task's execution.</value>
  </data>
  <data name="ExUnableToCastNullValueToXUseXInstead" xml:space="preserve">
    <value>Unable to cast null value to {0}; use {0}? instead.</value>
  </data>
  <data name="ComprehensiveLogFormat" xml:space="preserve">
    <value>{0,6:F2}s @{1,-5} {2,5} {3,-24} {4}{5}</value>
  </data>
  <data name="ReleaseLogFormat">
    <value xml:space="preserve">{6:s} @{1,-5} {2,5} {3,-24} {4}{5}</value>
  </data>
  <data name="SimpleLogFormat" xml:space="preserve">
    <value>{3}: {5}</value>
  </data>
  <data name="ExUnableToBindParametersToLambdaXParametersCountIsIncorrect" xml:space="preserve">
    <value>Unable to bind parameters to lambda {0}. Parameters count is incorrect.</value>
  </data>
  <data name="ExUnableToUseExpressionXAsXParameterOfLambdaXBecauseOfTypeMistmatch" xml:space="preserve">
    <value>Unable to use expression {0} as {1} parameter of lambda {2} because of type mistmatch.</value>
  </data>
  <data name="ExTypeXDoesNotHavePropertyY" xml:space="preserve">
    <value>Type '{0}' does not have property '{1}'.</value>
  </data>
  <data name="ExResourcePropertyXIsNotOfStringType" xml:space="preserve">
    <value>Resource property {0} is not of string type.</value>
  </data>
  <data name="ExTypeXHasAlreadyBeenRegistered" xml:space="preserve">
    <value>The type {0} has already been registered.</value>
  </data>
  <data name="ExMappingForPropertyXHasAlreadyBeenRegistered" xml:space="preserve">
    <value>The mapping for the property {0} has already been registered.</value>
  </data>
  <data name="ExTypeXHasNotBeenRegistered" xml:space="preserve">
    <value>The type {0} hasn't been registered.</value>
  </data>
  <data name="ExSpecifiedExpressionIsNotMemberExpression" xml:space="preserve">
    <value>The specified expression is not a MemberExpression.</value>
  </data>
  <data name="ExAccessedMemberIsNotProperty" xml:space="preserve">
    <value>The accessed member is not a property.</value>
  </data>
  <data name="ExSpecifiedExpressionCanNotBeParsed" xml:space="preserve">
    <value>The specified expression can't be parsed.</value>
  </data>
  <data name="ExKeyXIsNotFound" xml:space="preserve">
    <value>Key {0} is not found.</value>
  </data>
  <data name="ExCollectionHasBeenModified" xml:space="preserve">
    <value>Collection has been modified.</value>
  </data>
  <data name="ExPropertiesXAndYHaveIncompatibleTypes" xml:space="preserve">
    <value>The properties "{0}" and "{1}" have incompatible types.</value>
  </data>
  <data name="ExReferencePropertyXIsBoundToPropertyYThatIsNotReference" xml:space="preserve">
    <value>The reference property {0} is bound to the property {1} that isn't reference.</value>
  </data>
  <data name="ExCollectionPropertyXIsBoundToPropertyYThatIsNotCollection" xml:space="preserve">
    <value>The collection property {0} is bound to the property {1} that isn't collection.</value>
  </data>
  <data name="ExPrimitivePropertyXIsBoundToPropertyYThatIsNotPrimitive" xml:space="preserve">
    <value>The primitive property {0} is bound to the property {1} that isn't primitive.</value>
  </data>
  <data name="ExTypeXIsNotSubclassOfTypeY" xml:space="preserve">
    <value>The type {0} isn't a subclass of the type {1}.</value>
  </data>
  <data name="ExLimitOfGraphDepthIsExceeded" xml:space="preserve">
    <value>The limit of the graph depth is exceeded.</value>
  </data>
  <data name="ExNestedCollectionIsNotSupported" xml:space="preserve">
    <value>Nested collection is not supported.</value>
  </data>
  <data name="ExDetectionOfChangesInUserStructureCollectionIsNotSupported" xml:space="preserve">
    <value>The detection of changes in user structure collection isn't supported.</value>
  </data>
  <data name="ExTypeXCanNotBeTransformed" xml:space="preserve">
    <value>The type {0} can't be transformed.</value>
  </data>
  <data name="XInY" xml:space="preserve">
    <value>{0} in {1}</value>
  </data>
  <data name="ExCannotActivateServiceXErrorY" xml:space="preserve">
    <value>Can't activate service '{0}'. Error: {1}</value>
  </data>
  <data name="ExCannotActivateServiceXWithKeyYErrorZ" xml:space="preserve">
    <value>Can't activate service '{0}' with name "{1}". Error: {2}</value>
  </data>
  <data name="ExMultipleServicesMatchToTheSpecifiedArguments" xml:space="preserve">
    <value>Multiple services match to the specified arguments.</value>
  </data>
  <data name="ExServiceOfTypeXIsNotAvailable" xml:space="preserve">
    <value>Service of type '{0}' is not available.</value>
  </data>
  <data name="ExServiceWithNameXOfTypeYIsNotAvailable" xml:space="preserve">
    <value>Service with name "{0}" of type '{1}' is not available.</value>
  </data>
  <data name="ExContainerTypeMustImplementX" xml:space="preserve">
    <value>Container type must implement {0}.</value>
  </data>
  <data name="ExContainerTypeDoesNotProvideASuitableConstructor" xml:space="preserve">
    <value>Container type does not provide a suitable constructor.</value>
  </data>
  <data name="ExRecursiveConstructorParemeterDependencyIsDetected" xml:space="preserve">
    <value>Recursive constructor paremeter dependency is detected.</value>
  </data>
  <data name="ExXIsNeitherClassNorValueType" xml:space="preserve">
    <value>The {0} is neither class nor value type.</value>
  </data>
  <data name="ExArgumentMustBeGreaterThatOrEqualX" xml:space="preserve">
    <value>Argument must be greater that or equal '{0}'</value>
  </data>
  <data name="ExArgumentMustBeLessThanOrEqualX" xml:space="preserve">
    <value>Argument must be less than or equal '{0}'</value>
  </data>
  <data name="ExUseLogIndentScopeConstructorInstead" xml:space="preserve">
    <value>Use LogIndentScope constructor instead.</value>
  </data>
  <data name="ExOnlyBreakableNodesSadSmile" xml:space="preserve">
    <value>Only breakable nodes :(</value>
  </data>
  <data name="ExSegmentIsOutOfRange" xml:space="preserve">
    <value>Segment is out of range.</value>
  </data>
  <data name="ExNullablePropertyXIsBoundToPropertyYThatIsNotNullable" xml:space="preserve">
    <value>The nullable property {0} is bound to the property {1} that isn't nullable.</value>
  </data>
  <data name="ExPropertiesXAndYHaveDifferentPrimitiveTypes" xml:space="preserve">
    <value>The properties {0} and {1} have different primitive types.</value>
  </data>
  <data name="ExInvalidParentValue" xml:space="preserve">
    <value>Invalid Parent value.</value>
  </data>
  <data name="ExItemWithNameXAlreadyExists" xml:space="preserve">
    <value>Item with name '{0}' already exists.</value>
  </data>
  <data name="ExItemWithNameXIsNotFound" xml:space="preserve">
    <value>Item with Name '{0}' is not found.</value>
  </data>
  <data name="ExModelObjectCannotBeRemoved" xml:space="preserve">
    <value>Model object cannot be removed.</value>
  </data>
  <data name="ExTypeOfXPropertyMustBeY" xml:space="preserve">
    <value>Type of {0} property must be {1}.</value>
  </data>
  <data name="ExInvalidNodeState" xml:space="preserve">
    <value>Invalid node state.</value>
  </data>
  <data name="ExBindingFailedForX" xml:space="preserve">
    <value>Binding has failed for {0}. Check property declaration.</value>
  </data>
  <data name="ExNoNesting" xml:space="preserve">
    <value>Nesting must be created for any node.</value>
  </data>
  <data name="NodeInfoFormat" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="ExTargetObjectExistsX" xml:space="preserve">
    <value>Target object already exists: "{0}". To assign a new one, you must remove the old one first.</value>
  </data>
  <data name="ExCannotFindConstructorToExecuteX" xml:space="preserve">
    <value>Can't find a constructor to execute {0}.</value>
  </data>
  <data name="ExPathXNotFound" xml:space="preserve">
    <value>Node with path "{0}" is not found.</value>
  </data>
  <data name="ExItemAlreadyExists" xml:space="preserve">
    <value>Item already exists.</value>
  </data>
  <data name="ExMultipleHintsFound" xml:space="preserve">
    <value>Multiple hints found.</value>
  </data>
  <data name="DifferenceFormat" xml:space="preserve">
    <value>"{1}" != "{2}" ({0}): {3}</value>
  </data>
  <data name="PropertyChangeFormat" xml:space="preserve">
    <value>+{0}: {1}</value>
  </data>
  <data name="ItemChangeFormat" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ItemChangeCountFormat" xml:space="preserve">
    <value>{0} change(s)</value>
  </data>
  <data name="ExBothSourceAndTargetAreNull" xml:space="preserve">
    <value>Both Source and Target are null.</value>
  </data>
  <data name="DifferencePropertyNamePrefix" xml:space="preserve">
    <value>+{0}: </value>
  </data>
  <data name="ExPropertyValueMustBelongToTheSameModel" xml:space="preserve">
    <value>Property value must belong to the same Model.</value>
  </data>
  <data name="ExLoopInActionDependencyChain" xml:space="preserve">
    <value>Loop in action dependency chain is detected.</value>
  </data>
  <data name="ExNoCurrentComparer" xml:space="preserve">
    <value>Comparer.Current is null.</value>
  </data>
  <data name="ExInvalidContextDeactivationSequence" xml:space="preserve">
    <value>Invalid context deactivation sequence.</value>
  </data>
  <data name="ExInvalidContextActivationSequence" xml:space="preserve">
    <value>Invalid context activation sequence.</value>
  </data>
  <data name="ExInvalidAfterPathPropertyValue" xml:space="preserve">
    <value>Invalid AfterPath property value.</value>
  </data>
  <data name="ExInvalidNestingOfNodeX" xml:space="preserve">
    <value>Invalid Nesting of node "{0}".</value>
  </data>
  <data name="ExNoCurrentUpgrader" xml:space="preserve">
    <value>Upgarder.Current is null.</value>
  </data>
  <data name="LogAutomaticUpgradeSequenceValidation" xml:space="preserve">
    <value>Automatic upgrade sequence validation</value>
  </data>
  <data name="LogValidationFailed" xml:space="preserve">
    <value>Validation failed.</value>
  </data>
  <data name="Difference" xml:space="preserve">
    <value>Difference</value>
  </data>
  <data name="LogItemFormat" xml:space="preserve">
    <value>{0}:</value>
  </data>
  <data name="ExpectedTargetModel" xml:space="preserve">
    <value>Expected target model</value>
  </data>
  <data name="ActualTargetModel" xml:space="preserve">
    <value>Actual target model</value>
  </data>
  <data name="ExUpgradeSequenceValidationFailure" xml:space="preserve">
    <value>Upgrade sequence validation failure.</value>
  </data>
  <data name="ExNodeXMustBeProcessedBeforeBeingComparedAsReferenceValueOfYZ" xml:space="preserve">
    <value>Node "{0}" must be processed before being compared as reference (value of "{1}".{2}).</value>
  </data>
  <data name="UpgradeSequence" xml:space="preserve">
    <value>Upgrade sequence</value>
  </data>
  <data name="ExDifferenceRelatedToXTypeIsNotFoundOnTheUpgradeContextStack" xml:space="preserve">
    <value>Difference related to {0} type is not found on the UpgradeContext stack.</value>
  </data>
  <data name="ExPropertyXYIsNotFound" xml:space="preserve">
    <value>Property "{0}.{1}" is not found.</value>
  </data>
  <data name="ExInvalidTransactionState" xml:space="preserve">
    <value>Invalid transaction state ('{0}'). Expected state(s) is (are) '{1}'.</value>
  </data>
  <data name="ExTransactionIsAlreadyActivated" xml:space="preserve">
    <value>Transaction is already activated.</value>
  </data>
  <data name="ExTransactionScopeIsCompletedCanNotBeSetToFalse" xml:space="preserve">
    <value>TransactionScope.IsCompleted can not be set to 'false'.</value>
  </data>
  <data name="ExScopeBoundTransactionCanBeCommittedOnlyByItsScope" xml:space="preserve">
    <value>Scope-bound transaction can be committed only by its scope. Use TransactionScopeBase.Complete() \  Dispose() methods of  appropriate TransactionScopeBase descendant instance to do this.</value>
  </data>
  <data name="ExExpression0MustReferenceField">
    <value><![CDATA[Expression '{0}' must reference field.]]></value>
  </data>
  <data name="ExExpression0MustReferenceProperty">
    <value><![CDATA[Expression '{0}' must reference property.]]></value>
  </data>
  <data name="ExSpecialCharacterXUsedAsEscapeCharacter">
    <value xml:space="preserve">Special character {0} used as escape character.</value>
  </data>
  <data name="ExControlCharacterUsedAsEscapeCharacter">
    <value xml:space="preserve">Control character used as escape character</value>
  </data>
  <data name="ExComparerForTypeIsNotAvailable" xml:space="preserve">
    <value>Comparer for type '{0}' is not available.</value>
  </data>
  <data name="TypeXIsNotRegistered" xml:space="preserve">
    <value>Type '{0}' is not registered.</value>
  </data>
  <data name="ExUnableToFindMasterAssociation" xml:space="preserve">
    <value>Unable to find master association of association '{0}'</value>
  </data>
  <data name="ExCouldNotResolveXYWithinDomain" xml:space="preserve">
    <value>Could not resolve {0} '{1}' within the domain.</value>
  </data>
  <data name="ExTypeIdXIsNotRegistered" xml:space="preserve">
    <value>Type with TypeId={0} is not registered.</value>
  </data>
  <data name="TypeIdForTypeXIsAlreadyAssigned" xml:space="preserve">
    <value>TypeId for type {0} is already assigned.</value>
  </data>
  <data name="ExItemWithKeyXWasNotFound" xml:space="preserve">
    <value>Item with key '{0}' was not found.</value>
  </data>
  <data name="ExItemWithNameXAlreadyExistsInY" xml:space="preserve">
    <value>Item with name '{0}' already exists in '{1}'.</value>
  </data>
  <data name="ExTypeIdIsNotAssignedForTypeX" xml:space="preserve">
    <value>TypeId is not assigned for type '{0}'.</value>
  </data>
  <data name="NodeFormat" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="UnnamedNodeDisplayName" xml:space="preserve">
    <value>&lt;Unnamed&gt;</value>
  </data>
  <data name="ExKeyContainsMultipleFieldsWithIsTypeIdTrueFlag" xml:space="preserve">
    <value>Key contains multiple fields with IsTypeId==true flag.</value>
  </data>
  <data name="ExCanNotExtractForeignKey" xml:space="preserve">
    <value>Can't extract foreign key.</value>
  </data>
  <data name="ExTypeDiscriminatorFieldIsAlreadySet" xml:space="preserve">
    <value>TypeDiscriminator field is already set.</value>
  </data>
  <data name="ExDefaultTypeIsAlreadyRegistered" xml:space="preserve">
    <value>Default type is already registered.</value>
  </data>
  <data name="ExInstanceMustBeLockedBeforeThisOperation">
    <value xml:space="preserve">Instance must be locked before this operation.</value>
  </data>
  <data name="NodeCollectionFullNameFormat">
    <value xml:space="preserve">{0}.{1}</value>
  </data>
  <data name="LogExErrorSettingDefaultValueXForColumnYInTypeZ">
    <value xml:space="preserve">Error setting default value {0} for column '{1}' in type '{2}'. Most likely, its type is incorrect.</value>
  </data>
  <data name="ExIndexIsChanged" xml:space="preserve">
    <value>Index '{0}' is changed.</value>
  </data>
  <data name="ExErrorOnInsert" xml:space="preserve">
    <value>Unable to insert instance of type '{0}' with specified key. Query affected {1} tables, but expected {2} tables.</value>
  </data>
  <data name="ExInstanceMultipleResults" xml:space="preserve">
    <value>Multiple instances of type '{0}' with specified key are found.</value>
  </data>
  <data name="ExInstanceNotFound" xml:space="preserve">
    <value>Instance of type '{0}' with specified key is not found.</value>
  </data>
  <data name="ExMultipleResults" xml:space="preserve">
    <value>Specified query returns multiple results.</value>
  </data>
  <data name="ExTypeHasNoPrimaryIndex" xml:space="preserve">
    <value>Type '{0}' has no primary index.</value>
  </data>
  <data name="ExUnableToCreateConnection" xml:space="preserve">
    <value>Unable to create the connection. Check if all needed assemblies are available.</value>
  </data>
  <data name="ExUnsupportedColumnType" xml:space="preserve">
    <value>Type '{0}' is not supported by current storage provider.</value>
  </data>
  <data name="ExUnsupportedIndex" xml:space="preserve">
    <value>Index '{0}' with attributes '{1}' is not supported.</value>
  </data>
  <data name="ExErrorOnUpdate" xml:space="preserve">
    <value>Unable to update instance of type {0} with specified key. Query affected {1} tables, but expecrted {2} tables.</value>
  </data>
  <data name="ExReaderIsNotInConsistentState" xml:space="preserve">
    <value>Reader is not in consistent state.</value>
  </data>
  <data name="ExEnumerationIsNotStarted" xml:space="preserve">
    <value>Enumeration is not started.</value>
  </data>
  <data name="ExUnableToFindColumnInPrimaryIndex" xml:space="preserve">
    <value>Unable to find column '{0}' of index '{1}' in primary index.</value>
  </data>
  <data name="ExTransactionIsAlreadyOpen" xml:space="preserve">
    <value>Transaction is already open.</value>
  </data>
  <data name="ExTransactionIsNotOpen" xml:space="preserve">
    <value>Transaction is not open.</value>
  </data>
  <data name="ExIndexXIsNotFound" xml:space="preserve">
    <value>Index '{0}' is not found.</value>
  </data>
  <data name="ExIncorrectCommandParameters" xml:space="preserve">
    <value>Incorrect command parameters.</value>
  </data>
  <data name="ExStringTrimSupportedOnlyWithConstants" xml:space="preserve">
    <value>String.Trim(char[]), String.TrimStart(char[]), string.TrimEnd(char[]) supported only with argument being array of constants.</value>
  </data>
  <data name="ExSequenceXIsNotFoundInStorage" xml:space="preserve">
    <value>Sequence '{0}' is not found in storage.</value>
  </data>
  <data name="SqlErrorOccured" xml:space="preserve">
    <value>SQL error occured.</value>
  </data>
  <data name="StorageErrorDetailsX" xml:space="preserve">
    <value>Storage error details '{0}'</value>
  </data>
  <data name="SqlErrorDetailsX" xml:space="preserve">
    <value>SQL error details '{0}'</value>
  </data>
  <data name="OriginalMessageX" xml:space="preserve">
    <value>Original message '{0}'</value>
  </data>
  <data name="QueryX" xml:space="preserve">
    <value>Query '{0}'</value>
  </data>
  <data name="ExRowNumberWindowFunctionIsNotSupportedOnThisVersionOfPostgreSql" xml:space="preserve">
    <value>ROW_NUMBER window function is not supported on this version of PostgreSQL</value>
  </data>
  <data name="LogSessionXSchemaUpgradeScriptY" xml:space="preserve">
    <value>Session '{0}'. Schema upgrade script:
{1}</value>
  </data>
  <data name="ExParametersCountIsNotSameAsSourceColumnListsCount" xml:space="preserve">
    <value>Parameters count is not same as source column lists count.</value>
  </data>
  <data name="ExSourceColumnListContainsNullValues" xml:space="preserve">
    <value>Source column list contains null values.</value>
  </data>
  <data name="LogSessionXCreatingConnection" xml:space="preserve">
    <value>Session '{0}'. Creating connection.</value>
  </data>
  <data name="LogSessionXOpeningConnectionY" xml:space="preserve">
    <value>Session '{0}'. Opening connection '{1}'.</value>
  </data>
  <data name="LogSessionXClosingConnectionY" xml:space="preserve">
    <value>Session '{0}'. Closing connection '{1}'.</value>
  </data>
  <data name="LogSessionXDisposingConnection" xml:space="preserve">
    <value>Session '{0}'. Disposing connection.</value>
  </data>
  <data name="LogSessionXBeginningTransactionWithYIsolationLevel" xml:space="preserve">
    <value>Session '{0}'. Beginning transaction @ {1}.</value>
  </data>
  <data name="LogSessionXCommitTransaction" xml:space="preserve">
    <value>Session '{0}'. Commit transaction.</value>
  </data>
  <data name="LogSessionXRollbackTransaction" xml:space="preserve">
    <value>Session '{0}'. Rollback transaction.</value>
  </data>
  <data name="LogSessionXQueryY" xml:space="preserve">
    <value>Session '{0}'. SQL batch: 
{1}</value>
  </data>
  <data name="ExXIsNotSupported" xml:space="preserve">
    <value>'{0}' is not supported</value>
  </data>
  <data name="ExTemporaryTableXIsLocked" xml:space="preserve">
    <value>Temporary table '{0}' is locked</value>
  </data>
  <data name="LogSessionXMakeSavepointY" xml:space="preserve">
    <value>Session '{0}'. Make savepoint '{1}'.</value>
  </data>
  <data name="LogSessionXRollbackToSavepointY" xml:space="preserve">
    <value>Session '{0}'. Rollback to savepoint '{1}'.</value>
  </data>
  <data name="LogSessionXReleaseSavepointY" xml:space="preserve">
    <value>Session '{0}'. Release savepoint '{1}'.</value>
  </data>
  <data name="ExConnectionIsNotOpen" xml:space="preserve">
    <value>Connection is not open.</value>
  </data>
  <data name="ExCommandsAreAlreadyTranslated" xml:space="preserve">
    <value>Commands are already translated.</value>
  </data>
  <data name="ExCurrentStorageProviderDoesNotSupportSavepoints" xml:space="preserve">
    <value>Current storage provider does not support savepoints (nested transactions).</value>
  </data>
  <data name="LogStorageXDoesNotSupportPartialIndexesIgnoringFilterForPartialIndexY" xml:space="preserve">
    <value>Storage '{0}' does not support partial indexes, ignoring filter for partial index '{0}'.</value>
  </data>
  <data name="ExOuterParameterReferenceFoundButNoSqlCompilerProvided" xml:space="preserve">
    <value>Outer parameter reference found, but no SqlCompiler provided</value>
  </data>
  <data name="ExTranslationOfInContainsIsNotSupportedInThisCase">
    <value xml:space="preserve">Translation of In/Contains is not supported in this case</value>
  </data>
  <data name="ExRequestIsNotPrepared">
    <value xml:space="preserve">Request is not prepared</value>
  </data>
  <data name="ExThereAreNoSuitableTypes" xml:space="preserve">
    <value>There are no suitable types in '{0}'.</value>
  </data>
  <data name="ExElementWithNameContainedInThisInstanceAlready" xml:space="preserve">
    <value>Element with name '{0}' is contained in this instance already.</value>
  </data>
  <data name="ExServiceWithNameAlreadyExistsInStorageInfoServicesCollection" xml:space="preserve">
    <value>Service with name '{0}' already exists in StorageInfo.Services collection.</value>
  </data>
  <data name="ExFieldWithNameAlreadyExistsInEntityFieldsCollection" xml:space="preserve">
    <value>Field with name '{0}' already exists in EntityInfo.Fields collection.</value>
  </data>
  <data name="ExIndexWithNameAlreadyExistsInEntityInfoIndexesCollection" xml:space="preserve">
    <value>Index with name '{0}' already exists in EntityInfo.Indexes collection.</value>
  </data>
  <data name="ExUnsupportedType" xml:space="preserve">
    <value>Unsupported type: '{0}'.</value>
  </data>
  <data name="ExElementWithTypeIsContainedInThisInstanceAlready" xml:space="preserve">
    <value>Element with type '{0}' is already contained in this instance.</value>
  </data>
  <data name="ExTypeCantBeNull" xml:space="preserve">
    <value>Type cannot be null.</value>
  </data>
  <data name="ExIndexAlreadyContainsField" xml:space="preserve">
    <value>Index already contains field '{0}'.</value>
  </data>
  <data name="ExIndexFieldXIsIncorrect" xml:space="preserve">
    <value>Index field '{0}' is incorrect.</value>
  </data>
  <data name="ExTypeNotFoundInModel" xml:space="preserve">
    <value>Type '{0}' is not found in model.</value>
  </data>
  <data name="ExOutOfTransactionScope" xml:space="preserve">
    <value>Object is outside of initial transaction scope.</value>
  </data>
  <data name="ExUnableToModifyDeletedObject" xml:space="preserve">
    <value>Unable to modify removed object.</value>
  </data>
  <data name="ExSessionBoundObjectOutOfSessionScope" xml:space="preserve">
    <value>Session bound object is out of session scope.</value>
  </data>
  <data name="ExFieldNotFoundInModel" xml:space="preserve">
    <value>Field '{0}' is not found in model.</value>
  </data>
  <data name="ExResultTypeIncorrect" xml:space="preserve">
    <value>Value of '{0}' type cannot be assigned to property of '{1}' type.</value>
  </data>
  <data name="ExStorageProviderXIsNotFound" xml:space="preserve">
    <value>Storage provider '{0}' is not found.</value>
  </data>
  <data name="ExInvalidKeyParams" xml:space="preserve">
    <value>Unable to create Key. Key params do not correspond to its structure.</value>
  </data>
  <data name="ExTypeInfoHierarchyMistmatch" xml:space="preserve">
    <value>TypeInfo hierarchy does not correspond to provided hierarchy.</value>
  </data>
  <data name="ExPrimaryKeyFieldCantBeChanged" xml:space="preserve">
    <value>Field '{0}' is a part of primary key. It can't be changed.</value>
  </data>
  <data name="ExEntityRemoved" xml:space="preserve">
    <value>Unable to modify removed entity.</value>
  </data>
  <data name="AspectExMultipleAttributesOfTypeXAreNotAllowedHere" xml:space="preserve">
    <value>{0}: multiple attributes of type '{1}' are not allowed here.</value>
  </data>
  <data name="ExColumnLength" xml:space="preserve">
    <value>Value length {0} is greater than column length {1}.</value>
  </data>
  <data name="ExColumnNotNullable" xml:space="preserve">
    <value>Unable to assign null to non-nullable column.</value>
  </data>
  <data name="ExTypeMustBeEntityDescendant" xml:space="preserve">
    <value>Invalid type specified.</value>
  </data>
  <data name="ExInvalidSession" xml:space="preserve">
    <value>The Session of specified ISessionBound object is invalid.</value>
  </data>
  <data name="ValueCanNotBeNull" xml:space="preserve">
    <value>Value can not be null.</value>
  </data>
  <data name="ExEntityIsRemoved" xml:space="preserve">
    <value>Entity is removed.</value>
  </data>
  <data name="ValueLengthCanNotExceedX" xml:space="preserve">
    <value>Value can not exceed {0}.</value>
  </data>
  <data name="ValueShouldMatchRegexPatternX" xml:space="preserve">
    <value>Value should match regex pattern '{0}'</value>
  </data>
  <data name="ExInvalidFieldValueConstraintXIsViolated" xml:space="preserve">
    <value>Invalid field value, constraint {0} is violated.</value>
  </data>
  <data name="ValueCanNotBeLessThenX" xml:space="preserve">
    <value>Value can not be less then {0}.</value>
  </data>
  <data name="ExErrorsDuringStorageBuild" xml:space="preserve">
    <value>Some errors have been occurred during storage build. See error log for details.</value>
  </data>
  <data name="ExKeyFieldXWasNotFoundInTypeY" xml:space="preserve">
    <value>Key field '{0}' was not found in type '{1}'.</value>
  </data>
  <data name="ValueTypeMismatchForFieldX" xml:space="preserve">
    <value>Value type mismatch for field '{0}'</value>
  </data>
  <data name="ExFieldWithNameXIsAlreadyRegistered" xml:space="preserve">
    <value>Field with name '{0}' is already registered.</value>
  </data>
  <data name="ExFieldXIsAlreadyDefinedInTypeXOrItsAncestor" xml:space="preserve">
    <value>Field '{0}' is already defined in type '{1}' or in its ancestor.</value>
  </data>
  <data name="ExInterfaceXDoesNotBelongToXHierarchy" xml:space="preserve">
    <value>Interface '{0}' does not belong to '{1}' hierarchy.</value>
  </data>
  <data name="TypeXDoesNotImplementYZField" xml:space="preserve">
    <value>Type '{0}' does not implement '{1}.{2}' property.</value>
  </data>
  <data name="ExConstraintViolation" xml:space="preserve">
    <value>Constraint violation: constraint {0} on field '{1}.{2}' of object '{3}' failed on value {4}.</value>
  </data>
  <data name="ValueCanNotBeRemovedEntity" xml:space="preserve">
    <value>Value can not be an entity that is already removed.</value>
  </data>
  <data name="ExIndexedPropertiesAreNotSupported" xml:space="preserve">
    <value>Indexed properties are not supported.</value>
  </data>
  <data name="ExTypeXIsNotRegisteredInTheModel" xml:space="preserve">
    <value>Type '{0}' is not registered in the model.</value>
  </data>
  <data name="ExFieldXCannotBeLazyLoadAsItIsIncludedInPrimaryKey" xml:space="preserve">
    <value>Field '{0}' cannot be LazyLoad as it is included into primary key.</value>
  </data>
  <data name="ExTypeWithNameXIsAlreadyDefined" xml:space="preserve">
    <value>Type with name '{0}' is already defined.</value>
  </data>
  <data name="ExTypeXIsAlreadyDefined" xml:space="preserve">
    <value>Type '{0}' is already defined.</value>
  </data>
  <data name="ExIndexWithNameXIsAlreadyRegistered" xml:space="preserve">
    <value>Index with name '{0}' is already registered.</value>
  </data>
  <data name="ExTypeXWasNotRegisteredForActivation" xml:space="preserve">
    <value>Type '{0}' was not registered for activation.</value>
  </data>
  <data name="ExTypeDefXIsAlreadyBelongsToHierarchyWithTheRootY" xml:space="preserve">
    <value>TypeDef '{0}' already belongs to hierarchy with '{1}' root.</value>
  </data>
  <data name="ExXDescendantIsAlreadyARootOfAnotherHierarchy" xml:space="preserve">
    <value>'{0}' descendant is already a root of another hierarchy.</value>
  </data>
  <data name="ExPairedFieldXHasWrongTypeItShouldBeReferenceToEntityOrAEntitySet" xml:space="preserve">
    <value>Paired field '{0}' has wrong type. A descendant of Entity or EntitySet is expected.</value>
  </data>
  <data name="ExReferencedFieldXAndPairedFieldAreEqual" xml:space="preserve">
    <value>Referenced field '{0}' and paired field are equal.</value>
  </data>
  <data name="ExPairedFieldXYWasNotFoundInZType" xml:space="preserve">
    <value>Paired field '{0}.{1}' was not found in '{2}' type.</value>
  </data>
  <data name="ExAssociationAttributeCanNotBeAppliedToXField" xml:space="preserve">
    <value>'AssociationAttribute' can't be applied to '{0}' field.</value>
  </data>
  <data name="ExKeyProviderXShouldDefineAtLeastOneKeyField" xml:space="preserve">
    <value>Key provider '{0}' should define at least one key field.</value>
  </data>
  <data name="ExKeyProviderXAndHierarchyYKeyFieldAmountMismatch" xml:space="preserve">
    <value>Key provider '{0}' and hierarchy {1} key field amount mismatch.</value>
  </data>
  <data name="ExInvalidLengthAttributeOnXField" xml:space="preserve">
    <value>Invalid Length attribute on '{0}' field.</value>
  </data>
  <data name="ExFieldXHasYTypeButIsMarkedAsNotNullable" xml:space="preserve">
    <value>Field '{0}' has '{1}' type but is marked as not nullable.</value>
  </data>
  <data name="LogExplicitLazyLoadAttributeOnFieldXIsRedundant" xml:space="preserve">
    <value>Explicit LazyLoad=true on field '{0}' is redundant.</value>
  </data>
  <data name="ExplicitMappingNameSettingIsRedundantTheSameNameXWillBeGeneratedAutomatically" xml:space="preserve">
    <value>Explicit mapping name setting is redundant. The same name '{0}' will be generated automatically.</value>
  </data>
  <data name="ExInvalidMappingNameX" xml:space="preserve">
    <value>Invalid mapping name '{0}'.</value>
  </data>
  <data name="ExIndexMustContainAtLeastOneField" xml:space="preserve">
    <value>Index must contain at least one field.</value>
  </data>
  <data name="ExInvalidFillFactorXValueMustBeBetween0And1" xml:space="preserve">
    <value>Invalid fill factor '{0}'. Value must be between 0 and 1.</value>
  </data>
  <data name="ExColumnXIsNotFound" xml:space="preserve">
    <value>Column '{0}' is not found.</value>
  </data>
  <data name="ExTypeXDoesNotImplementYInterface" xml:space="preserve">
    <value>Type '{0}' does not implement '{1}' interface.</value>
  </data>
  <data name="ExTypeXIsNotCollatable" xml:space="preserve">
    <value>Type '{0}' is not collatable.</value>
  </data>
  <data name="XIsNotApplicableToYDescendants" xml:space="preserve">
    <value>'{0}' is not applicable to '{1}' descendants.</value>
  </data>
  <data name="ExNameXIsInvalid" xml:space="preserve">
    <value>Name '{0}' is invalid.</value>
  </data>
  <data name="ExIndexNameXIsInvalid" xml:space="preserve">
    <value>Index name '{0}' is invalid.</value>
  </data>
  <data name="ExPropertyXMustBeDeclaredInTypeY" xml:space="preserve">
    <value>Property '{0}' must be declared in type '{1}'.</value>
  </data>
  <data name="ExUnsupportedFieldTypeX" xml:space="preserve">
    <value>Unsupported field type: '{0}'</value>
  </data>
  <data name="ExKeyXWasNotFoundInStorage" xml:space="preserve">
    <value>Key '{0}' was not found in storage.</value>
  </data>
  <data name="ExCannotFindHandlerOfTypeX" xml:space="preserve">
    <value>Cannot find a handler of type '{0}'.</value>
  </data>
  <data name="ExKeyCanNotBeNull" xml:space="preserve">
    <value>Key can not be null.</value>
  </data>
  <data name="LogCreatingX" xml:space="preserve">
    <value>Creating {0}</value>
  </data>
  <data name="LogBuildingX" xml:space="preserve">
    <value>Building {0}</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="Generators" xml:space="preserve">
    <value>Generators</value>
  </data>
  <data name="ActualModel" xml:space="preserve">
    <value>Actual Model</value>
  </data>
  <data name="ModelDefinition" xml:space="preserve">
    <value>Model Definition</value>
  </data>
  <data name="CustomDefinitions" xml:space="preserve">
    <value>Custom Definitions</value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="LogDefiningX" xml:space="preserve">
    <value>Defining '{0}'</value>
  </data>
  <data name="Associations" xml:space="preserve">
    <value>Associations</value>
  </data>
  <data name="Indexes" xml:space="preserve">
    <value>Indexes</value>
  </data>
  <data name="Columns" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="HierarchyColumns" xml:space="preserve">
    <value>Hierarchy columns</value>
  </data>
  <data name="ExWrongPersistentTypeCandidate" xml:space="preserve">
    <value>Wrong persistent type candidate: '{0}'.</value>
  </data>
  <data name="ExNotNullableConstraintViolationOnFieldX" xml:space="preserve">
    <value>'NotNullable' constraint violation on field '{0}'.</value>
  </data>
  <data name="ExLengthConstraintViolationOnFieldX" xml:space="preserve">
    <value>'Length' constraint violation on field '{0}'.</value>
  </data>
  <data name="ExSessionIsAlreadyDisposed" xml:space="preserve">
    <value>Session is already disposed.</value>
  </data>
  <data name="ExCannotUseDefaultGeneratorForComplexKeys" xml:space="preserve">
    <value>Cannot use default generator for complex (multicolumn) Keys.</value>
  </data>
  <data name="ExUnableToCloneNonUserSessionConfiguration" xml:space="preserve">
    <value>Unable to clone non-user session configuration.</value>
  </data>
  <data name="ExEntityIsInInconsistentState" xml:space="preserve">
    <value>Entity is in inconsistent state.</value>
  </data>
  <data name="ExCanNotOpenTransactionNoCurrentSession" xml:space="preserve">
    <value>Can not open a transaction: there is no current Session.</value>
  </data>
  <data name="ExFieldXYIsNotFound" xml:space="preserve">
    <value>Field '{0}.{1}' is not found.</value>
  </data>
  <data name="ExEntityXIsBoundToAnotherSession" xml:space="preserve">
    <value>Entity '{0}' is bound to another Session.</value>
  </data>
  <data name="ExValueShouldBeXDescendant" xml:space="preserve">
    <value>Value should be '{0}' descendant.</value>
  </data>
  <data name="ExEntitySetCanTBeAssigned" xml:space="preserve">
    <value>EntitySet can't be assigned.</value>
  </data>
  <data name="ExAssociationMultiplicityIsNotValidForField" xml:space="preserve">
    <value>Association multiplicity '{0}' is not valid for field '{1}'.</value>
  </data>
  <data name="ExFieldXYIsAlreadyPairedWithABRemoveCD" xml:space="preserve">
    <value>Field '{0}.{1}' is already paired with '{2}.{3}'. Please remove [Association] attribute at '{4}.{5}'.</value>
  </data>
  <data name="ExUnableToActivateEntitySetWithoutAssociation" xml:space="preserve">
    <value>Unable to activate EntitySet for '{0}' field because it does not has association.</value>
  </data>
  <data name="ExEntitySetInvalidBecauseTransactionIsNotActive" xml:space="preserve">
    <value>Entity set is invalid due to current transaction is not active.</value>
  </data>
  <data name="ExCanNotCommitATransactionValidationContextIsInInconsistentState" xml:space="preserve">
    <value>Can not commit a transaction: ValidationContext is in inconsistent state.</value>
  </data>
  <data name="ExItemNotFoundInEntitySet" xml:space="preserve">
    <value>Item is not found in EntitySet.</value>
  </data>
  <data name="ExCanNotGetValidationContextThereIsNoActiveTransaction" xml:space="preserve">
    <value>Can not get validation context: there is no active transaction.</value>
  </data>
  <data name="ExDefaultGeneratorCanServeHierarchyWithExactlyOneKeyField" xml:space="preserve">
    <value>Default generator can serve hierarchy with exactly one key field.</value>
  </data>
  <data name="ExTypeXIsNotSupported" xml:space="preserve">
    <value>Type '{0}' is not supported.</value>
  </data>
  <data name="ExKeyFieldXInTypeYShouldNotHaveSetAccessor" xml:space="preserve">
    <value>Key property '{0}' declared in '{1}' should not have public or protected set accessor. Use base protected constructor to set Key value.</value>
  </data>
  <data name="ExUnableToSetKeyFieldXExplicitly" xml:space="preserve">
    <value>Unable to set Key field '{0}' explicitly.</value>
  </data>
  <data name="ExSectionIsNotFoundInApplicationConfigurationFile" xml:space="preserve">
    <value>Section '{0}' is not found in application configuration file.</value>
  </data>
  <data name="ExConfigurationForDomainIsNotFoundInApplicationConfigurationFile" xml:space="preserve">
    <value>Configuration for Domain with name '{0}' is not found in application configuration file (section '{1}').</value>
  </data>
  <data name="ExFieldXCannotBeNullableAsItIsIncludedInPrimaryKey" xml:space="preserve">
    <value>Field '{0}' cannot be Nullable as it is included into primary key.</value>
  </data>
  <data name="ExNoCurrentSession" xml:space="preserve">
    <value>There is no current Session.</value>
  </data>
  <data name="ExWrongKeyStructure" xml:space="preserve">
    <value>Wrong key structure.</value>
  </data>
  <data name="ExStateTransactionIsDifferent" xml:space="preserve">
    <value>StateTransaction property value differs from the current transaction.</value>
  </data>
  <data name="ExInvalidKeyString" xml:space="preserve">
    <value>String representaion of the Key has invalid format.</value>
  </data>
  <data name="ExCannotAssociateNonEmptyEntityStateWithKeyOfUnknownType" xml:space="preserve">
    <value>Attempt to associate non-empty EntityState with Key of unknown type.</value>
  </data>
  <data name="ExPairToAttributeCanNotBeAppliedToXField" xml:space="preserve">
    <value>[Association] attribute with PairTo can not be use with field '{0}' of type '{1}'. It is already applied to field '{2}' of type '{3}'.</value>
  </data>
  <data name="ExSessionWithNameXAlreadyExists" xml:space="preserve">
    <value>Session with name '{0}' already exists.</value>
  </data>
  <data name="SystemTypes" xml:space="preserve">
    <value>system types</value>
  </data>
  <data name="ExUnsupportedExpressionType" xml:space="preserve">
    <value>Unsupported expression type: '{0}'.</value>
  </data>
  <data name="ExFieldIsNotAnEntityField" xml:space="preserve">
    <value>Field '{0}' is not an Entity field in Type '{1}'.</value>
  </data>
  <data name="TypeXIsNotAnYDescendant" xml:space="preserve">
    <value>Type '{0}' is not an '{1}' descendant.</value>
  </data>
  <data name="ExSessionIsNotOpen" xml:space="preserve">
    <value>Session is not open. Use Session.Open(...) to open it.</value>
  </data>
  <data name="ExUnableToFindFactoryMethodForTypeXMakeSureAssemblyYProcessedByWeaver" xml:space="preserve">
    <value>Unable to find factory method for type '{0}'. Make sure assembly '{0}' is processed by weaver. See section 2 of Manual for details.</value>
  </data>
  <data name="ExActiveSerializationContextIsNotFound" xml:space="preserve">
    <value>Active serialization context is not found.</value>
  </data>
  <data name="ExCannotResolveEntityWithKeyX" xml:space="preserve">
    <value>Cannot resolve entity with key '{0}'.</value>
  </data>
  <data name="ExUnableToResolveTypeForKeyX" xml:space="preserve">
    <value>Unable to resolve type for Key '{0}'.</value>
  </data>
  <data name="ExUnknownEntitySerializationKindX" xml:space="preserve">
    <value>Unknown entity serialization kind '{0}'.</value>
  </data>
  <data name="ExUnableToCreateKeyForXHierarchy" xml:space="preserve">
    <value>Unable to create key for '{0}' hierarchy. Key value or key generator should be specified.</value>
  </data>
  <data name="ExCompilerContainerAttributeIsNotAppliedToTypeX" xml:space="preserve">
    <value>[CompilerContainer] attribute isn't applied to type '{0}'.</value>
  </data>
  <data name="ExInvalidUpgraderVersion" xml:space="preserve">
    <value>Invalid upgrader version.</value>
  </data>
  <data name="ExTypeIdForTypeXIsNotFound" xml:space="preserve">
    <value>TypeId for type '{0}' is not found.</value>
  </data>
  <data name="ExTypeWithTypeIdXIsNotFound" xml:space="preserve">
    <value>Type with type TypeId='{0}' is not found.</value>
  </data>
  <data name="ExActualSchemaVersionOfAssemblyXIsExpectedToBeYButCurrentlyItIsZ" xml:space="preserve">
    <value>Actual schema version of assembly '{0}' is expected to be '{1}', but currently it is '{2}'.</value>
  </data>
  <data name="ExOnlyEqualityRangesAreSupported" xml:space="preserve">
    <value>Only equality ranges are supported.</value>
  </data>
  <data name="ExCouldNotFindFieldSegmentForFieldX" xml:space="preserve">
    <value>Could not find field segment for field '{0}'.</value>
  </data>
  <data name="ExCouldNotFindEntityMappingForFieldX" xml:space="preserve">
    <value>Could not find entity mapping for field '{0}'.</value>
  </data>
  <data name="ExCouldNotFindAnonymousMappingForFieldX" xml:space="preserve">
    <value>Could not find anonymous mapping for field '{0}'.</value>
  </data>
  <data name="ExBinaryExpressionsWithNodeTypeXAreNotSupported" xml:space="preserve">
    <value>Binary expressions with NodeType = 'ExpressionType.{0}' aren't supported.</value>
  </data>
  <data name="ExCouldNotFindGroupingMappingForFieldX" xml:space="preserve">
    <value>Could not find grouping mapping for field '{0}'.</value>
  </data>
  <data name="ExCouldNotFindSubqueryMappingForFieldX" xml:space="preserve">
    <value>Could not find subquery mapping for field '{0}'.</value>
  </data>
  <data name="ExSpecifiedValuesArentEnoughToCreateKeyForTypeX" xml:space="preserve">
    <value>Specified values aren't enough to create key for type '{0}'.</value>
  </data>
  <data name="ExExtractedSchemaIsNotCompatibleWithTheTargetSchema_DetailsX" xml:space="preserve">
    <value>Extracted schema is not compatible with the target schema. Details:
{0}</value>
  </data>
  <data name="ExCanNotUpgradeSchemaSafely_DetailsX" xml:space="preserve">
    <value>Cannot upgrade schema safely. Details:
{0}</value>
  </data>
  <data name="ExUpgradeOfAssemblyXFromVersionYToZIsNotSupported" xml:space="preserve">
    <value>Upgrade of assembly '{0}' from version '{1}' to '{2}' is not supported.</value>
  </data>
  <data name="ZeroAssemblyVersion" xml:space="preserve">
    <value>&lt;none&gt;</value>
  </data>
  <data name="ExDuplicateAssemblyNameX" xml:space="preserve">
    <value>Duplicate assembly name: '{0}'.</value>
  </data>
  <data name="ExNoUpgradeHandlerIsFoundForAssemblyXVersionY" xml:space="preserve">
    <value>No upgrade handler is found for assembly '{0}', version '{1}'.</value>
  </data>
  <data name="ExTypeWithNameXIsNotFoundInMetadata" xml:space="preserve">
    <value>Type with name '{0}' is not found in metadata.</value>
  </data>
  <data name="LogMetadataTypeRenamedXToY" xml:space="preserve">
    <value>Metadata.Type renamed: '{0}' to '{1}'.</value>
  </data>
  <data name="MetadataAssemblyFormat" xml:space="preserve">
    <value>{0} (Version={1})</value>
  </data>
  <data name="MetadataTypeFormat" xml:space="preserve">
    <value>{0} (Id={1})</value>
  </data>
  <data name="LogMetadataAssemblyCreatedX" xml:space="preserve">
    <value>Metadata.Assembly created: '{0}'.</value>
  </data>
  <data name="LogMetadataAssemblyUpdatedXFromVersionYToZ" xml:space="preserve">
    <value>Metadata.Assembly updated: '{0}', from version '{1}' to '{2}'.</value>
  </data>
  <data name="ExMoreThanOneEnabledXIsProvidedForAssemblyY" xml:space="preserve">
    <value>More than one enabled {0} is provided for assembly '{1}'.</value>
  </data>
  <data name="ExExtractedSchemaIsNotEqualToTheTargetSchema_DetailsX" xml:space="preserve">
    <value>Extracted schema is not equal to the target schema. Details:
{0}</value>
  </data>
  <data name="SchemaComparisonResultFormat" xml:space="preserve">
    <value>Schema comparison result: {0}
Has unsafe actions: {1}
Has column type changes: {2} 
Compatible in ValidateLegacy mode: {3}

Unsafe actions:
{4}
Schema hints:
{5}
Schema difference:
{6}</value>
  </data>
  <data name="LogComparisonResultX" xml:space="preserve">
    <value>Comparison result:
{0}</value>
  </data>
  <data name="LogClearingComparisonResultX" xml:space="preserve">
    <value>Clearing comparison result:
{0}</value>
  </data>
  <data name="LogSynchronizingSchemaInXMode" xml:space="preserve">
    <value>Synchronizing schema in {0} mode</value>
  </data>
  <data name="LogTargetSchema" xml:space="preserve">
    <value>Target schema:</value>
  </data>
  <data name="LogExtractedSchema" xml:space="preserve">
    <value>Extracted schema:</value>
  </data>
  <data name="ExStructuresDoNotSupportFieldsOfTypeX" xml:space="preserve">
    <value>Structures do not support fields of type '{0}'.</value>
  </data>
  <data name="LogDefiningHierarchyForTypeX" xml:space="preserve">
    <value>Defining hierarchy for type '{0}'</value>
  </data>
  <data name="LogDefiningFieldX" xml:space="preserve">
    <value>Defining field '{0}'</value>
  </data>
  <data name="LogBuildingDeclaredFieldXY" xml:space="preserve">
    <value>Building declared field '{0}.{1}'</value>
  </data>
  <data name="LogBuildingInheritedFieldXY" xml:space="preserve">
    <value>Building inherited field '{0}.{1}'</value>
  </data>
  <data name="LogBuildingInterfaceFieldXY" xml:space="preserve">
    <value>Building interface field '{0}.{1}'</value>
  </data>
  <data name="LogDefiningIndexes" xml:space="preserve">
    <value>Defining indexes</value>
  </data>
  <data name="LogBuildingIndexX" xml:space="preserve">
    <value>Building index '{0}'</value>
  </data>
  <data name="LogSkippingEntityXAsItDoesNotBelongToAnyHierarchyThusItCannotBePersistent" xml:space="preserve">
    <value>Skipping entity '{0}' as it does not belong to any hierarchy thus it cannot be persistent.</value>
  </data>
  <data name="ExDowncastFromXToXNotSupportedUseOfTypeOrAsOperatorInstead" xml:space="preserve">
    <value>Unable to translate '{0}' expression. Downcast from '{1}' to '{2}' not supported. Use 'OfType' or 'as' operator instead.</value>
  </data>
  <data name="ExAsOperatorSupportsEntityOnly" xml:space="preserve">
    <value>'as' operator supports casting only inside Entity hierarchy.</value>
  </data>
  <data name="ExPrefetchDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>Prefetch does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExExcludeFieldsDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>ExcludeFields does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExIncludeFieldsDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>IncludeFields does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExMethodXNotFound" xml:space="preserve">
    <value>Method '{0}' is not found.</value>
  </data>
  <data name="ExOfTypeSupportsOnlyEntityConversion" xml:space="preserve">
    <value>OfType supports casting only inside IEntity hierarchy.</value>
  </data>
  <data name="ExLambdaParameterIsOutOfScope" xml:space="preserve">
    <value>Lambda parameter is out of scope.</value>
  </data>
  <data name="LogFailedToExtractDomainModelFromStorage" xml:space="preserve">
    <value>Failed to extract domain model from the storage.</value>
  </data>
  <data name="LogDomainModelIsNotFoundInStorage" xml:space="preserve">
    <value>Domain model is not found in the storage.</value>
  </data>
  <data name="ExTypeXIsNotFound" xml:space="preserve">
    <value>Type '{0}' is not found.</value>
  </data>
  <data name="ExHintXIsConflictingWithHintY" xml:space="preserve">
    <value>Hint '{0}' is conflicting with hint '{1}'</value>
  </data>
  <data name="ExKeyOfXDoesNotMatchKeyOfY" xml:space="preserve">
    <value>Key of '{0}' does not match key of '{1}'.</value>
  </data>
  <data name="ExTypeXMustBelongToHierarchy" xml:space="preserve">
    <value>Type '{0}' must belong to hierarchy.</value>
  </data>
  <data name="ExUnauthorizedAccessDeclarationOfCallerTypeIsNotInRegisteredAssembly" xml:space="preserve">
    <value>Unauthorized: the caller is declared outside of any of registered assemblies.</value>
  </data>
  <data name="ExStructureOfFieldXDoesNotMatchStructureOfFieldY" xml:space="preserve">
    <value>Structure of field '{0}' does not match structure of field '{1}'.</value>
  </data>
  <data name="ExInvalidScaleAttributeOnFieldX" xml:space="preserve">
    <value>Invalid Scale attribute on field '{0}'.</value>
  </data>
  <data name="ExInvalidPrecisionAttributeOnFieldX" xml:space="preserve">
    <value>Invalid Precision attribute on field '{0}'.</value>
  </data>
  <data name="ExKeyComparerNotSupportedInGroupJoin" xml:space="preserve">
    <value>Unable to translate expression '{0}'. Key comparer is not supported in GroupJoin.</value>
  </data>
  <data name="TypeXDoesNotParticipateInTheSpecifiedAssociation" xml:space="preserve">
    <value>Type '{0}' does not participate in the specified association.</value>
  </data>
  <data name="ExActiveSessionIsRequiredForThisOperation" xml:space="preserve">
    <value>Active Session is required for this operation. Use Session.Open(...) to open it.</value>
  </data>
  <data name="ExReferentialIntegrityViolation" xml:space="preserve">
    <value>Referential integrity violation.</value>
  </data>
  <data name="ReferentialIntegrityViolationOnAttemptToRemoveXKeyY" xml:space="preserve">
    <value>Referential integrity violation on attempt to remove '{0}', Key='{1}'.
Association: {2}
Referencing Entity Key: {3}
Referenced Entity Key: {4}</value>
  </data>
  <data name="ExLeftJoinDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>LeftJoin does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExTypeXDoesNotHaveAParameterlessConstructor" xml:space="preserve">
    <value>Type '{0}' does not have a parameterless constructor.</value>
  </data>
  <data name="ExCurrentSessionGetterIsAlreadyAssigned" xml:space="preserve">
    <value>Current session getter is already assigned.</value>
  </data>
  <data name="ExValueIsAlreadyAssigned" xml:space="preserve">
    <value>Value is already assigned.</value>
  </data>
  <data name="ExMaterializationErrorTypeIdColumnDoesNotExistsInTheUnderlyingRecordSet" xml:space="preserve">
    <value>Materialization error: Entity's TypeId column does not exist in the underlying RecordSet.</value>
  </data>
  <data name="KeyFormat" xml:space="preserve">
    <value>{0}, {1}</value>
  </data>
  <data name="KeyFormatUnknownKeyType" xml:space="preserve">
    <value>{0} (unknown), {1}</value>
  </data>
  <data name="ExKeyValuesArrayIsEmpty" xml:space="preserve">
    <value>Key values array is empty.</value>
  </data>
  <data name="ExKeyIndexesAreSpecifiedForNonGenericKey" xml:space="preserve">
    <value>Key indexes are specified for non-generic Key.</value>
  </data>
  <data name="ExSequenceContainsNoElements" xml:space="preserve">
    <value>Sequence contains no elements.</value>
  </data>
  <data name="EntityStateFormat" xml:space="preserve">
    <value>Key = '{0}', Tuple = {1}, State = {2}</value>
  </data>
  <data name="NA" xml:space="preserve">
    <value>n/a</value>
  </data>
  <data name="ExTableXIsNotFound" xml:space="preserve">
    <value>Table with name '{0}' is not found.</value>
  </data>
  <data name="ExColumnXIsNotFoundInTableY" xml:space="preserve">
    <value>Column with name '{0}' is not found in table '{1}'.</value>
  </data>
  <data name="ExProviderXIsNotSupportedUseOneOfTheFollowingY" xml:space="preserve">
    <value>Provider "{0}" is not supported. Use one of the following: {1}.</value>
  </data>
  <data name="ExTypeXDoesNotContainYField" xml:space="preserve">
    <value>Type '{0}' does not contain '{1}' field.</value>
  </data>
  <data name="ExFieldMustBeOfEntitySetType" xml:space="preserve">
    <value>Field must be of EntitySet&lt;&gt; type.</value>
  </data>
  <data name="ExFieldXIsNotAnEntitySetField" xml:space="preserve">
    <value>Field '{0}' is not an EntitySet field.</value>
  </data>
  <data name="ExEntityOfTypeXIsIncompatibleWithThisEntitySet" xml:space="preserve">
    <value>Entity of type '{0}' is incompatible with this EntitySet.</value>
  </data>
  <data name="EntityWithKeyXDoesNotExist" xml:space="preserve">
    <value>Entity with Key = '{0}' does not exist.</value>
  </data>
  <data name="ExThereIsNoCurrentHttpRequestOrSessionManagerIsnTBoundToItYet" xml:space="preserve">
    <value>There is no current HttpRequest, or SessionManager is not bound to it yet.</value>
  </data>
  <data name="ExQueryContainsClosuresOfDifferentTypes" xml:space="preserve">
    <value>The query contains closures of different types.</value>
  </data>
  <data name="ExInvalidPrefetchSelectorX" xml:space="preserve">
    <value>Invalid prefetch selector '{0}'.</value>
  </data>
  <data name="ExCanNotCommitATransactionValidationContextIsInInvalidState" xml:space="preserve">
    <value>Can not commit a transaction. Validation context is in invalid state.</value>
  </data>
  <data name="ExLockDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>Lock does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExThisInstanceIsExpiredDueToTransactionBoundaries" xml:space="preserve">
    <value>This instance is expired due to transaction boundaries.</value>
  </data>
  <data name="ExOnOwnerRemoveActionIsNotEqualToOnTargetRemoveAction" xml:space="preserve">
    <value>'{0}.{1}' OnOwnerRemove action is not equal to '{2}.{3}' OnTargetRemove action.</value>
  </data>
  <data name="ExUnableToAssociateTypeXWithTypeYTypeXIsAlreadyMappedToTypeZ" xml:space="preserve">
    <value>Unable to associate type '{0}' with type '{1}'. Type '{0}' is already mapped to type '{2}'.</value>
  </data>
  <data name="ExUnableToAssociateFieldXWithFieldYFieldXIsAlreadyMappedToFieldZ" xml:space="preserve">
    <value>Unable to associate field '{0}' with field '{1}'. Field '{0}' is already mapped to field '{2}'.</value>
  </data>
  <data name="ExInheritanceSchemaIsInvalid" xml:space="preserve">
    <value>Inheritance schema '{0}' is invalid.</value>
  </data>
  <data name="ExVisitKeyFieldIsNotSupportedByX" xml:space="preserve">
    <value>VisitKeyField is not supported by '{0}'.</value>
  </data>
  <data name="ExPairedIdentityColumnsForTypesXAndXNotFound" xml:space="preserve">
    <value>Paired identity columns for types '{0}' and '{1}' not found</value>
  </data>
  <data name="ExCouldNotGetMemberXFromExpression" xml:space="preserve">
    <value>Could not get member {0} from expression.</value>
  </data>
  <data name="ExIncorrectNamespaceSynonyms" xml:space="preserve">
    <value>Incorrect namespace synonyms.</value>
  </data>
  <data name="ExMethodXIsntSupported" xml:space="preserve">
    <value>'{0}' method isn't supported.</value>
  </data>
  <data name="ExpressionXIsUnknown" xml:space="preserve">
    <value>Expression '{0}' is unknown.</value>
  </data>
  <data name="ExFieldIsNotStructure" xml:space="preserve">
    <value>Field '{0}' is not structure.</value>
  </data>
  <data name="ExNestedFieldXIsNotSupported" xml:space="preserve">
    <value>Nested field '{0}' is not supported.</value>
  </data>
  <data name="ExFieldXIsNotPrimitive" xml:space="preserve">
    <value>Field '{0}' is not primitive.</value>
  </data>
  <data name="ExFieldXIsNotEntity" xml:space="preserve">
    <value>Field '{0}' is not entity.</value>
  </data>
  <data name="ExPersistentTypeXIsNotEntityOrPersistentInterface" xml:space="preserve">
    <value>Persistent type '{0}' is not entity or persistent interface.</value>
  </data>
  <data name="ExConfigurationWithXNameAlreadyRegistered" xml:space="preserve">
    <value>Configuration with '{0}' name already registered.</value>
  </data>
  <data name="ExXNameCantBeEmpty" xml:space="preserve">
    <value>'{0}' name can't be empty.</value>
  </data>
  <data name="ExXIsNotValidNameForX" xml:space="preserve">
    <value>'{0}' is not valid name for {1}.</value>
  </data>
  <data name="ExHierarchyXDoesntContainAnyKeyFields" xml:space="preserve">
    <value>Hierarchy '{0}' doesn't contain any key fields.</value>
  </data>
  <data name="ExKeyStructureForXContainsNULLValue" xml:space="preserve">
    <value>Key structure for '{0}' contains NULL value.</value>
  </data>
  <data name="ExKeyFieldXXIsNotFound" xml:space="preserve">
    <value>Key field '{0}.{1}' is not found.</value>
  </data>
  <data name="ExKeyFieldCantBeOfXType" xml:space="preserve">
    <value>Key field can't be of '{0}' type.</value>
  </data>
  <data name="ExXMustBeInheritedFromX" xml:space="preserve">
    <value>'{0}' must be inherited from '{1}'.</value>
  </data>
  <data name="ExFieldOfTypeXCannotBeNullableForValueTypesConsiderUsingNullableT" xml:space="preserve">
    <value>Field of type '{0}' cannot be nullable. For value types consider using Nullable&lt;T&gt;.</value>
  </data>
  <data name="ExStructureXCantContainFieldOfTheSameType" xml:space="preserve">
    <value>Structure '{0}' can't contain field of the same type.</value>
  </data>
  <data name="ExValueIsNotAcceptableForOnTargetRemoveProperty" xml:space="preserve">
    <value>'{0}.{1}': '{2}' value is not acceptable for 'OnTargetRemove' property.</value>
  </data>
  <data name="ExHierarchyIsNotFoundForTypeX" xml:space="preserve">
    <value>Hierarchy is not found for type '{0}'.</value>
  </data>
  <data name="ExUnableToBuildGenericInstanceTypesForXTypeBecauseItContainsMoreThen1GenericParameter" xml:space="preserve">
    <value>Unable to build generic instance types for '{0}' type because it contains more then 1 generic parameter.</value>
  </data>
  <data name="ExUnableToBuildGenericInstanceTypesForXTypeBecauseParameterIsNotConstrained" xml:space="preserve">
    <value>Unable to build generic instance types for '{0}' type because parameter is not constrained.</value>
  </data>
  <data name="ExItemByKeyXWasNotFound" xml:space="preserve">
    <value>Item by key ='{0}' was not found.</value>
  </data>
  <data name="ExAtLeastOneLoopHaveBeenFoundInPersistentTypeDependenciesGraphSuspiciousTypesX" xml:space="preserve">
    <value>At least one loop have been found in persistent type dependencies graph. Suspicious types: {0}</value>
  </data>
  <data name="ExKeyFieldsXAndXHaveTheSamePositionX" xml:space="preserve">
    <value>Key fields '{0}' and '{1}' have the same position: '{2}'.</value>
  </data>
  <data name="ExUnableToRemapFieldExpression" xml:space="preserve">
    <value>Unable to remap FieldExpression.</value>
  </data>
  <data name="ExAggregatesForNonPrimitiveTypesAreNotSupported" xml:space="preserve">
    <value>Unable to translate '{0}' expression. Aggregates for non primitive types are not supported.</value>
  </data>
  <data name="ExParameterExpressionMustHaveSameTypeAsProjectionExpressionItemProjector" xml:space="preserve">
    <value>ParameterExpression must have same type as ProjectionExpression.ItemProjector</value>
  </data>
  <data name="ExXDoesNotSupportX" xml:space="preserve">
    <value>'{0}' does not support '{1}'.</value>
  </data>
  <data name="ExHierarchyRootIsNotRegistered" xml:space="preserve">
    <value>Hierarchy root is not registered.</value>
  </data>
  <data name="ExOnlyEntitiesCouldBeHierarchyRoots" xml:space="preserve">
    <value>Only entities could be hierarchy roots.</value>
  </data>
  <data name="ExFieldXIsNotAnEntityReferenceNorEntitySet" xml:space="preserve">
    <value>Field '{0}' is not an entity reference, nor entity set.</value>
  </data>
  <data name="ExFieldXIsNotAnEntitySet" xml:space="preserve">
    <value>Field '{0}' is not an entity set.</value>
  </data>
  <data name="ExUnableToRemapKeyExpression" xml:space="preserve">
    <value>Unable to remap KeyExpression.</value>
  </data>
  <data name="ExUnableToHandleEntitySetExpressionWithoutSpecifiedOwner" xml:space="preserve">
    <value>Unable to handle EntitySetExpression without specified Owner.</value>
  </data>
  <data name="ExUnableToRemoveOwnerFromEntitySetExpression" xml:space="preserve">
    <value>Unable to remove Owner from EntitySetExpression.</value>
  </data>
  <data name="ExUnableToUseBaseImplementationOfVisitGenericExpressionWithoutSpecifyingGenericProcessorDelegate" xml:space="preserve">
    <value>Unable to use base implementation of VisitGenericExpression without specifying genericProcessor delegate.</value>
  </data>
  <data name="ExUnableToResolveOwnerOfStructureExpressionX" xml:space="preserve">
    <value>Unable to resolve owner of StructureExpression '{0}'.</value>
  </data>
  <data name="ExUnableToResolveOwnerOfFieldExpressionX" xml:space="preserve">
    <value>Unable to resolve owner of FieldExpression '{0}'.</value>
  </data>
  <data name="ExSelectManyCollectionSelector0MustHaveOnlyOneLambdaParameter" xml:space="preserve">
    <value>SelectMany collection selector '{0}' must have only one lambda parameter.</value>
  </data>
  <data name="SubqueryXHeaderMustHaveOnlyOneColumn" xml:space="preserve">
    <value>Subquery '{0}' header must have only one column.</value>
  </data>
  <data name="ExLinqTranslatorDoesNotSupportMethodX" xml:space="preserve">
    <value>Unable to translate expression '{0}'. LINQ translator does not support method '{1}'.</value>
  </data>
  <data name="ExContainsMethodIsOnlySupportedForRootExpressionsOrSubqueries" xml:space="preserve">
    <value>'Contains' method is only supported for root expressions or subqueries.</value>
  </data>
  <data name="ExAllMethodIsOnlySupportedForRootExpressionsOrSubqueries" xml:space="preserve">
    <value>'All' method is only supported for root expressions or subqueries.</value>
  </data>
  <data name="ExAnyMethodIsOnlySupportedForRootExpressionsOrSubqueries" xml:space="preserve">
    <value>'Any' method is only supported for root expressions or subqueries.</value>
  </data>
  <data name="ExTypeIsMethodSupportsOnlyEntitiesAndStructures" xml:space="preserve">
    <value>'TypeIs' method supports only Entities and Structures.</value>
  </data>
  <data name="ExBinaryExpressionXOfTypeXIsNotSupported" xml:space="preserve">
    <value>Binary expression '{0}' of type '{1}' is not supported.</value>
  </data>
  <data name="ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotStructureExpression" xml:space="preserve">
    <value>Both left and right part of binary expression '{0}' are NULL or not StructureExpression.</value>
  </data>
  <data name="ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotEntityExpressionEntityFieldExpression" xml:space="preserve">
    <value>Both left and right part of binary expression '{0}' are NULL or not EntityExpression(EntityFieldExpression).</value>
  </data>
  <data name="ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotKeyExpression" xml:space="preserve">
    <value>Both left and right part of binary expression '{0}' are NULL or not KeyExpression.</value>
  </data>
  <data name="ExMistmatchCountOfLeftAndRightExpressions" xml:space="preserve">
    <value>Mistmatch count of left and right expressions.</value>
  </data>
  <data name="ExUnableToBuildSubqueryResultForExpressionXStateContainsNoParameters" xml:space="preserve">
    <value>Unable to build subquery result for expression '{0}'. State contains no parameters.</value>
  </data>
  <data name="ExUnableToBuildSubqueryResultForExpressionXResultTypeIsNotIEnumerable" xml:space="preserve">
    <value>Unable to build subquery result for expression '{0}'. resultType is not IEnumerable&lt;&gt;.</value>
  </data>
  <data name="ExMethodCallExpressionXIsNotSupported" xml:space="preserve">
    <value>MethodCall expression '{0}' is not supported.</value>
  </data>
  <data name="ExLambdaXMustHaveOnlyOneParameter" xml:space="preserve">
    <value>Lambda '{0}' must have only one parameter.</value>
  </data>
  <data name="ExAggregateMethodXIsNotSupported" xml:space="preserve">
    <value>Unable to translate '{0}' expression. Aggregate method '{1} is not supported.</value>
  </data>
  <data name="ExCantAccessMemberOfTypeEntitySet" xml:space="preserve">
    <value>Can't access member of type 'EntitySet&lt;&gt;'.</value>
  </data>
  <data name="CantAccessMemberX" xml:space="preserve">
    <value>Can't access member '{0}'</value>
  </data>
  <data name="ExUnableToTranslateLambdaExpressionXBecauseItRequiresToMaterializeEntityOfTypeX" xml:space="preserve">
    <value>Unable to translate lambda expression '{0}' because it requires to materialize entity of type '{1}'.</value>
  </data>
  <data name="ExTypeXIsNotSupportedInNewExpression" xml:space="preserve">
    <value>Type '{0}' is not supported in 'new' expression.</value>
  </data>
  <data name="ExCanNotCommitATransactionEntitiesValidationFailed" xml:space="preserve">
    <value>Can not commit a transaction. Entities validation failed.</value>
  </data>
  <data name="ExTypeXIsNotStructure" xml:space="preserve">
    <value>Type '{0}' is not structure.</value>
  </data>
  <data name="ExUnableToMaterializeBackLocalCollectionItem" xml:space="preserve">
    <value>Unable to materialize back local collection item '{0}'.</value>
  </data>
  <data name="ExTypeXDoesNotHasAnyPublicReadablePropertiesOrFieldsSoItCanTBePersistedToStorage" xml:space="preserve">
    <value>Type '{0}' does not has any public readable properties or fields, so it can't be persisted to storage.</value>
  </data>
  <data name="ExSpecifiedTypeHierarchyIsDifferentFromKeyHierarchy" xml:space="preserve">
    <value>The specified type's hierarchy is different from the key's hierarchy.</value>
  </data>
  <data name="ExFieldXIsNotDeclaredInTypeYOrInOneOfItsAncestors" xml:space="preserve">
    <value>The field {0} is not declared in the type {1} or in one of its ancestors.</value>
  </data>
  <data name="ExIndexesOfColumnsToBeLoadedAreNotSpecified" xml:space="preserve">
    <value>Indexes of columns to be loaded are not specified.</value>
  </data>
  <data name="ExReferencingEntityWithKeyXIsNotFound" xml:space="preserve">
    <value>The referencing entity with key {0} is not found.</value>
  </data>
  <data name="ExReferencingEntityTupleIsNotLoaded" xml:space="preserve">
    <value>The referencing entity's tuple is not loaded.</value>
  </data>
  <data name="ExForeignKeyValueHaveNotBeenLoaded" xml:space="preserve">
    <value>The foreign key's value have not been loaded.</value>
  </data>
  <data name="ExAccessToTypeMemberCanNotBeExtractedFromSpecifiedExpression" xml:space="preserve">
    <value>The access to a type's member can not be extracted from the specified expression.</value>
  </data>
  <data name="ExSpecifiedPropertyXIsNotPersistent" xml:space="preserve">
    <value>The specified property {0} is not persistent.</value>
  </data>
  <data name="ExPrimaryKeyFieldXCanTBeMarkedAsVersion" xml:space="preserve">
    <value>Primary key field '{0}' can't be marked as Version.</value>
  </data>
  <data name="ExVersionFieldXCanTBeLazyLoadField" xml:space="preserve">
    <value>Version field '{0}' can't be LazyLoad field.</value>
  </data>
  <data name="ExVersionFieldXCanTBeOfYType" xml:space="preserve">
    <value>Version field '{0}' can't be of {1} type.</value>
  </data>
  <data name="ExVersionFieldXCanTBeSystemField" xml:space="preserve">
    <value>Version field '{0}' can't be System field.</value>
  </data>
  <data name="VersionFieldXCanTBeTypeIdField" xml:space="preserve">
    <value>Version field '{0}' can't be TypeId field.</value>
  </data>
  <data name="ExTypeXCantContainsVersionFieldsAsItsNotAHierarchyRoot" xml:space="preserve">
    <value>Type '{0}' can't contain Version fields, because it is not a hierarchy root type.</value>
  </data>
  <data name="ExTakeDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>'Take' does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExSkipDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>'Skip' does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExVersionRootObjectCantImplementIHasVersionRoots" xml:space="preserve">
    <value>Version root object can't implement IHasVersionRoots.</value>
  </data>
  <data name="ExUnableToUseIQueryableXInQueryExecuteStatement" xml:space="preserve">
    <value>Unable to use IQueryable '{0}' in Query.Execute statement.</value>
  </data>
  <data name="ExCouldNotConstructNewKeyInstanceTypeXIsNotAnEntity" xml:space="preserve">
    <value>Could not construct new Key instance. Type '{0}' is not an entity.</value>
  </data>
  <data name="CantChangeTypeOfColumnX" xml:space="preserve">
    <value> (can't change type of column '{0}')</value>
  </data>
  <data name="CantRemoveTableX" xml:space="preserve">
    <value> (can't remove table '{0}')</value>
  </data>
  <data name="CantRemoveColumnX" xml:space="preserve">
    <value> (can't remove column '{0}')</value>
  </data>
  <data name="ExUnableToBuildIndexXBecauseItWasBuiltOverInheritedFields" xml:space="preserve">
    <value>Unable to build index {0} because it contains inherited fields.</value>
  </data>
  <data name="LogSessionXDisposing" xml:space="preserve">
    <value>Session '{0}'. Disposing.</value>
  </data>
  <data name="LogDomainIsDisposing" xml:space="preserve">
    <value>Domain is disposing.</value>
  </data>
  <data name="LogDomainIsDisposingByAFinalizer" xml:space="preserve">
    <value>Domain is disposing by a finalizer.</value>
  </data>
  <data name="LogOpeningSessionX" xml:space="preserve">
    <value>Opening session '{0}'.</value>
  </data>
  <data name="LogSessionXRemovingKeyY" xml:space="preserve">
    <value>Session '{0}'. Removing: Key = '{1}'.</value>
  </data>
  <data name="LogSessionXMaterializingYKeyZ" xml:space="preserve">
    <value>Session '{0}'. Materializing {1}: Key = '{2}'.</value>
  </data>
  <data name="LogSessionXGettingValueKeyYFieldZ" xml:space="preserve">
    <value>Session '{0}'. Getting value: Key = '{1}', Field = '{2}'.</value>
  </data>
  <data name="LogSessionXSettingValueKeyYFieldZ" xml:space="preserve">
    <value>Session '{0}'. Setting value: Key = '{1}', Field = '{2}'.</value>
  </data>
  <data name="LogSessionXResolvingKeyYExactTypeIsUnknownFetchIsRequired" xml:space="preserve">
    <value>Session '{0}'. Resolving key '{1}'. Exact type is unknown. Fetch is required.</value>
  </data>
  <data name="LogSessionXResolvingKeyYExactTypeIsZ" xml:space="preserve">
    <value>Session '{0}'. Resolving key '{1}'. Exact type is {2}.</value>
  </data>
  <data name="Known" xml:space="preserve">
    <value>known</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>unknown</value>
  </data>
  <data name="LogSessionXResolvingKeyYKeyIsAlreadyResolved" xml:space="preserve">
    <value>Session '{0}'. Resolving key '{1}'. Key is already resolved.</value>
  </data>
  <data name="LogSessionXCachingY" xml:space="preserve">
    <value>Session '{0}'. Caching: {1}.</value>
  </data>
  <data name="LogSessionXUpdatingCacheY" xml:space="preserve">
    <value>Session '{0}'. Updating cache: {1}.</value>
  </data>
  <data name="LogSessionXPersistingReasonY" xml:space="preserve">
    <value>Session '{0}'. Persisting (reason: {1}).</value>
  </data>
  <data name="Partial" xml:space="preserve">
    <value>partial</value>
  </data>
  <data name="Full" xml:space="preserve">
    <value>full</value>
  </data>
  <data name="LogSessionXPersistCompleted" xml:space="preserve">
    <value>Session '{0}'. Persist completed.</value>
  </data>
  <data name="LogProcessingFixupActions" xml:space="preserve">
    <value>Processing fixup actions</value>
  </data>
  <data name="LogExecutingActionX" xml:space="preserve">
    <value>Executing action: '{0}'</value>
  </data>
  <data name="LogHierarchyX" xml:space="preserve">
    <value>Hierarchy: '{0}'</value>
  </data>
  <data name="LogFieldX" xml:space="preserve">
    <value>Field: '{0}'</value>
  </data>
  <data name="LogIndexX" xml:space="preserve">
    <value>Index: '{0}'</value>
  </data>
  <data name="LogInspectingHierarchyX" xml:space="preserve">
    <value>Inspecting hierarchy '{0}'</value>
  </data>
  <data name="LogInspectingTypeX" xml:space="preserve">
    <value>Inspecting type '{0}'</value>
  </data>
  <data name="LogInspectingModelDefinition" xml:space="preserve">
    <value>Inspecting model definition</value>
  </data>
  <data name="ExMemberXOfTypeYIsNotInitializedCheckIfConstructorArgumentIsCorrectOrFieldInitializedThroughInitializer" xml:space="preserve">
    <value>Member '{0}' of type '{1}' is not initialized. Check if constructor argument is correct or field initialized through initializer.</value>
  </data>
  <data name="ExInvalidNumberOfParametersInNewExpression" xml:space="preserve">
    <value>Invalid number of parameters in NewExpression.</value>
  </data>
  <data name="ExElementAtDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>'ElementAt' does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExElementAtOrDefaultDoesNotSupportQueryProviderOfTypeX" xml:space="preserve">
    <value>'ElementAtOrDefault' does not support query provider of type '{0}'.</value>
  </data>
  <data name="ExUnableToUseElementAtIntInQueryExecuteUseElementAtFuncIntInstead" xml:space="preserve">
    <value>Usage of ElementAt(int) or ElementAtOrDefault(int) in Query.Execute is wrong. Use ElementAt(Func&lt;int&gt;) or ElementAtOrDefault(Func&lt;int&gt;) instead.</value>
  </data>
  <data name="ExElementAtIndexMustBeGreaterOrEqualToZero" xml:space="preserve">
    <value>ElementAt index must be greater or equal to zero.</value>
  </data>
  <data name="ExLocalCollectionShouldNotBeQueryRoot" xml:space="preserve">
    <value>Local collection should not be query root.</value>
  </data>
  <data name="ExConnectionIsRequired" xml:space="preserve">
    <value>Connection is required.</value>
  </data>
  <data name="ExDisconnectedStateIsAlreadyAttachedToSession" xml:space="preserve">
    <value>DisconnectedState is already attached to session.</value>
  </data>
  <data name="ExDisconnectedStateIsDetached" xml:space="preserve">
    <value>DisconnectedState is detached.</value>
  </data>
  <data name="ExStateWithKeyXIsAlreadyExists" xml:space="preserve">
    <value>State with key '{0}' is already exists.</value>
  </data>
  <data name="ExStateIsNotLoaded" xml:space="preserve">
    <value>State is not loaded.</value>
  </data>
  <data name="ExStateIsRemoved" xml:space="preserve">
    <value>State is removed.</value>
  </data>
  <data name="ExKeyXShouldHaveExactType" xml:space="preserve">
    <value>Key {0} should have exact type.</value>
  </data>
  <data name="ExServiceXIsNotSupported" xml:space="preserve">
    <value>Service '{0}' is not supported.</value>
  </data>
  <data name="ExXIsObsoleteUseYAndZInstead" xml:space="preserve">
    <value>{0} is obsolete. Use {1} and {2} instead.</value>
  </data>
  <data name="ExCanNotCompleteOuterTransactionInnerTransactionIsActive" xml:space="preserve">
    <value>Can not complete outer transaction: inner transaction is active.</value>
  </data>
  <data name="ExCanNotOpenMoreThanOneInnerTransaction" xml:space="preserve">
    <value>Can not open more than one inner transaction.</value>
  </data>
  <data name="ExCanNotReuseOpenedTransactionRequestedIsolationLevelIsDifferent" xml:space="preserve">
    <value>Can not reuse opened transaction: requested isolation level is different.</value>
  </data>
  <data name="ExCanNotMarkStateAsModifiedItIsNotValidInCurrentTransaction" xml:space="preserve">
    <value>Can not mark state as modified: it is not valid in current transaction.</value>
  </data>
  <data name="ExTransactionIsNotActive" xml:space="preserve">
    <value>Transaction is not active.</value>
  </data>
  <data name="ExVersionOfEntityWithKeyXDiffersFromTheExpectedOne" xml:space="preserve">
    <value>Version of entity with key '{0}' differs from the expected one.</value>
  </data>
  <data name="ExTheServiceIsAlreadyAttachedToSession" xml:space="preserve">
    <value>The service is already attached to Session.</value>
  </data>
  <data name="ExServiceCanNotBeAttachedToSessionWhileItIsPersistingTheChanges" xml:space="preserve">
    <value>Service can not be attached to Session while it is persisting the changes.</value>
  </data>
  <data name="ExCantRegisterState" xml:space="preserve">
    <value>Can't register state.</value>
  </data>
  <data name="ExCantMergeState" xml:space="preserve">
    <value>Can't merge state.</value>
  </data>
  <data name="LogSessionXOpeningTransaction" xml:space="preserve">
    <value>Session '{0}'. Opening transaction.</value>
  </data>
  <data name="LogSessionXCommittingTransaction" xml:space="preserve">
    <value>Session '{0}'. Committing transaction.</value>
  </data>
  <data name="LogSessionXCommittedTransaction" xml:space="preserve">
    <value>Session '{0}'. Committed transaction.</value>
  </data>
  <data name="LogSessionXRollingBackTransaction" xml:space="preserve">
    <value>Session '{0}'. Rolling back transaction.</value>
  </data>
  <data name="LogSessionXRolledBackTransaction" xml:space="preserve">
    <value>Session '{0}'. Rolled back transaction.</value>
  </data>
  <data name="ExUnableToTranslateXExpressionSeeInnerExceptionForDetails" xml:space="preserve">
    <value>Unable to translate '{0}' expression. See inner exception for details.</value>
  </data>
  <data name="ExExpressionDefinedOutsideOfCachingQueryClosure" xml:space="preserve">
    <value>Expression '{0}' defined outside of CachingQuery closure.</value>
  </data>
  <data name="ExExpressionXIsNotASequence" xml:space="preserve">
    <value>Expression '{0}' is not a sequence.</value>
  </data>
  <data name="ExTakeNotSupportedInCompiledQueries" xml:space="preserve">
    <value>'Take({0})' not supported in compiled queries (Query.Execute). Use 'Take(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'Take(()=&gt;{0})'.</value>
  </data>
  <data name="ExSkipNotSupportedInCompiledQueries" xml:space="preserve">
    <value>'Skip({0})' not supported in compiled queries (Query.Execute). Use 'Skip(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'Skip(()=&gt;{0})'.</value>
  </data>
  <data name="ExElementAtNotSupportedInCompiledQueries" xml:space="preserve">
    <value>'ElementAt({0})' not supported in compiled queries (Query.Execute). Use 'ElementAt(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'ElementAt(()=&gt;{0})'.</value>
  </data>
  <data name="ExElementAtOrDefaultNotSupportedInCompiledQueries" xml:space="preserve">
    <value>'ElementAtOrDefault({0})' not supported in compiled queries (Query.Execute). Use 'ElementAtOrDefault(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'ElementAtOrDefault(()=&gt;{0})'.</value>
  </data>
  <data name="ExCanNotPersistThereArePinnedEntities" xml:space="preserve">
    <value>Can not persist: there are pinned entities.</value>
  </data>
  <data name="ExTypeDiscriminatorValueIsRequiredUnlessXIsMarkedAsDefaultTypeInHierarchy" xml:space="preserve">
    <value>Type discriminator value is required unless {0} is marked as default type in hierarchy.</value>
  </data>
  <data name="ExXFieldIsNotDeclaredInEntityDescendantSoCannotBeUsedAsTypeDiscriminator" xml:space="preserve">
    <value>'{0}' field is not declared in Entity descendant, so cannot be used as type discriminator.</value>
  </data>
  <data name="ExUnableToPersistTypeXBecauseOfLoopReference" xml:space="preserve">
    <value>Unable to persist type '{0}' to storage because of loop reference.</value>
  </data>
  <data name="ExUnableToStoreUntypedKeyToStorage" xml:space="preserve">
    <value>Unable to store untyped 'Key' to storage. Use '{0}' instead of 'Key'.</value>
  </data>
  <data name="ExFieldBelongsToADifferentType" xml:space="preserve">
    <value>Field belongs to a different type.</value>
  </data>
  <data name="LogSessionManagerEndRequestMethodWasNotInvoked" xml:space="preserve">
    <value>SessionManager.EndRequest method was not invoked during processing of the previous request to this module.</value>
  </data>
  <data name="ExBothPartsOfBinaryExpressionXAreOfTheDifferentType" xml:space="preserve">
    <value>Both parts of binary expression '{0}' are of the different type. Use type cast.</value>
  </data>
  <data name="ExFieldXNotFoundInTypeX" xml:space="preserve">
    <value>Field '{0}' not found in type '{1}'.</value>
  </data>
  <data name="ExUnableToBuildFulltextIndexesForHierarchyWithInheritanceSchemaClassTable" xml:space="preserve">
    <value>Unable to build full-text indexes for hierarchy '{0}' with InheritanceSchema.ClassTable.</value>
  </data>
  <data name="ExUseMethodXOnFirstInsteadOfSingle" xml:space="preserve">
    <value>Unable to translate '{0}'. Use method ('{1}') on First/FirstOrDefault instead of Single/SingleOrDefault.</value>
  </data>
  <data name="LogSessionXTransaction" xml:space="preserve">
    <value>Session '{0}'. Transaction</value>
  </data>
  <data name="ExUnknownInSyntax" xml:space="preserve">
    <value>Unable to translate '{0}' expression. Unknown "In" syntax.</value>
  </data>
  <data name="ExFieldMustBePersistent" xml:space="preserve">
    <value>Field '{0}' must be persistent (marked by [Field] attribute).</value>
  </data>
  <data name="ExEntityDoesNotHaveFullTextIndex" xml:space="preserve">
    <value>Entity of type '{0}' does not have full-text index.</value>
  </data>
  <data name="ExEntitiesXAndXBelongToDifferentHierarchies" xml:space="preserve">
    <value>Unable to translate '{0}'. Entities '{1}' and '{2}' belong to different hierarchies.</value>
  </data>
  <data name="JoinKeysLengthMismatch" xml:space="preserve">
    <value>Unable to translate '{0}'. Join keys length mismatch.</value>
  </data>
  <data name="ExKeysOfXAndXNotCompatible" xml:space="preserve">
    <value>Unable to translate '{0}'. Keys of '{1}' and '{2}' not compatible.</value>
  </data>
  <data name="RefFormat" xml:space="preserve">
    <value>Ref&lt;{0}&gt;({1})</value>
  </data>
  <data name="ExFreeTextNotSupportedInCompiledQueries" xml:space="preserve">
    <value>'FreeText&lt;T&gt;({0})' not supported in compiled queries (Query.Execute). Use 'FreeText&lt;T&gt;(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'FreeText&lt;T&gt;(()=&gt;{0})'.</value>
  </data>
  <data name="ExSessionOfAnotherSessionBoundMustBeTheSame" xml:space="preserve">
    <value>Session of another SessionBound must be the same.</value>
  </data>
  <data name="ExUnderlyingStorageProviderDoesNotSupportSQL" xml:space="preserve">
    <value>Underlying storage provider does not support SQL.</value>
  </data>
  <data name="ExConnectionInfoIsWrongYouShouldSetEitherConnectionUrlElementOrProviderAndConnectionStringElements" xml:space="preserve">
    <value>ConnectionInfo is wrong. You should set either 'connectionUrl' element or 'provider' and 'connectionString' elements.</value>
  </data>
  <data name="ExNonTemporaryKeysMustBeGeneratedByDescendants" xml:space="preserve">
    <value>Non-temporary keys must be generated by descendants.</value>
  </data>
  <data name="ExSpecifiedKeyFieldTypeIsNotSupportedByThisTemporaryKeyGenerator" xml:space="preserve">
    <value>Specified key field type is not supported by this temporary key generator.</value>
  </data>
  <data name="ExKeyOfSpecifiedTypeCannotBeGeneratedByThisKeyGenerator" xml:space="preserve">
    <value>Key of specified type cannot be generated by this KeyGenerator.</value>
  </data>
  <data name="KeyGenerators" xml:space="preserve">
    <value>Key generators</value>
  </data>
  <data name="ExKeyGeneratorAttributeOnTypeXRequiresNameToBeSet" xml:space="preserve">
    <value>[KeyGenerator] attribute on type '{0}' requires Name to be set.</value>
  </data>
  <data name="ExTransactionIsRunning" xml:space="preserve">
    <value>A transaction is running, but there should be no active transaction.</value>
  </data>
  <data name="ExCanNotMergeTheState" xml:space="preserve">
    <value>Can't merge the state.</value>
  </data>
  <data name="ExQueryTaskIsNotExecutedYet" xml:space="preserve">
    <value>Query task is not executed yet.</value>
  </data>
  <data name="ExCyclicDependencyInQueryPreprocessorGraphIsDetected" xml:space="preserve">
    <value>Cyclic dependency in query preprocessor graph is detected.</value>
  </data>
  <data name="ExAttemptToAutomaticallyActivateSessionXInsideSessionYIsBlocked" xml:space="preserve">
    <value>An attempt to automatically activate Session '{0}' inside Session '{1}' (Session switching) is blocked. 
Most likely, mixed usage of objects from different Sessions is a result of a bug in your code. 
Use manual Session activation (Session.Deactivate(), Session.Activate()) or 
SessionOptions.AllowSwitching flag to avoid this exception, if this is intentional.</value>
  </data>
  <data name="ExDuplicateForOperationXIsFound" xml:space="preserve">
    <value>The duplicate for the operation {0} is found.</value>
  </data>
  <data name="ExCannotGenerateNextVersionValueOfTypeX" xml:space="preserve">
    <value>Can't generate next version value of type '{0}'.</value>
  </data>
  <data name="ExPropertyXYDoesnTHavePublicGetter" xml:space="preserve">
    <value>Property '{0}.{1}' doesn't have public getter.</value>
  </data>
  <data name="ExPropertyXDoesnTHavePublicSetter" xml:space="preserve">
    <value>Property '{0}' doesn't have public setter.</value>
  </data>
  <data name="ExTypeOfXMustBeADescendantOfYType" xml:space="preserve">
    <value>Type of '{0}' must be a descendant of {1} type.</value>
  </data>
  <data name="ExActiveTransactionIsRequiredForThisOperationUseSessionOpenTransactionToOpenIt" xml:space="preserve">
    <value>Active Transaction is required for this operation. Use Session.OpenTransaction(...) to open it.</value>
  </data>
  <data name="ExLegacySchemaIsNotCompatible_DetailsX" xml:space="preserve">
    <value>Legacy schema is not compatible. Details: 
{0}</value>
  </data>
  <data name="LogSkippingSchemaSynchronization" xml:space="preserve">
    <value>Skipping schema synchronization.</value>
  </data>
  <data name="ExXYFieldPairedToZAFieldShouldBeBButCurrentIsC" xml:space="preserve">
    <value>'{0}.{1}' field, which is declared as paired to '{2}.{3}' field, should be of type '{4}' but actually it is '{5}'.</value>
  </data>
  <data name="ExXYFieldPairedToZAFieldShouldBeEntitySetOfBButCurrentIsC" xml:space="preserve">
    <value>'{0}.{1}' field, which is declared as paired to '{2}.{3}' field, should be 'EntitySet&lt;{4}&gt;' but it is 'EntitySet&lt;{5}&gt;'.</value>
  </data>
  <data name="ExConnectionInfoIsMissing" xml:space="preserve">
    <value>ConnectionInfo is missing. If you are using configuration file you should specify either 'connectionUrl' element or 'connectionString' and 'provider' elements</value>
  </data>
  <data name="ExConnectionInfoIsWrongYouShouldSetEitherConnectionUrlElementOrConnectionStringElement" xml:space="preserve">
    <value>ConnectionInfo is wrong. You should set either  'connectionUrl' element or 'connectionString' element.</value>
  </data>
  <data name="ExTypeWithNameXIsNotRegistered" xml:space="preserve">
    <value>Type with name '{0}' isn't registered in the Domain.</value>
  </data>
  <data name="LogSessionXInvalidate" xml:space="preserve">
    <value>Session '{0}'. Invalidate.</value>
  </data>
  <data name="LogSessionXDisconnectedStateAttach" xml:space="preserve">
    <value>Session '{0}'. DisconnectedState.Attach</value>
  </data>
  <data name="LogSessionXDisconnectedStateConnect" xml:space="preserve">
    <value>Session '{0}'. DisconnectedState.Connect()</value>
  </data>
  <data name="LogSessionXDisconnectedStateDisconnect" xml:space="preserve">
    <value>Session '{0}'. DisconnectedState is disconnected</value>
  </data>
  <data name="LogSessionXDisconnectedStateApplyChanges" xml:space="preserve">
    <value>Session '{0}'. DisconnectedState.ApplyChanges</value>
  </data>
  <data name="Operations" xml:space="preserve">
    <value>Operations</value>
  </data>
  <data name="KeyMapping" xml:space="preserve">
    <value>Key mapping</value>
  </data>
  <data name="LogDisconnectedStateCancelChanges" xml:space="preserve">
    <value>DisconnectedState.CancelChanges</value>
  </data>
  <data name="LogChangesAreSuccessfullyApplied" xml:space="preserve">
    <value>Changes are successfully applied.</value>
  </data>
  <data name="ExKeyMustHaveExactType" xml:space="preserve">
    <value>Key must have exact type here.</value>
  </data>
  <data name="LogSyncContextMustHaveNoPendingActions" xml:space="preserve">
    <value>SyncContext must have no pending actions at this point.</value>
  </data>
  <data name="LogSessionXRemappingEntityKeys" xml:space="preserve">
    <value>Session '{0}'. Remapping entity keys.</value>
  </data>
  <data name="ExEntityIsAlreadyDetachedFromSession" xml:space="preserve">
    <value>Entity is already detached from Session. Likely, this is result of creation of new Entity with the same Key.</value>
  </data>
  <data name="ExUnableToCastItemOfTypeXToY" xml:space="preserve">
    <value>Unable to cast item of type '{0}' to '{1}' in queries.</value>
  </data>
  <data name="ExOriginIsNull" xml:space="preserve">
    <value>Origin is null.</value>
  </data>
  <data name="ExOriginIsNotNull" xml:space="preserve">
    <value>Origin is not null.</value>
  </data>
  <data name="ExOnlyOnePrimaryOperationCanBeLogged" xml:space="preserve">
    <value>Only one primary operation can be logged by each OperationContext instance.</value>
  </data>
  <data name="LogSessionXEntityWithKeyYIdentifiedAsZ" xml:space="preserve">
    <value>Session '{0}'. Identifying entity: Key = '{1}', identified as '{2}'.</value>
  </data>
  <data name="ExUnableToApplyVersionOnFieldXOfTypeY" xml:space="preserve">
    <value>Unable to apply VersionAttribute with VersionMode.Auto or Version.Mode.Manual mode set on field {0} of type {1}. Only VersionMode.Skip is allowed.</value>
  </data>
  <data name="ExInvalidScopeDisposalOrder" xml:space="preserve">
    <value>Invalid scope disposal order.</value>
  </data>
  <data name="ExNoOperationRegistrationScope" xml:space="preserve">
    <value>No operation registration scope. Use OperationRegistry.BeginRegistration method to open it.</value>
  </data>
  <data name="ExOnlyOneOperationCanBeRegisteredInEachScope" xml:space="preserve">
    <value>Only one operation can be registered in each scope.</value>
  </data>
  <data name="ExRunningOperationRegistrationMustBeFinished" xml:space="preserve">
    <value>Running operation registration must be finished before invocation of this method.</value>
  </data>
  <data name="ExYouMustEitherApplyOrCancelCachedChangesToChangeThisProperty" xml:space="preserve">
    <value>You must either apply or cancel cached changes before changing this property.</value>
  </data>
  <data name="LogFailedToAddSchemaHintXErrorY" xml:space="preserve">
    <value>Failed to add schema hint '{0}' to schema hint collection. The hint will be ignored.
Likely, the schema object (table, column, etc.) it references does not exists, because it was manually removed from the database.
Error: {1}</value>
  </data>
  <data name="LogSessionXVersionValidationFailedKeyYVersionZExpected3" xml:space="preserve">
    <value>Session '{0}'. Version validation failed: Key = '{1}', Version = '{2}' (expected version = '{3}').</value>
  </data>
  <data name="ExOperationIsNotRegisteredYet" xml:space="preserve">
    <value>Operation isn't registered yet. See Session.Oeprations.RegisterOperations().</value>
  </data>
  <data name="ExOperationStartedIsAlreadyCalledForThisOperation" xml:space="preserve">
    <value>OperatonStarted is alerady called for this operation.</value>
  </data>
  <data name="ExOperationIsNotMarkedAsStarted" xml:space="preserve">
    <value>Operation isn't marked as started. See Sessopn.Operations.OperationStarted() method.</value>
  </data>
  <data name="ExNullableAndNullableOnUpgradeCannotBeUsedWithXField" xml:space="preserve">
    <value>Nullable and NullableOnUpgrade flags can't be used with '{0}' field. They can be used only with reference-typed fields (except Structure descendants).</value>
  </data>
  <data name="XW0001" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ExUpgradeHintTargetFieldNotFound">
    <value><![CDATA[Upgrade hint error. Target field '{0}' not found.]]></value>
  </data>
  <data name="ExUpgradeHintTargetTypeNotFound">
    <value><![CDATA[Upgrade hint error. Target type '{0}' not found.]]></value>
  </data>
  <data name="ExUpgradeHintSourceTypeNotFound">
    <value><![CDATA[Upgrade hint error. Source type '{0}' not found.]]></value>
  </data>
  <data name="ExUpgradeHintSourceFieldNotFound">
    <value><![CDATA[Upgrade hint error. Source field '{0}' not found.]]></value>
  </data>
  <data name="ExOnlyPrefetchMethodSupportedButFoundX">
    <value><![CDATA[Only 'Prefetch(source, expression, params[] expressions)' method is supported within prefetch expression. But found '{0}'.]]></value>
  </data>
  <data name="ExUnabletoParsePrefetchExpressionX">
    <value><![CDATA[Unable to parse prefetch expression '{0}'.]]></value>
  </data>
  <data name="ExOnlyPropertAccessPrefetchOrAnonymousTypeSupportedButFoundX">
    <value><![CDATA[Only persistented property access, calls of Prefetch method or anonymous type constructors are supported, but found '{0}' expression.]]></value>
  </data>
  <data name="ExUnableToParseValueXForFieldY">
    <value xml:space="preserve">Unable to parse value '{0}' for field '{1}'</value>
  </data>
  <data name="EntityX">
    <value xml:space="preserve">Entity: {0};</value>
  </data>
  <data name="FieldX">
    <value xml:space="preserve"> Field: {0};</value>
  </data>
  <data name="ExUnableToSetIndexedFlagOnEntitySetFieldX">
    <value xml:space="preserve">Unable to set 'Indexed' flag on EntitySet field {0}.</value>
  </data>
  <data name="ExUnableToSetIndexedFlagOnStructureFieldX">
    <value xml:space="preserve">Unable to set 'Indexed' flag on Structure field {0}.</value>
  </data>
  <data name="ExOnlySecondaryIndexesCanBeDeclaredPartial">
    <value xml:space="preserve">Only secondary indexes can be declared partial.</value>
  </data>
  <data name="ExMemberXIsNotFoundCheckThatSuchMemberExists">
    <value xml:space="preserve">Member '{0}' is not found. Check that either static parameterless method or static property with such name exists.</value>
  </data>
  <data name="ExMemberXShouldReturnValueThatIsAssignableToLambdaExpression">
    <value xml:space="preserve">Member '{0}' should return value that is assignable to LambdaExpression</value>
  </data>
  <data name="ExLambdaExpressionReturnedByXShouldTakeOneParameterOfTypeYOrAnyBaseTypeOfIt">
    <value xml:space="preserve">LambdaExpression returned by '{0}' should take one parameter of type '{1}' or any base type of it</value>
  </data>
  <data name="ExLambdaExpressionReturnedByXShouldReturnValueThatIsAssignableToY">
    <value xml:space="preserve">LambdaExpression returned by '{0}' should return value that is assignable to '{1}'</value>
  </data>
  <data name="ExUnableToTranslateXInPartialIndexDefinitionForIndexYReasonZ">
    <value xml:space="preserve">Unable to translate '{0}' in partial index definition for index '{1}'. Reason: {2}.</value>
  </data>
  <data name="MemberAccessSequenceContainsNonPersistentFields">
    <value xml:space="preserve">member access sequence contains non-persistent fields</value>
  </data>
  <data name="ParametersOfTypeOtherThanXAreNotSupported">
    <value xml:space="preserve">parameters of type other than '{0}' are not supported</value>
  </data>
  <data name="ExpressionsOfTypeXAreNotSupported">
    <value xml:space="preserve">expressions of type '{0}' are not supported</value>
  </data>
  <data name="OnlyPrimitiveAndReferenceFieldsAreSupported">
    <value xml:space="preserve">only primitive and reference fields are supported</value>
  </data>
  <data name="FieldXDoesNotExistInTableForY">
    <value xml:space="preserve">field '{0}' does not exist in table for '{1}'</value>
  </data>
  <data name="ExTypeXHasMultipleClusteredIndexesY">
    <value xml:space="preserve">Type '{0}' has multiple clustered indexes: {1}</value>
  </data>
  <data name="ExTypeXDeclaresClusteredIndexYButOnlyRootTypeCanDeclareClusteredIndexInSingleTableHierarchy">
    <value xml:space="preserve">Type '{0}' declares clustered index '{1}', but only root type can declare clustered indexes in single table hierarhy</value>
  </data>
  <data name="ExIndexXCanNotBeBothPartialAndClustered">
    <value xml:space="preserve">Index '{0}' can not be both partial and clustered</value>
  </data>
  <data name="ExClusteredIndexCanNotBeDeclaredInInterfaceX">
    <value xml:space="preserve">Clustered index can not be declared in interface '{0}'</value>
  </data>
  <data name="ExMemberXIsNotSupported">
    <value xml:space="preserve">Member '{0}' is not supported</value>
  </data>
  <data name="ExpressionXShouldTakeYParameters">
    <value xml:space="preserve">Expression '{0}' should take {1} parameters</value>
  </data>
  <data name="ExEntityWithKeyXAlreadyExists">
    <value xml:space="preserve">Entity with key '{0}' already exists</value>
  </data>
  <data name="ExInvalidFieldNameX" xml:space="preserve">
    <value>Invalid field name '{0}'.</value>
  </data>
  <data name="ExCantCompileProviderX" xml:space="preserve">
    <value>Can't compile the provider '{0}'.</value>
  </data>
  <data name="ExXMustBeActive" xml:space="preserve">
    <value>'{0}' must be active.</value>
  </data>
  <data name="ExProviderMustBeEitherCompilableProviderOrExecutableProvider" xml:space="preserve">
    <value>Provider must be either CompilableProvider or ExecutableProvider</value>
  </data>
  <data name="ExAtLeastOneColumnIndexPairMustBeSpecified" xml:space="preserve">
    <value>At least one column index pair must be specified.</value>
  </data>
  <data name="ExCanNotCompileNoEnumerationContext" xml:space="preserve">
    <value>Can't compile - no active EnumerationContext exists.</value>
  </data>
  <data name="ExCanNotCompileNoCompiler" xml:space="preserve">
    <value>Can't compile - active CompilationContext has no Compiler (Compiler is null).</value>
  </data>
  <data name="ExCantOpenEnumerationScopeSinceThereIsNoCurrentCompilationContext" xml:space="preserve">
    <value>Can't open EnumerationScope, since there is no current CompilationContext.</value>
  </data>
  <data name="NotAvailable" xml:space="preserve">
    <value>n/a</value>
  </data>
  <data name="ExTypeOfExpressionReturnValueIsNotX" xml:space="preserve">
    <value>The type of the expression's return value is not '{0}'.</value>
  </data>
  <data name="ExNormalizedExpressionMustHaveXForm" xml:space="preserve">
    <value>The normalized boolean expression must have the '{0}' form.</value>
  </data>
  <data name="ExNormalizedExpressionMustBeRoot" xml:space="preserve">
    <value>The normalized boolean expression must be the root expression.</value>
  </data>
  <data name="ExNormalizedExpressionMustNotBeRoot" xml:space="preserve">
    <value>The normalized boolean expression must not be the root expression.</value>
  </data>
  <data name="ExXCantBeExecuted" xml:space="preserve">
    <value>{0} can't be executed on specified sources.</value>
  </data>
  <data name="ExParameterXIsNotATupleAccessExpression" xml:space="preserve">
    <value>Parameter '{0}' is not a tuple access expression</value>
  </data>
  <data name="ExValueOfParameterWCantBeXIfValueOfParameterYIsZ" xml:space="preserve">
    <value>The value of the parameter {0} can't be {1}, if the value of the parameter {2} is {3}.</value>
  </data>
  <data name="ExSelectProviderRemovesColumnsUsedForOrdering" xml:space="preserve">
    <value>The SelectProvider removes columns used for an ordering.</value>
  </data>
  <data name="ExAggregateXIsNotSupportedForTypeY" xml:space="preserve">
    <value>Aggregate '{0}' is not supported for type '{1}'</value>
  </data>
  <data name="RowNumberX" xml:space="preserve">
    <value>RowNumber{0}</value>
  </data>
  <data name="ExOrderingOfRecordsIsNotSpecifiedForRowNumberProvider" xml:space="preserve">
    <value>The ordering of records is not specified for RowNumberProvider.</value>
  </data>
  <data name="ExCantConvertXToY" xml:space="preserve">
    <value>Can't convert the {0} to the {1}.</value>
  </data>
  <data name="ExPredicateContainsAccessesToDifferentApplyParameters" xml:space="preserve">
    <value>Predicate contains accesses to different ApplyParameters.</value>
  </data>
  <data name="ExColumnsUsedByPredicateContainingApplyParameterAreRemoved" xml:space="preserve">
    <value>Columns used by the predicate containing ApplyParameter are removed.</value>
  </data>
  <data name="ExColumnsUsedByCalculatedColumnExpressionContainingApplyParameterAreRemoved" xml:space="preserve">
    <value>Columns used by the CalculatedColumn's expression containing the ApplyParameter are removed.</value>
  </data>
  <data name="ExOrderKeyNotFoundInMapping" xml:space="preserve">
    <value>Order key not found in mapping.</value>
  </data>
  <data name="ExFilterTupleDescriptorMistmatchesWithSourceMappingDescriptor" xml:space="preserve">
    <value>Filter tuple descriptor mistmatches with source mapping descriptor.</value>
  </data>
  <data name="ExUnableToInitializeJoinIndexProviderColumnsCountMismatch" xml:space="preserve">
    <value>Unable to initialize JoinIndexProvider. Columns count mismatch.</value>
  </data>
  <data name="ExColumnGroupCouldNotBeFound" xml:space="preserve">
    <value>Column group could not be found.</value>
  </data>
  <data name="ExOnlySingleColumnKeySupported" xml:space="preserve">
    <value>Only single-column key supported.</value>
  </data>
  <data name="ExSequenceContainsMoreThanOneElement" xml:space="preserve">
    <value>Sequence contains more than one element.</value>
  </data>
  <data name="ExCurrentCompilerIsNotSuitableForThisOperationMostLikelyThereIsNoActiveSession" xml:space="preserve">
    <value>Current compiler is not suitable for this operation, most likely there is no active Session.</value>
  </data>
  <data name="ExProcessingOfVoidProviderIsNotSupported">
    <value xml:space="preserve">Processing of VoidProvider is not supported.</value>
  </data>
  <data name="ExEmptyKeyColumnsCollection" xml:space="preserve">
    <value>KeyColumns collection is empty.</value>
  </data>
  <data name="ExColumnXContainsBothKeyAndValueCollections" xml:space="preserve">
    <value>Column "{0}" contains both key and value collections.</value>
  </data>
  <data name="ExCanNotFindReferenceToColumnX" xml:space="preserve">
    <value>Can not find reference to column "{0}".</value>
  </data>
  <data name="ExMoreThenOneKeyColumnReferenceToColumnX" xml:space="preserve">
    <value>KeyColumns collection contains more then one reference to column "{0}".</value>
  </data>
  <data name="ExReferencedColumnXDoesNotBelongToIndexY" xml:space="preserve">
    <value>Referenced column "{0}" does not belong to index "{1}".</value>
  </data>
  <data name="ExMoreThenOneValueColumnReferenceToColumnX" xml:space="preserve">
    <value>ValueColumns collection contains more then one reference to column "{0}".</value>
  </data>
  <data name="ExUndefinedTypeOfColumnX" xml:space="preserve">
    <value>Type of column "{0}" is undefined.</value>
  </data>
  <data name="ExUndefinedPrimaryKey" xml:space="preserve">
    <value>PrimaryKey is undefined.</value>
  </data>
  <data name="ExPrimaryKeyColumnCanNotBeNullable" xml:space="preserve">
    <value>Primary key column can not be nullable.</value>
  </data>
  <data name="ExUndefinedForeignKey" xml:space="preserve">
    <value>ForeignKey is undefined.</value>
  </data>
  <data name="ExInvalidForeignKeyStructure" xml:space="preserve">
    <value>Invalid ForeignKey structure: its column sequence do not match PrimaryKey column sequence.</value>
  </data>
  <data name="_Culture" xml:space="preserve">
    <value>Culture</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="Precision" xml:space="preserve">
    <value>Precision</value>
  </data>
  <data name="Scale" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="PropertyPairFormat" xml:space="preserve">
    <value>{0}: {1}</value>
  </data>
  <data name="Comma" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="ExInvalidDirectionValue" xml:space="preserve">
    <value>Invalid Direction value (Direction.None).</value>
  </data>
  <data name="ExInvalidPrimaryKeyColumnsCollection" xml:space="preserve">
    <value>PrimaryKeyColumns collection is invalid.</value>
  </data>
  <data name="ExInvalidIncludedColumnsCollection" xml:space="preserve">
    <value>IncludedColumns collection is invalid.</value>
  </data>
  <data name="ExMoreThenOneIncludedColumnReferenceToColumnX" xml:space="preserve">
    <value>IncludedColumns collection contains more then one reference to column "{0}".</value>
  </data>
  <data name="NullableMark" xml:space="preserve">
    <value>?</value>
  </data>
  <data name="ExInvalidPrimaryKeyStructure" xml:space="preserve">
    <value>Invalid PrimaryKeyInfo structure: sequence KeyColumns and ValueColumns do not match sequence of all the Columns of the table.</value>
  </data>
  <data name="ExInvalideIncrementValue" xml:space="preserve">
    <value>Increment value must be greater then zero.</value>
  </data>
  <data name="ExUndefinedTypeOfSequenceX" xml:space="preserve">
    <value>Type of sequence "{0}" is undefined.</value>
  </data>
  <data name="ExEmptyColumnsCollection" xml:space="preserve">
    <value>Columns collection is empty.</value>
  </data>
  <data name="NativeType">
    <value xml:space="preserve">Native type</value>
  </data>
  <data name="ExSpecifiedRedoDescriptorCantBeLogged" xml:space="preserve">
    <value>Specified RedoDescriptor can't be logged.</value>
  </data>
  <data name="LogUndoError" xml:space="preserve">
    <value>Error during Undo execution: descriptor {0}.</value>
  </data>
  <data name="ExConcurrencyConflict" xml:space="preserve">
    <value>Concurrency conflict.</value>
  </data>
  <data name="ExDeadlock" xml:space="preserve">
    <value>Deadlock was found.</value>
  </data>
  <data name="ExVersionConflict" xml:space="preserve">
    <value>Version conflict.</value>
  </data>
  <data name="ExVersionConflictEx" xml:space="preserve">
    <value>Version conflict on object {0}: expected: {1} = {2}, but it is {3}.</value>
  </data>
  <data name="ExAtomicContextIsSuspended" xml:space="preserve">
    <value>AtomicContext is suspended.</value>
  </data>
  <data name="ExOldActiveOperationIsStillRunning" xml:space="preserve">
    <value>You can't Activate new operation, since old ActiveOperation is still running.</value>
  </data>
  <data name="ExCantInvokeBlockingDescriptor" xml:space="preserve">
    <value>Blocking descriptor can't be invoked.</value>
  </data>
  <data name="ExAlreadyCompleted" xml:space="preserve">
    <value>UndoDescriptor is already completed.</value>
  </data>
    <data name="ExCompleteMustBeCalledJustOnce" xml:space="preserve">
    <value>Complete method must be called just once.</value>
  </data>
  <data name="ExContextMustBeActivated" xml:space="preserve">
    <value>Context is not activated.</value>
  </data>
  <data name="ExObjectAndContextAreIncompatible" xml:space="preserve">
    <value>The specified object and the context are incompatible.</value>
  </data>
  <data name="ExIncorrectStageValue" xml:space="preserve">
    <value>Incorrect Stage value: '{0}'.</value>
  </data>
  <data name="LogRelationSyncUndoError" xml:space="preserve">
    <value>Error during undoing the relation synchronization.</value>
  </data>
  <data name="ValueDoesNotMatchRegexPatternX" xml:space="preserve">
    <value>Value does not match regex pattern '{0}'.</value>
  </data>
  <data name="PropertyValueCanNotBeEmpty" xml:space="preserve">
    <value>{0}: value can not be empty.</value>
  </data>
  <data name="AspectExFieldConstraintCanNotBeAppliedToReadOnlyPropertyX" xml:space="preserve">
    <value>Field constraint can not be applied to read only property {0}.</value>
  </data>
  <data name="AspectExXDoesNotSupportYValueTypeLocationZ" xml:space="preserve">
    <value>'{0}' does not support '{1}' value type (location: {2}).</value>
  </data>
  <data name="X" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ExValidationFailed" xml:space="preserve">
    <value>Validation failed.</value>
  </data>
  <data name="PropertyValueCanNotBeNull" xml:space="preserve">
    <value>{0}: value can not be null.</value>
  </data>
  <data name="PropertyValueLengthMustBeInXYRange" xml:space="preserve">
    <value>{0}: length of the value must be in [{1} ... {2}] range.</value>
  </data>
  <data name="PropertyValueMustBeInXYRange" xml:space="preserve">
    <value>{0}: value must be in [{1} ... {2}] range.</value>
  </data>
  <data name="AspectExNoComparer" xml:space="preserve">
    <value>[{0}] attribute on '{1}' requires a comparer for type '{2}'.</value>
  </data>
  <data name="DateMustBeInThePast" xml:space="preserve">
    <value>Date must be in the past.</value>
  </data>
  <data name="ValueShouldBeInTheFuture" xml:space="preserve">
    <value>Value should be in the future.</value>
  </data>
  <data name="ValueShouldBeInThePast" xml:space="preserve">
    <value>Value should be in the past.</value>
  </data>
  <data name="ValueLengthCanNotBeGreaterThanX" xml:space="preserve">
    <value>Value length can not be greater than {0}.</value>
  </data>
  <data name="ValueLengthCanNotBeLessThanX" xml:space="preserve">
    <value>Value length can not be less than {0}.</value>
  </data>
  <data name="ValueLengthCanNotBeLessThanXOrGreaterThanY" xml:space="preserve">
    <value>Value length can not be less than {0} or greater than {1}.</value>
  </data>
  <data name="MaxOrMinPropertyShouldBeSpecified" xml:space="preserve">
    <value>'Max' or 'Min' property should be specified.</value>
  </data>
  <data name="ValueShouldNotBeEmpty" xml:space="preserve">
    <value>Value should not be empty.</value>
  </data>
  <data name="ValueShouldNotBeNull" xml:space="preserve">
    <value>Value should not be null.</value>
  </data>
  <data name="ValueShouldNotBeEmptyOrEmpty" xml:space="preserve">
    <value>Value should not be null or empty.</value>
  </data>
  <data name="FieldShouldBeOfComparableType" xml:space="preserve">
    <value>Field should be of comparable type.</value>
  </data>
  <data name="ValueShouldNotBeGreaterThanMax" xml:space="preserve">
    <value>Value should not be greater than {0}.</value>
  </data>
  <data name="ValueShouldNotBeLessThanMin" xml:space="preserve">
    <value>Value should not be less than {0}.</value>
  </data>
  <data name="ValueShouldNotBeLessThanMinOrGreaterThanMax" xml:space="preserve">
    <value>Value should not be less than {0} or greater than {1}.</value>
  </data>
  <data name="RegularExpressionPatternIsNotSpecified" xml:space="preserve">
    <value>Regular expression pattern is not specified.</value>
  </data>
  <data name="FailedToCreateRegularExpressionFromPatternX" xml:space="preserve">
    <value>Failed to create regular expression from pattern '{0}'.</value>
  </data>
  <data name="AspectExApplyingXToPropertyYFailedZ" xml:space="preserve">
    <value>Applying [{0}] to property '{1}' failed. {2}</value>
  </data>
  <data name="ExValidationContextIsInvalid" xml:space="preserve">
    <value>Validation context is in invalid state. This means that some validation error has happened, but later it was suppressed.</value>
  </data>
  <data name="AspectExXAndYPropertiesMustBeUsedTogetherLocationZ" xml:space="preserve">
    <value>'{0}' and '{1}' properties must be used together (location: {2}).</value>
  </data>
  <data name="AspectExBothLocalizableMessageResourceAndNotLocalizableMessageCanNotBeSpecifiedAtOnceLocationX" xml:space="preserve">
    <value>Both localizable message resource and not localizable message can not be specified at once (location: {0}).</value>
  </data>
  <data name="ExSqlServerBelow2005IsNotSupported" xml:space="preserve">
    <value>SQL Server below 2005 is not supported.</value>
  </data>
  <data name="ExSqlServerSupportsTrimmingOfSpaceCharactersOnly" xml:space="preserve">
    <value>SQL Server supports trimming of space characters only.</value>
  </data>
  <data name="ExInvalidBooleanStringX" xml:space="preserve">
    <value>Invalid boolean string '{0}'.</value>
  </data>
  <data name="ExMultipleLanguagesNotSupportedForFulltextColumnXOfIndexY" xml:space="preserve">
    <value>Multiple languages not supported for fulltext column {0} of index {1}.</value>
  </data>
  <data name="ExNoMessageTemplateIsRegisteredForCodeX">
    <value xml:space="preserve">No message template is registered for code: {0}</value>
  </data>
  <data name="ExTablePropertyIsNotSet" xml:space="preserve">
    <value>Table is not set.</value>
  </data>
  <data name="ExInvalidExpressionType" xml:space="preserve">
    <value>Invalid expression type.</value>
  </data>
  <data name="ExUnboundColumn" xml:space="preserve">
    <value>Unbound column '{0}'.</value>
  </data>
  <data name="ExSizeShouldBeNotNegativeValue" xml:space="preserve">
    <value>Size should be not negative value.</value>
  </data>
  <data name="ExScaleShouldBeNonNegativeValue" xml:space="preserve">
    <value>Scale should be non-negative value.</value>
  </data>
  <data name="ExPrecisionShouldBeNonNegativeValue" xml:space="preserve">
    <value>Precision should be non-negative value.</value>
  </data>
  <data name="ExTheScaleMustBeLessThanOrEqualToPrecision" xml:space="preserve">
    <value>The scale must be less than or equal to precision.</value>
  </data>
  <data name="ExLengthShouldBeNotNegativeValue" xml:space="preserve">
    <value>Length should be not negative value.</value>
  </data>
  <data name="ExPositionValueShouldBeGreaterThanZero" xml:space="preserve">
    <value>Position value should be greater than zero.</value>
  </data>
  <data name="ExInvalidUsageOfTheRowCountArgument" xml:space="preserve">
    <value>Invalid usage of the "rowCount" argument.</value>
  </data>
  <data name="ExInvalidUsageOfTheOrientationArgument" xml:space="preserve">
    <value>Invalid usage of the "orientation" argument.</value>
  </data>
  <data name="ExReferencedColumnsCountCantBeLessThenOne" xml:space="preserve">
    <value>Referenced columns count cannot be less then one.</value>
  </data>
  <data name="ExReferencingColumnsCountCantBeLessThenOne" xml:space="preserve">
    <value>Referencing columns count cannot be less then one.</value>
  </data>
  <data name="ExRowAmountShouldBePositiveNumber" xml:space="preserve">
    <value>Row amount should be positive number.</value>
  </data>
  <data name="ExCircularReferenceDetected" xml:space="preserve">
    <value>Circular reference is detected.</value>
  </data>
  <data name="ExTheDataTypeMustBeExactNumericWithScale0" xml:space="preserve">
    <value>The data type must be exact numeric with scale 0.</value>
  </data>
  <data name="ExLiteralTypeXIsNotSupported" xml:space="preserve">
    <value>Literal type '{0}' is not supported.</value>
  </data>
  <data name="LogUnableToGetDefaultNodeComparerForTypeXxx" xml:space="preserve">
    <value>Unable to get default SQL comparer for type {0}.</value>
  </data>
  <data name="ExJoinExpressionShouldBeNullForCrossApplyAndOuterApply" xml:space="preserve">
    <value>Join expression should be NULL for CROSS APPLY &amp; OUTER APPLY.</value>
  </data>
  <data name="ExNodeTypeIsUnknown" xml:space="preserve">
    <value>Node type is unknown.</value>
  </data>
  <data name="ExSqlContainerExpressionCanNotBeCompiled" xml:space="preserve">
    <value>Sql container expression can not be compiled.</value>
  </data>
  <data name="ExSpecifiedConnectionDoesNotBelongToThisDriver" xml:space="preserve">
    <value>Specified connection does not belong to this driver.</value>
  </data>
  <data name="ExTranslationOfLiteralOfTypeXIsNotSupported" xml:space="preserve">
    <value>Translation of literal of type '{0}' is not supported.</value>
  </data>
  <data name="ExFunctionXIsNotSupported" xml:space="preserve">
    <value>Function '{0}' is not supported.</value>
  </data>
  <data name="ExPartOfUrlContainsForbiddenCharacters" xml:space="preserve">
    <value>Part of URL contains forbidden characters. Forbidden characters: </value>
  </data>
  <data name="ExOperationXIsNotSupported" xml:space="preserve">
    <value>Operation '{0}' is not supported</value>
  </data>
  <data name="ExSpecifiedPrecisionXIsGreaterThanMaximumSupportedByStorageY" xml:space="preserve">
    <value>Specified precision ({0}) is greater than maximum supported by storage ({1}).</value>
  </data>
  <data name="ExTableAlreadyHasSpecifiedName" xml:space="preserve">
    <value>Table already has specified name.</value>
  </data>
  <data name="ExColumnAlreadyHasSpecifiedName" xml:space="preserve">
    <value>Column already has specified name.</value>
  </data>
  <data name="ExIsolationLevelXIsNotSupported" xml:space="preserve">
    <value>Isolation level '{0}' is not supported</value>
  </data>
  <data name="ExLockXIsNotSupported" xml:space="preserve">
    <value>Lock '{0}' is not supported</value>
  </data>
  <data name="ExOnlySqlLiteralOrSqlPlaceholderCanBeUsedInLimitOffset" xml:space="preserve">
    <value>Only SqlLiteral or SqlPlaceholder can be used in Limit/Offset</value>
  </data>
  <data name="ExNameForParameterXIsNotFound" xml:space="preserve">
    <value>Name for parameter '{0}' is not found'</value>
  </data>
  <data name="ExValueForPlaceholderXIsNotSet" xml:space="preserve">
    <value>Value for placeholder '{0}' is not set.</value>
  </data>
  <data name="ExItemsForCycleXAreNotSpecified" xml:space="preserve">
    <value>Items for cycle '{0}' are not specified.</value>
  </data>
  <data name="ExTransactionShouldBeActive" xml:space="preserve">
    <value>Transaction should be active</value>
  </data>
  <data name="ExTransactionShouldNotBeActive" xml:space="preserve">
    <value>Transaction should not be active</value>
  </data>
  <data name="ExTypesOfValuesAreDifferent" xml:space="preserve">
    <value>Types of values are different</value>
  </data>
  <data name="ExThisStorageDoesNotSupportXValuesLessThanYSuppliedValueIsZ" xml:space="preserve">
    <value>This storage does not support '{0}' values less than '{1}'. Supplied value is '{2}'.</value>
  </data>
  <data name="ExThisStorageDoesNotSupportXValuesGreatherThanYSuppliedValueIsZ" xml:space="preserve">
    <value>This storage does not support '{0}' values greather than '{1}'. Supplied value is '{2}'.</value>
  </data>
  <data name="ExCanNotReadDatabaseAndSchemaNames" xml:space="preserve">
    <value>Can not read database and schema names</value>
  </data>
  <data name="ExThisStorageDoesNotSupportX" xml:space="preserve">
    <value>This storage does not support '{0}'.</value>
  </data>
  <data name="FullTextQueries" xml:space="preserve">
    <value>Full text queries</value>
  </data>
  <data name="ExIncrementMustNotBeZero" xml:space="preserve">
    <value>Increment must not be 0.</value>
  </data>
  <data name="ExTheDataTypeMustBeExactNumericWithoutScaleOrWithZeroScale" xml:space="preserve">
    <value>The data type must be exact numeric without scale or with zero scale.</value>
  </data>
  <data name="ExNameMustBeNotNullOrEmpty" xml:space="preserve">
    <value>Name must be not null or empty.</value>
  </data>
  <data name="ExSchemaMustBeNotNull" xml:space="preserve">
    <value>Schema must be not null.</value>
  </data>
  <data name="ExTheMaximumValueMustBeGreaterThanTheMinimumValue" xml:space="preserve">
    <value>The maximum value must be greater than the minimum value.</value>
  </data>
  <data name="ExTheStartValueShouldBeBetweenTheMinimumAndMaximumValue" xml:space="preserve">
    <value>The start value should be between the minimum and maximum value.</value>
  </data>
  <data name="ExInvalidActionType" xml:space="preserve">
    <value>Invalid action type.</value>
  </data>
  <data name="ExColumnBelongsToOtherTable" xml:space="preserve">
    <value>Column belongs to other table.</value>
  </data>
  <data name="ExInvalidConstraintType" xml:space="preserve">
    <value>Invalid constraint type.</value>
  </data>
  <data name="ExConstraintBelongsToOtherTable" xml:space="preserve">
    <value>Constraint belongs to other table.</value>
  </data>
  <data name="ExConstraintBelongsToOtherDomain" xml:space="preserve">
    <value>Constraint belongs to other domain.</value>
  </data>
  <data name="ExInvalidArgumentsScaleAndPrecisionShouldBeUsedTogether" xml:space="preserve">
    <value>Invalid arguments: 'scale' and 'precision' should be used together</value>
  </data>
  <data name="ExInvalidArgumentsPrecisionAndLengthShouldNotBeUsedTogether" xml:space="preserve">
    <value>Invalid arguments: 'precision' and 'length' should not be used together</value>
  </data>
  <data name="ExInvalidArgumentsNonNullTypeNameIsAllowedIfAndOnlyIfTypeEqualsSqlTypeUnknown" xml:space="preserve">
    <value>Invalid arguments: non-null 'typeName' is allowed if and only if 'type' equals 'SqlType.Unknown'</value>
  </data>
  <data name="TypeX" xml:space="preserve">
    <value>Type: {0};</value>
  </data>
  <data name="DatabaseX" xml:space="preserve">
    <value> Database: {0};</value>
  </data>
  <data name="TableX" xml:space="preserve">
    <value> Table: {0};</value>
  </data>
  <data name="ColumnX" xml:space="preserve">
    <value> Column: {0};</value>
  </data>
  <data name="ValueX" xml:space="preserve">
    <value> Value: {0};</value>
  </data>
  <data name="ConstraintX" xml:space="preserve">
    <value> Constraint: {0};</value>
  </data>
  <data name="UnableToInvalidateSessionStateNewlyCreatedEntitiesAreAttachedToSession">
    <value xml:space="preserve">Unable to invalidate session state: newly created entities are attached to session.</value>
  </data>
  <data name="ExDefaultSchemaShouldBeSpecifiedWhenMultischemaOrMultidatabaseModeIsActive">
    <value xml:space="preserve">DefaultSchema should be specified when multi-schema or multi-database mode is active.</value>
  </data>
  <data name="ExDefaultSchemaAndDefaultDatabaseShouldBeSpecifiedWhenMultidatabaseModeIsActive">
    <value xml:space="preserve">DefaultSchema and DefaultDatabase should be specified when multi-database mode is active.</value>
  </data>
  <data name="LogProcessingMappingRules">
    <value xml:space="preserve">Processing mapping rules</value>
  </data>
  <data name="ExXImplementorsDontBelongToAnyHierarchy">
    <value xml:space="preserve">{0} implementors don't belong to any hierarchy.</value>
  </data>
  <data name="ExImplementorsOfXInterfaceBelongToHierarchiesOneOfWhichIncludesTypeIdButAnotherDoesntYZ">
    <value xml:space="preserve">Implementors of {0} interface belong to hierarchies one of which includes TypeId, but another doesn't: {1} &amp; {2}.</value>
  </data>
  <data name="ExImplementorsOfXInterfaceBelongToHierarchiesWithDifferentKeyStructureYZ">
    <value xml:space="preserve">Implementors of {0} interface belong to hierarchies with different key structure: {1} &amp; {2}.</value>
  </data>
  <data name="LogValidatingMappingConfiguration">
    <value xml:space="preserve">Validating mapping configuration</value>
  </data>
  <data name="ExSingleHierarchyIsMappedToMultipleDatabasesXY">
    <value xml:space="preserve">Single hierarchy is mapped to multiple databases: {0}, {1}</value>
  </data>
  <data name="ExInterfaceXIsImplementedByTypesMappedToDifferentDatabasesYZ">
    <value xml:space="preserve">Interface '{0}' is implemented by types mapped to different databases: {1}, {2}</value>
  </data>
  <data name="ExMultischemaModeIsActiveButNoSchemaSpecifiedForX">
    <value xml:space="preserve">Multi-schema mode is active, but no schema specified for '{0}'</value>
  </data>
  <data name="ExMultidatabaseModeIsActiveButNoDatabaseSpecifiedForX">
    <value xml:space="preserve">Multi-database mode is active, but no database specified for '{0}'</value>
  </data>
  <data name="ExCyclicDependencyBetweenDatabasesFoundX">
    <value xml:space="preserve">Cyclic dependency between databases found: {0}</value>
  </data>
  <data name="LogProcessingX">
    <value xml:space="preserve">Processing '{0}'</value>
  </data>
  <data name="LogReusingCachedMappingInformationForX">
    <value xml:space="preserve">Reusing cached mapping information for '{0}'</value>
  </data>
  <data name="ApplyingRuleXToY">
    <value xml:space="preserve">Applying rule '{0}' to '{1}'</value>
  </data>
  <data name="LogCalculatingDatabaseDependencies">
    <value xml:space="preserve">Calculating database dependencies</value>
  </data>
  <data name="ExTemporaryTablesAreNotSupportedByCurrentStorage">
    <value xml:space="preserve">Temporary tables are not supported by current storage</value>
  </data>
  <data name="TypeIdRangeForDatabaseXYZIsExhausted">
    <value xml:space="preserve">Type ID range for database '{0}' ({1}, {2}) is exhausted</value>
  </data>
  <data name="LogFullTextIndexesAreNotSupportedByCurrentStorageIgnoringIndexX">
    <value xml:space="preserve">Full text indexes are not supported by current storage, ignoring index '{0}'</value>
  </data>
  <data name="ExExceptionHasBeenThrownByTheParameterValueAccessor">
    <value xml:space="preserve">Exception has been thrown by the parameter value accessor.</value>
  </data>
  <data name="ExTypeDiscriminatorIsNotFoundForXType">
    <value xml:space="preserve">Type discriminator field is not found for '{0}' type</value>
  </data>
  <data name="ExCurrentStorageDoesNotSupportChangingColumnTypes">
    <value xml:space="preserve">Current storage does not support changing column types</value>
  </data>
  <data name="ExDirectQueryingForEntitySetInCompiledQueriesIsNotSupportedUseQueryEndpointItemsInstead">
    <value xml:space="preserve">Direct querying for entity set in compiled queries is not supported, use QueryEndpoint.Items() instead.</value>
  </data>
  <data name="ExCompilerXHasTooManyParameters" xml:space="preserve">
    <value>Compiler {0} has too many parameters.</value>
  </data>
  <data name="ExCompilerXShouldHaveMemberInfoParameter" xml:space="preserve">
    <value>Compiler {0} should have first parameter of type MemberInfo</value>
  </data>
  <data name="ExCompilerXShouldReturnY" xml:space="preserve">
    <value>Compiler {0} should return {1}.</value>
  </data>
  <data name="ExCompilerXShouldHaveParameterYOfTypeZ" xml:space="preserve">
    <value>Compiler {0} should have parameter {1} of type {2}</value>
  </data>
  <data name="ExCompilerXHasInvalidTargetType" xml:space="preserve">
    <value>Compiler {0} has invalid target type: target type should be either non-generic or generic type definition.</value>
  </data>
  <data name="ExCompilerXHasInvalidTargetMember" xml:space="preserve">
    <value>Compiler {0} has invalid target member.</value>
  </data>
  <data name="ExCompilerXShouldHaveThisParameter" xml:space="preserve">
    <value>Compiler {0} should have "this" parameter.</value>
  </data>
  <data name="ExTargetMemberIsNotFoundForCompilerX" xml:space="preserve">
    <value>Target member is not found for compiler {0}</value>
  </data>
  <data name="ExCompilerForXIsAlreadyRegistered" xml:space="preserve">
    <value>Compiler for {0} is already registered.</value>
  </data>
  <data name="ExTypeXShouldNotBeGeneric" xml:space="preserve">
    <value>Type '{0}' should not be generic.</value>
  </data>
  <data name="LogFailedToExtractMetadataFromXYZ">
    <value xml:space="preserve">Failed to extract metadata from '{0}.{1}': {2}</value>
  </data>
  <data name="ExThisMethodShouldNotBeCalledUseApplySessionExpressionInstead">
    <value xml:space="preserve">This method should not be called, use Apply(Session, Expression) instead</value>
  </data>
  <data name="ExOptionXIsMutuallyExclusiveWithOptionY">
    <value xml:space="preserve">Option '{0}' is mutually exclusive with option '{1}'</value>
  </data>
  <data name="ExExceptionHasBeenThrownByTheUserMemberCompiler">
    <value xml:space="preserve">Exception has been thrown by the user member compiler.</value>
  </data>
  <data name="ExSessionXStillUsesSingleAvailableConnection">
    <value xml:space="preserve">Session '{0}' still uses single available connection.</value>
  </data>
  <data name="LogUnableToCloseSingleAvailableConnectionItIsStillUsedBySessionX">
    <value xml:space="preserve">Unable to close single available connection: it is still used by session '{0}'.</value>
  </data>
	<data name="ExValidateVersionEqTrueIsIncompatibleWithPersistRequestKindEqInsert">
		<value xml:space="preserve">validateVersion=true is incompatible with PersistRequestKind=Insert</value>
	</data>
	<data name="ExBatchingCommandProcessorDoesNotSupportValidationOfNumberOfAffectedRows">
		<value xml:space="preserve">BatchingCommandProcessor does not support validation of number of affected rows.</value>
	</data>
  <data name="ExUnableToResolveSchemaForNodeXPleaseVerifyThatThisSchemaExists">
    <value xml:space="preserve">Unable to resolve schema for node '{0}'. Please verify that this schema exists.</value>
  </data>
  <data name="ExUnableToResolveDatabaseForNodeXPleaseVerifyThatThisDatabaseExists">
    <value xml:space="preserve">Unable to resolve database for node '{0}'. Please verify that this database exists.</value>
  </data>
  <data name="ExInvalidSortExpressionX">
    <value xml:space="preserve">Invalid sort expression '{0}'</value>
  </data>
  <data name="ExNonEnumParametersForEnumHasFlagAreNotSupported">
    <value xml:space="preserve">Non-enum parameters for Enum.HasFlag are not supported</value>
  </data>
  <data name="ExNonLinqCallsAreNotSupportedWithinQueryExecuteDelayed">
    <value xml:space="preserve">Non-LINQ calls are not supported within Query.ExecuteDelayed</value>
  </data>
  <data name="ExIgnoreRuleXMustBeAppliedToColumnOrTable">
    <value xml:space="preserve">Ignore rule '{0}' must be applied to column or table.</value>
  </data>
  <data name="ExTableXCantBeRemovedDueToForeignKeyYOfIgnoredTableOrColumn">
    <value xml:space="preserve">Table '{0}' can't be removed due to the foreign key '{1}' of a ignored table or column.</value>
  </data>
  <data name="ExTableXCantBeRemovedDueToTheIgnoredColumnY">
    <value xml:space="preserve">Table '{0}' can't be removed due to the ignored column '{1}'.</value>
  </data>
  <data name="FieldShouldBeOfTypeX">
    <value xml:space="preserve">Field should be of type '{0}'.</value>
  </data>
  <data name="ExValidatorXConfigurationFailedOnTypeYWithMessageZ">
    <value xml:space="preserve">Validator '{0}' configuration failed on type '{1}'. {2}</value>
  </data>
  <data name="ExValidatorXConfigurationFailedOnTypeYFieldZWithMessageA">
    <value xml:space="preserve">Validator '{0}' configuration failed on type '{1}' field '{2}'. {3}</value>
  </data>
  <data name="ValueShouldBeAValidEMail">
    <value xml:space="preserve">Value should be a valid e-mail.</value>
  </data>
  <data name="Validators">
    <value xml:space="preserve">Validators</value>
  </data>
  <data name="ExConnectionStringWithNameXIsNotFound" xml:space="preserve">
    <value>Connection string with name '{0}' is not found.</value>
  </data>
  <data name="ExConnectionStringWithNameXIsNullOrEmpty" xml:space="preserve">
    <value>Connection string with name '{0}' is null or empty.</value>
  </data>
  <data name="ExUnableToProcessRecycledFieldDefinitionXOwnerTypeIsNotRegisteredInModel">
    <value xml:space="preserve">Unable to process recycled field definition '{0}': owner type is not registered in model.</value>
  </data>
	<data name="ExDateTimeToStringMethodIsNotSupported">
		<value xml:space="preserve">DateTime.ToString() method is not supported, use the DateTime.ToString("s").</value>
	</data>
	<data name="ExTranslationOfDateTimeToStringWithArbitraryArgumentsIsNotSupported">
		<value xml:space="preserve">Translation of DateTime.ToString(string) with arbitrary arguments is not supported. Use DateTime.ToString("s").</value>
	</data>
  <data name="ExChainedBufferRemoveMethodIsNotSupported">
    <value xml:space="preserve">ChainedBuffer.Remove() method is not supported.</value>
  </data>
  <data name="ExInstanceIsEmpty">
    <value xml:space="preserve">Instance is empty.</value>
  </data>
  <data name="ExLogManagerAlreadyInitialized">
    <value xml:space="preserve">LogManager already initialized.</value>
  </data>
  <data name="ExLogManagerMustBeInitializedBeforeUsing">
    <value xml:space="preserve">LogManager must be initialized before using.</value>
  </data>
  <data name="ExProviderXDoesNotImplementLogProviderClass">
    <value xml:space="preserve">Provider '{0}' does not implement LogProvider class.</value>
  </data>
  <data name="ExUnableToGetTypeOfProviderByNameX">
    <value xml:space="preserve">Unable to get type of provider by name '{0}'.</value>
  </data>
  <data name="ExGroupByOverloadXIsNotSupported">
    <value xml:space="preserve">GroupBy overload '{0}' is not supported.</value>
  </data>
  <data name="LogSpecificationOfTypeColumnForFulltextColumnIsNotSupportedByCurrentStorageIgnoringTypeColumnSpecificationForColumnX">
    <value xml:space="preserve">Specification of type column for fulltext column is not supported by current storage. Ignoring type column specification for column '{0}'.</value>
  </data>
  <data name="ExTypeColumnXForFulltextColumnYMustBeTypeOfString">
    <value xml:space="preserve">Type column '{0}' for fulltext column'{1}' must be type of string.</value>
  </data>
  <data name="ExKeyGeneratorsXAndYHaveTheSameSeedValue">
    <value xml:space="preserve">Key generators '{0}' and '{1}' have the same seed value.</value>
  </data>
  <data name="ExCurrentTypeXIsNotSupported">
    <value xml:space="preserve">Current type '{0}' is not supported.</value>
  </data>
  <data name="ExCurrentTypeOfExpressionXIsNotSupported">
    <value xml:space="preserve">Current type of expression '{0}' is not supported.</value>
  </data>
  <data name="ExTypeOfEntityStoredInKeyIsUndefined">
    <value xml:space="preserve">Type of entity stored in Key is undefined.</value>
  </data>
  <data name="ExAssemblyVersionMismatchMainAssemblyXYExtensionsAssemblyAB" xml:space="preserve">
    <value>Assembly version mismatch: main assembly '{0} {1}', extension assembly '{2} {3}'.</value>
  </data>
  <data name="ExResultIsNotAvailable" xml:space="preserve">
    <value>Result is not available.</value>
  </data>
  <data name="LogAsyncOperationError" xml:space="preserve">
    <value>Async operation error.</value>
  </data>
  <data name="ExDefaultStorageNodeCanNotBeRemoved" xml:space="preserve">
    <value>Default storage node can not be removed.</value>
  </data>
  <data name="ExInvalidNodeIdentifier" xml:space="preserve">
    <value>Invalid node identifier.</value>
  </data>
  <data name="ExStorageNodeWithIdXIsNotFound" xml:space="preserve">
    <value>Storage node with id '{0}' is not found.</value>
  </data>
  <data name="ExStorageNodeIsAlreadySelected" xml:space="preserve">
    <value>Storage node is already selected.</value>
  </data>
  <data name="ExTypeXIsNotRegistered">
    <value xml:space="preserve">Type '{0}' is not registered.</value>
  </data>
  <data name="ExSchemaMappingRequiresMultischemaDomainConfiguration" xml:space="preserve">
    <value>Schema mapping requires multischema domain configuration. Please provide at least DefaultSchema setting.</value>
  </data>
  <data name="ExDatabaseMappingRequiresMultidatabaseDomainConfiguration" xml:space="preserve">
    <value>Database mapping requires multidatabase domain configuration. Please provide at least DefaultDatabase and DefaultSchema settings.</value>
  </data>
  <data name="ExUnableToDefineTypeIdentifierXForTypeYTypeIsNotExists">
    <value xml:space="preserve">Unable to define type identifier '{0}' for type '{1}'. Type is not exists.</value>
  </data>
  <data name="ExUserDefinedTypeIdentifierXForTypeYLessThan100">
    <value xml:space="preserve">User defined type identifier '{0}' for type '{1}'  less then 100.</value>
  </data>
  <data name="ExCustomTypeIdentifierXOfTypeYBeyongsTheLimitsDefinedForDatabase">
    <value xml:space="preserve">Custom type identifier '{0}' of type '{1}' beyongs the limits defined for database.</value>
  </data>
  <data name="ExCustomTypeIdentifierXOfTypeYConflictsWithTypeZInExtractedMapOfTypes">
    <value xml:space="preserve">Custom type identifier '{0}' of type '{1}' conflicts with type '{2}' in extracted map of types.</value>
  </data>
  <data name="ExStorageIsNotSupportedLimitationOfRowCountToUpdate">
    <value xml:space="preserve">Storage is not supported limitation of row count to update.</value>
  </data>
  <data name="ExStorageIsNotSupportedLimitationOfRowCountToDelete">
    <value xml:space="preserve">Storage is not supported limitation of row count to delete.</value>
  </data>
  <data name="ExUnableToRemapOneOfFilteredColumns" xml:space="preserve">
    <value>Unable to remap one of filtered columns.</value>
  </data>
  <data name="ExUnableToFindTypeXInCurrentModel" xml:space="preserve">
    <value>Unable to find type '{0}' in current model.</value>
  </data>
  <data name="UnableToFindColumnXInTypeYOfCurrentModel" xml:space="preserve">
    <value>Unable to find column '{0}' of type '{1}' of current model.</value>
  </data>
  <data name="ExTranslationOfXMethodDoesNotSupportAnyTypeOfParameterButY" xml:space="preserve">
    <value>Translation of {0} method does not support any parameter type, but {1}.</value>
  </data>
  <data name="ExReferenceRregistrationErrorReferenceRemovalIsAlreadyRegistered" xml:space="preserve">
    <value>Reference registration error: Reference removal is already registered.</value>
  </data>
  <data name="ExReferenceRegistrationErrorReferenceAdditionIsAlreadyRegistered" xml:space="preserve">
    <value>Reference registration error: Reference addition is already registered.</value>
  </data>
  <data name="ExCollectionShouldContainAtLeastXElements" xml:space="preserve">
    <value>Collection should contain at least {0} elements.</value>
  </data>
  <data name="TypeXIsNotSupportedYNode" xml:space="preserve">
    <value>Type '{0}' is not supported '{1}' node.</value>
  </data>
  <data name="ExTermWeightValueMustBeBetweenXAndY" xml:space="preserve">
    <value>Term weight value must be between {0} and {1}</value>
  </data>
  <data name="ExCurrentProviderDoesNotSupportContainsTableFunctionality" xml:space="preserve">
    <value>Current provider does not support ContainsTable functionality.</value>
  </data>
  <data name="ExArgumentCannotBeWhiteSpacesOnlyString" xml:space="preserve">
    <value>Argument cannot be white spaces only string.</value>
  </data>
  <data name="ExCollectionCannotContainAnyNeitherNullOrEmptyStringValues" xml:space="preserve">
    <value>Collection cannot contain any neither null or empty string values.</value>
  </data>
  <data name="FieldXIsComplexAndCannotBeUsedForSearch" xml:space="preserve">
    <value>Field '{0}' is complex and cannot be used for search.</value>
  </data>
  <data name="ExXIsNotSuitableFieldFoFullTextSearch" xml:space="preserve">
    <value>'{0}' is not suitable field for full-text search</value>
  </data>
  <data name="ExFieldAccessExpressionXDoesNotAccessToYTypeMembers" xml:space="preserve">
    <value>Field access expression '{0}'  does not access to '{1}' type members.</value>
  </data>
    <data name="ExUnexpectedTypeOfParameter" xml:space="preserve">
    <value>Unexpected type of parameter.</value>
  </data>
    <data name="ExUnableToGetTableColumnInstanceFromIndex" xml:space="preserve">
    <value>Unable to get TableColumn instance from index.</value>
  </data>
  <data name="ExMoreThanOneEnabledXIsProvided" xml:space="preserve">
    <value>More than one enabled {0} is provided.</value>
  </data>
  <data name="ExNameValueReadingOrSettingIsDenied" xml:space="preserve">
    <value>Name value reading or setting is denied.</value>
  </data>
  <data name="ExDbNameValueReadingOrSettingIsDenied" xml:space="preserve">
    <value>DbName value reading or setting is denied.</value>
  </data>
  <data name="ExExtractedAndTargetSchemasAreEqualButThereAreChangesInTypeIdentifiersSet" xml:space="preserve">
    <value>Extracted and target schemas are equal but there are changes in type identifiers set.</value>
  </data>
  <data name="LogGivenConnectionIsCorruptedTryingToRestoreTheConnection" xml:space="preserve">
    <value>Given connection is corrupted. Trying to restore the connection.</value>
  </data>
    <data name="LogConnectionRestoreFailed" xml:space="preserve">
    <value>Connection restore failed.</value>
  </data>
    <data name="LogConnectionSuccessfullyRestored" xml:space="preserve">
    <value>Connection successfully restored.</value>
  </data>
  <data name="ExUnableToSaveModifiedEntitesBecauseOfIncompleteAsynchronousQueries" xml:space="preserve">
    <value>Unable to save modified entites because some asynchronous query is incomplete. Make sure you awaited started asynchronous queries before persisting any changes.</value>
  </data>
  <data name="ExUnableToSaveModifiedEntitesBecauseSomeAsynchronousQueryIsIncomplete" xml:space="preserve">
    <value>Unable to save modified entites because some asynchronous query is incomplete. Make sure you awaited asyncronous queries before persisting any changes.</value>
  </data>
</root>