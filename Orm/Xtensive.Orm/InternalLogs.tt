<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
using System;
using Xtensive.Diagnostics;
using Xtensive.Orm.Logging;

namespace Xtensive
{
<#
	foreach (var item in pairs)
	{
#>
  internal static class <#= item.Item1 #>
  {
    private static string Name = "<#= item.Item2 #>";
    private static readonly BaseLog instance;

    public static BaseLog Instance {
      get { return instance; }
    }

    public static bool IsLogged(LogEventTypes type)
    {
      return true;
    }

    public static IDisposable DebugRegion(string format, params object[] args)
    {
      return instance.DebugRegion(format, args);
    }

    public static void Debug(string format, params object[] args)
    {
      instance.Debug(format, args);
    }

    public static Exception Debug(Exception exception, string format, params object[] args)
    {
      instance.Debug(format, args, exception);
      return exception;
    }

    public static Exception Debug(Exception exception)
    {
      instance.Debug(null, null, exception);
      return exception;
    }

    public static IDisposable InfoRegion(string format, params object[] args)
    {
      return instance.InfoRegion(format, args);
    }

    public static void Info(string format, params object[] args)
    {
      instance.Info(format, args);
    }

    public static Exception Info(Exception exception, string format, params object[] args)
    {
      instance.Info(format, args, exception);
      return exception;
    }

    public static Exception Info(Exception exception)
    {
      instance.Info(null, null, exception);
      return exception;
    }

    public static void Warning(string format, params object[] args)
    {
      instance.Warn(format, args);
    }

    public static Exception Warning(Exception exception, string format, params object[] args)
    {
      instance.Warn(format, args, exception);
      return exception;
    }

    public static Exception Warning(Exception exception)
    {
      instance.Warn(null, null, exception);
      return exception;
    }

    public static void Error(string format, params object[] args)
    {
      instance.Error(format, args);
    }

    public static Exception Error(Exception exception, string format, params object[] args)
    {
      instance.Error(format, args, exception);
      return exception;
    }

    public static Exception Error(Exception exception)
    {
      instance.Error(null, null, exception);
      return exception;
    }

    public static void FatalError(string format, params object[] args)
    {
      instance.Fatal(format, args);
    }

    public static Exception FatalError(Exception exception, string format, params object[] args)
    {
      instance.Fatal(format, args, exception);
      return exception;
    }

    public static Exception FatalError(Exception exception)
    {
      instance.Fatal(null, null, exception);
      return exception;
    }

    static <#= item.Item1 #>()
    {
      LogManager.AutoInitialize();
      instance = LogManager.GetLog(Name);
    }
  }

<#}#>
}
 <#+
 Tuple<string, string>[] pairs = new Tuple<string, string>[] {
   new Tuple<string, string>("OrmLog", "Xtensive.Orm"),
   new Tuple<string, string>("UpgradeLog", "Xtensive.Orm.Upgrade"), 
   new Tuple<string, string>("BuildLog", "Xtensive.Orm.Building"),
   new Tuple<string, string>("SqlLog", "Xtensive.Storage.Providers.Sql"),
   new Tuple<string, string>("CoreLog", "Xtensive.Core"),
   new Tuple<string, string>("TestLog", "Xtensive.Orm.Tests")};
 #>