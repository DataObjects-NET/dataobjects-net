<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExInvalidParentValue" xml:space="preserve">
    <value>Invalid Parent value.</value>
  </data>
  <data name="ExItemWithNameXAlreadyExists" xml:space="preserve">
    <value>Item with name '{0}' already exists.</value>
  </data>
  <data name="ExItemWithNameXIsNotFound" xml:space="preserve">
    <value>Item with Name '{0}' is not found.</value>
  </data>
  <data name="ExModelObjectCannotBeRemoved" xml:space="preserve">
    <value>Model object cannot be removed.</value>
  </data>
  <data name="ExTypeOfXPropertyMustBeY" xml:space="preserve">
    <value>Type of {0} property must be {1}.</value>
  </data>
  <data name="ExInvalidNodeState" xml:space="preserve">
    <value>Invalid node state.</value>
  </data>
  <data name="ExBindingFailedForX" xml:space="preserve">
    <value>Binding has failed for {0}. Check property declaration.</value>
  </data>
  <data name="ExNoNesting" xml:space="preserve">
    <value>Nesting must be created for any node.</value>
  </data>
  <data name="NodeInfoFormat" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="ExTargetObjectExistsX" xml:space="preserve">
    <value>Target object already exists: "{0}". To assign a new one, you must remove the old one first.</value>
  </data>
  <data name="ExCannotFindConstructorToExecuteX" xml:space="preserve">
    <value>Can't find a constructor to execute {0}.</value>
  </data>
  <data name="ExPathXNotFound" xml:space="preserve">
    <value>Node with path "{0}" is not found.</value>
  </data>
  <data name="ExItemAlreadyExists" xml:space="preserve">
    <value>Item already exists.</value>
  </data>
  <data name="ExMultipleHintsFound" xml:space="preserve">
    <value>Multiple hints found.</value>
  </data>
  <data name="DifferenceFormat" xml:space="preserve">
    <value>"{1}" != "{2}" ({0}): {3}</value>
  </data>
  <data name="PropertyChangeFormat" xml:space="preserve">
    <value>+{0}: {1}</value>
  </data>
  <data name="ItemChangeFormat" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ItemChangeCountFormat" xml:space="preserve">
    <value>{0} change(s)</value>
  </data>
  <data name="ExBothSourceAndTargetAreNull" xml:space="preserve">
    <value>Both Source and Target are null.</value>
  </data>
  <data name="DifferencePropertyNamePrefix" xml:space="preserve">
    <value>+{0}: </value>
  </data>
  <data name="ExPropertyValueMustBelongToTheSameModel" xml:space="preserve">
    <value>Property value must belong to the same Model.</value>
  </data>
  <data name="ExLoopInActionDependencyChain" xml:space="preserve">
    <value>Loop in action dependency chain is detected.</value>
  </data>
  <data name="ExNoCurrentComparer" xml:space="preserve">
    <value>Comparer.Current is null.</value>
  </data>
  <data name="ExInvalidContextDeactivationSequence" xml:space="preserve">
    <value>Invalid context deactivation sequence.</value>
  </data>
  <data name="ExInvalidContextActivationSequence" xml:space="preserve">
    <value>Invalid context activation sequence.</value>
  </data>
  <data name="ExInvalidAfterPathPropertyValue" xml:space="preserve">
    <value>Invalid AfterPath property value.</value>
  </data>
  <data name="ExInvalidNestingOfNodeX" xml:space="preserve">
    <value>Invalid Nesting of node "{0}".</value>
  </data>
  <data name="ExNoCurrentUpgrader" xml:space="preserve">
    <value>Upgarder.Current is null.</value>
  </data>
  <data name="LogAutomaticUpgradeSequenceValidation" xml:space="preserve">
    <value>Automatic upgrade sequence validation</value>
  </data>
  <data name="LogValidationFailed" xml:space="preserve">
    <value>Validation failed.</value>
  </data>
  <data name="Difference" xml:space="preserve">
    <value>Difference</value>
  </data>
  <data name="LogItemFormat" xml:space="preserve">
    <value>{0}:</value>
  </data>
  <data name="ExpectedTargetModel" xml:space="preserve">
    <value>Expected target model</value>
  </data>
  <data name="ActualTargetModel" xml:space="preserve">
    <value>Actual target model</value>
  </data>
  <data name="ExUpgradeSequenceValidationFailure" xml:space="preserve">
    <value>Upgrade sequence validation failure.</value>
  </data>
  <data name="ExNodeXMustBeProcessedBeforeBeingComparedAsReferenceValueOfYZ" xml:space="preserve">
    <value>Node "{0}" must be processed before being compared as reference (value of "{1}".{2}).</value>
  </data>
  <data name="UpgradeSequence" xml:space="preserve">
    <value>Upgrade sequence</value>
  </data>
  <data name="ExDifferenceRelatedToXTypeIsNotFoundOnTheUpgradeContextStack" xml:space="preserve">
    <value>Difference related to {0} type is not found on the UpgradeContext stack.</value>
  </data>
</root>