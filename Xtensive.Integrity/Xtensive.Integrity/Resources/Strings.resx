<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExSpecifiedRedoDescriptorCantBeLogged" xml:space="preserve">
    <value>Specified RedoDescriptor can't be logged.</value>
  </data>
  <data name="LogUndoError" xml:space="preserve">
    <value>Error during Undo execution: descriptor {0}.</value>
  </data>
  <data name="ExConcurrencyConflict" xml:space="preserve">
    <value>Concurrency conflict.</value>
  </data>
  <data name="ExDeadlock" xml:space="preserve">
    <value>Deadlock was found.</value>
  </data>
  <data name="ExVersionConflict" xml:space="preserve">
    <value>Version conflict.</value>
  </data>
  <data name="ExVersionConflictEx" xml:space="preserve">
    <value>Version conflict on object {0}: expected: {1} = {2}, but it is {3}.</value>
  </data>
  <data name="ExAtomicContextIsSuspended" xml:space="preserve">
    <value>AtomicContext is suspended.</value>
  </data>
  <data name="ExOldActiveOperationIsStillRunning" xml:space="preserve">
    <value>You can't Activate new operation, since old ActiveOperation is still running.</value>
  </data>
  <data name="ExCantInvokeBlockingDescriptor" xml:space="preserve">
    <value>Blocking descriptor can't be invoked.</value>
  </data>
  <data name="ExAlreadyCompleted" xml:space="preserve">
    <value>UndoDescriptor is already completed.</value>
  </data>
  <data name="ExInvalidTransactionState" xml:space="preserve">
    <value>Invalid transaction state ('{0}'). Expected state(s) is (are) '{1}'.</value>
  </data>
  <data name="ExCompleteMustBeCalledJustOnce" xml:space="preserve">
    <value>Complete method must be called just once.</value>
  </data>
  <data name="ExScopeBoundTransactionCanBeCommittedOnlyByItsScope" xml:space="preserve">
    <value>Scope-bound transaction can be committed only by its scope. Use TransactionScopeBase.Complete() \  Dispose() methods of  appropriate TransactionScopeBase descendant instance to do this.</value>
  </data>
  <data name="ExContextMustBeActivated" xml:space="preserve">
    <value>Context is not activated.</value>
  </data>
  <data name="ExObjectAndContextAreIncompatible" xml:space="preserve">
    <value>The specified object and the context are incompatible.</value>
  </data>
  <data name="ExIncorrectStageValue" xml:space="preserve">
    <value>Incorrect Stage value: '{0}'.</value>
  </data>
  <data name="LogRelationSyncUndoError" xml:space="preserve">
    <value>Error during undoing the relation synchronization.</value>
  </data>
  <data name="StringXDoesNotMatchRegexPatternY" xml:space="preserve">
    <value>String '{0}' does not match regex pattern '{1}'.</value>
  </data>
  <data name="ValueCanNotBeEmpty" xml:space="preserve">
    <value>Value can not be empty.</value>
  </data>
  <data name="FieldConstraintCanNotBeAppliedToReadOnlyProperty" xml:space="preserve">
    <value>Field constraint can not be applied to read only property.</value>
  </data>
  <data name="XInterfaceShouldBeImplementedToUseFieldConstraints" xml:space="preserve">
    <value>'{0}' interface should be implemented to use field constraints.</value>
  </data>
  <data name="XDoesNotSupportYValueType" xml:space="preserve">
    <value>'{0}' does not support '{1}' value type.</value>
  </data>
  <data name="X" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ExTransactionIsAlreadyActivated" xml:space="preserve">
    <value>Transaction is already activated.</value>
  </data>
  <data name="ExTransactionScopeIsCompletedCanNotBeSetToFalse" xml:space="preserve">
    <value>TransactionScope.IsCompleted can not be set to 'false'.</value>
  </data>
  <data name="ExValidationFailed" xml:space="preserve">
    <value>Validation failed.</value>
  </data>
</root>