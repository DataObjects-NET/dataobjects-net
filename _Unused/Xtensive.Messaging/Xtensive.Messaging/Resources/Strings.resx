<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExArgumentOutOfRange" xml:space="preserve">
    <value>Argument out of range. Possible value must be within [{0}, {1}] interval.</value>
  </data>
  <data name="ExAskTimeout" xml:space="preserve">
    <value>Response did not received in specified period of time.</value>
  </data>
  <data name="ExCollectionArrayIndexOutOfRange" xml:space="preserve">
    <value>Index can't be less than zero.</value>
  </data>
  <data name="ExCollectionArrayMultidimensial" xml:space="preserve">
    <value>Unble to copy to multidimensial array.</value>
  </data>
  <data name="ExCollectionMessageMissing" xml:space="preserve">
    <value>One of awaited messages missed.</value>
  </data>
  <data name="ExCollectionSequenceOutOfRange" xml:space="preserve">
    <value>Incoming message contains incorrect Sequence value.</value>
  </data>
  <data name="ExCollectionTimeout" xml:space="preserve">
    <value>Timeout occured while waiting for data.</value>
  </data>
  <data name="ExDebugInfoIsNotAvailable" xml:space="preserve">
    <value>DebugInfo is not available.</value>
  </data>
  <data name="ExDuplicateDefaultProcessor" xml:space="preserve">
    <value>Duplicate default message processor definition found. Please check MessageProcessorAttribute of types {0} and {1}.</value>
  </data>
  <data name="ExDuplicateProcessor" xml:space="preserve">
    <value>Duplicate message processor definition found for message type {0}. Please check MessageProcessorAttribute of types {1} and {2}.</value>
  </data>
  <data name="ExInvalidProcessorMessageType" xml:space="preserve">
    <value>Message type should implement IQueryMessage interface.</value>
  </data>
  <data name="ExInvalidProcessorType" xml:space="preserve">
    <value>Processor type should implement IMessageProcessor interface.</value>
  </data>
  <data name="ExMessageBodyIsNotAvailableYet" xml:space="preserve">
    <value>Message body is not available yet.</value>
  </data>
  <data name="ExMessageHeaderBufferTooSmall" xml:space="preserve">
    <value>Message header is longer than buffer.</value>
  </data>
  <data name="ExMessageHeaderIsNotAvailableYet" xml:space="preserve">
    <value>Message header is not available yet.</value>
  </data>
  <data name="ExMessageIsAlreadyRead" xml:space="preserve">
    <value>Message is already read. Use MessagerReader.Clear() to prepare the reader for reading the next message.</value>
  </data>
  <data name="ExMessageIsIncomplete" xml:space="preserve">
    <value>Message is incomplete.</value>
  </data>
  <data name="ExMessagingException" xml:space="preserve">
    <value>Unknown error while using Xtensive.Messaging.</value>
  </data>
  <data name="ExPluginForProtocolNotFound" xml:space="preserve">
    <value>Unable to find plugin for protocol {0} at path {1}.</value>
  </data>
  <data name="ExProcessorCreationError" xml:space="preserve">
    <value>Error while create new instance of {0} messaging processor. Please see inner exception for details.</value>
  </data>
  <data name="ExProcessorDefaultConstructorMissing" xml:space="preserve">
    <value>Message processor {0} must have default constructor.</value>
  </data>
  <data name="ExProcessorNotFound" xml:space="preserve">
    <value>Unable to find message processor for type {0}.</value>
  </data>
  <data name="ExProcessorWasNotAdded" xml:space="preserve">
    <value>ory.</value>
  </data>
  <data name="ExProviderDataSending" xml:space="preserve">
    <value>Error while sending data to provider.</value>
  </data>
  <data name="ExProviderRecreateError" xml:space="preserve">
    <value>Unable to recreate sending connection after send error. Please look at inner exception for details.</value>
  </data>
  <data name="ExReceiverGotDataFromUnknownConnection" xml:space="preserve">
    <value>Assertion. Receiver got data from unknown connection.</value>
  </data>
  <data name="ExReceivingConnectionAlreadyExists" xml:space="preserve">
    <value>Receiving connection already exists.</value>
  </data>
  <data name="ExResponseReceiverIsNotInitialized" xml:space="preserve">
    <value>Response receiver is not initialized.</value>
  </data>
  <data name="ExSendError" xml:space="preserve">
    <value>Unable to send message. Please look at inner exception for details.</value>
  </data>
  <data name="ExUnableToAddProcessorWhileReceiverStarted" xml:space="preserve">
    <value>Unable to add processor while receiver started. Please stop receiver before add processor.</value>
  </data>
  <data name="ExUnableToCreateInternalReceiver" xml:space="preserve">
    <value>Sender can't create receiver to get Ask responses. It's possible that connection is not IBidirectionalConnection.</value>
  </data>
  <data name="ExUnableToModifyContextWhileReceiverStarted" xml:space="preserve">
    <value>Unable to modify processor context while receiver started. Please stop receiver before modify context or add/remove processors.</value>
  </data>
  <data name="ExUnableToRemoveProcessorWhileReceiverStarted" xml:space="preserve">
    <value>Unable to remove processor while receiver started. Please stop receiver before remove processor.</value>
  </data>
  <data name="ExUnknownProcessorToRelease" xml:space="preserve">
    <value>Unable to release processor because it wasn't created by ProcessorFactory.</value>
  </data>
  <data name="ExUnknownProcessorType" xml:space="preserve">
    <value>Processor type is unknown.</value>
  </data>
  <data name="LogMessageDeserializeError" xml:space="preserve">
    <value>Error while attempt to deserialize message.</value>
  </data>
</root>