<#@ output extension="cs"
#><#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System"
#><#@ import namespace="System.Linq"
#><#@ include file="DelegateGenerator.ttinclude"
#>
#if! NET40
// Copyright (C) 2003-2010 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Denis Krjuchkov
// Created:    2010.03.10

namespace Xtensive.Core
{
<#
PushIndent("  ");
for (int i = DelegateGenerator.StandardMaxNumberOfArguments + 1;
     i <= DelegateGenerator.MaxNumberOfArguments; i++) {
     WriteLine("/// <summary>");
     Write("/// Encapsulates a method that has "); Write(i.ToString()); WriteLine(" parameters");
     WriteLine("/// and returns a value of the type specified by the <see typeparamref=\"TResult\"/> parameter.");
     WriteLine("/// </summary>");
     Write("public delegate TResult ");
     Write(DelegateGenerator.GenerateFunc(null, 1, i));
     Write(DelegateGenerator.GenerateArgumentDeclaration(null, 1, i));
     WriteLine(";");
     WriteLine("");
     WriteLine("/// <summary>");
     Write("/// Encapsulates a method that has "); Write(i.ToString()); WriteLine(" parameters and does not return a value.");
     WriteLine("/// </summary>");
     Write("public delegate void ");
     Write(DelegateGenerator.GenerateAction(null, 1, i));
     Write(DelegateGenerator.GenerateArgumentDeclaration(null, 1, i));
     WriteLine(";");
     WriteLine("");
}
PopIndent();
#>
}
#endif