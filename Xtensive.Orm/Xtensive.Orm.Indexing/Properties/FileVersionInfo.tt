<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text.RegularExpressions" #>
// Copyright (C) 2007-2009 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Alex Yakunin
// Created:    2009.06.14

using System.Reflection;

<#
  Func<string, Tuple<string,string>> getRevision = repoPath => {
  var p = new Process();
  p.StartInfo.UseShellExecute = false;
  p.StartInfo.RedirectStandardOutput = true;
  p.StartInfo.CreateNoWindow = true;

  string revisionNumberRegex = null;
  p.StartInfo.FileName = "hg.exe";
  p.StartInfo.Arguments = "log -l 1 \"" + repoPath + "\"";
  revisionNumberRegex = @"changeset\: +(\d+)\:([a-fA-F\d]+)";
  var revision = Tuple.Create("0","0");
  try {
    p.Start();
    var match = Regex.Match(p.StandardOutput.ReadToEnd(), revisionNumberRegex, RegexOptions.Multiline);
    revision = Tuple.Create(match.Groups[1].Value, match.Groups[2].Value);
    if (revision.Item2==null || revision.Item2.Length==0)
      revision = Tuple.Create(revision.Item1,"0");
    else
      revision = Tuple.Create(revision.Item1, 
        Convert.ToInt32(revision.Item2.Substring(0,4), 16).ToString());
    p.WaitForExit();
  }
  catch {
  }
  return revision;
  };

  Func<string> getTemplateFolderPath = () => {
    string path = Host.TemplateFile;
    return Path.Combine(Path.GetPathRoot(path), Path.GetDirectoryName(path));
  };

  Func<string> getProjectPath = () => Path.GetFullPath(Path.Combine(getTemplateFolderPath(), "..\\.."));

  Func<string> getHgRootPath = () => {
    string path = getTemplateFolderPath();
    while (true) {
      string hgFolderPath = Path.Combine(path, ".hg");
      if (Directory.Exists(hgFolderPath))
        return path;
      string nextPath = Path.GetFullPath(Path.Combine(path, ".."));
      if (nextPath==path)
        return null;
      path = nextPath;
    }
  };
  
  Func<string, Dictionary<string,string>> getProductInfo = (_productInfoPath) => {
    var result = new Dictionary<string,string>();
    foreach (string line in File.ReadAllLines(_productInfoPath)) {
      int columnIndex = line.IndexOf(":");
      if (columnIndex<0)
        continue;
      result.Add(
        line.Substring(0, columnIndex).Trim(), 
        line.Substring(columnIndex+1).Trim().Replace("\"", ""));
    }
    return result;
  };

  string projectPath = getProjectPath();
  string hgRootPath = getHgRootPath();
  string productInfoPath = Path.Combine(hgRootPath, "ProductInfo.txt");

  var projectRevision = getRevision(projectPath);
  var rootRevision = getRevision(hgRootPath);
  var productInfo = getProductInfo(productInfoPath);
  string name = productInfo["Name"];
  string codeName = productInfo["CodeName"];
  string platform = productInfo["Platform"];
  string platformCode = productInfo["PlatformCode"];
  string version = productInfo["Version"];
  string assemblyVersion = productInfo["AssemblyVersion"];
  string buildType = productInfo["BuildType"];
  string buildTypeTitle = productInfo["BuildTypeTitle"];
  string versionAndBuildType = buildType.Length==0
    ? "v" + version
    : "v" + version + " " + buildType;
  var now = DateTime.Now;
  var dtfi = new CultureInfo( "en-US", false ).DateTimeFormat;
#>

[assembly: AssemblyCopyright("Copyright © Xtensive LLC 2003-<#= DateTime.Now.Year #>")]
[assembly: AssemblyVersion("<#= assemblyVersion #>")]
[assembly: AssemblyFileVersion("<#= version #>.<#= rootRevision.Item1 #>")]
[assembly: AssemblyInformationalVersion("<#= name #> <#= versionAndBuildType #> component, build <#= rootRevision.Item1 #> for <#= platform #>, build date: <#= DateTime.Now.ToString("d", DateTimeFormatInfo.InvariantInfo) #>")]
