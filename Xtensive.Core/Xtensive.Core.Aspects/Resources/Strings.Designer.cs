//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xtensive.Core.Aspects.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Xtensive.Core.Aspects.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug: {{{0}}}.
        /// </summary>
        internal static string AspectDebug {
            get {
                return ResourceManager.GetString("AspectDebug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute can be applied on auto generated property accessors only..
        /// </summary>
        internal static string AspectExCanBeAppliedToAutoGeneratedPropertiesOnly {
            get {
                return ResourceManager.GetString("AspectExCanBeAppliedToAutoGeneratedPropertiesOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute can be applied on constructors only..
        /// </summary>
        internal static string AspectExCanBeAppliedToConstructorOnly {
            get {
                return ResourceManager.GetString("AspectExCanBeAppliedToConstructorOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute can be applied on property accessors only..
        /// </summary>
        internal static string AspectExCanBeAppliedToPropertyAccessorsOnly {
            get {
                return ResourceManager.GetString("AspectExCanBeAppliedToPropertyAccessorsOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. Cannot apply {{{0}}} attribute on constructors..
        /// </summary>
        internal static string AspectExCannotBeAppliedToConstructor {
            get {
                return ResourceManager.GetString("AspectExCannotBeAppliedToConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. Cannot apply {{{0}}} attribute on static members..
        /// </summary>
        internal static string AspectExCannotBeAppliedToStaticMember {
            get {
                return ResourceManager.GetString("AspectExCannotBeAppliedToStaticMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. Cannot add index on non-existing property {{{0}}}..
        /// </summary>
        internal static string AspectExCannotFindField {
            get {
                return ResourceManager.GetString("AspectExCannotFindField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find Log for type {{{1}}} in namespace {{{2}}} and above..
        /// </summary>
        internal static string AspectExCannotFindLogFor {
            get {
                return ResourceManager.GetString("AspectExCannotFindLogFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor of type {{{0}}} with signature {{{1}}} already exsists..
        /// </summary>
        internal static string AspectExConstructorAlreadyExsists {
            get {
                return ResourceManager.GetString("AspectExConstructorAlreadyExsists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor of type {{{0}}} with signature {{{1}}} does not exsist..
        /// </summary>
        internal static string AspectExConstructorDoesNotExsist {
            get {
                return ResourceManager.GetString("AspectExConstructorDoesNotExsist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute requires {{{2}}} to have {{{3}}} field..
        /// </summary>
        internal static string AspectExNoField {
            get {
                return ResourceManager.GetString("AspectExNoField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute requires {{{2}}} to have {{{3}}} method..
        /// </summary>
        internal static string AspectExNoMethod {
            get {
                return ResourceManager.GetString("AspectExNoMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning in type {{{1}}}. Aspect {{{0}}} is possibly wrongly applied on member {{{2}}}..
        /// </summary>
        internal static string AspectExPossiblyMissapplied {
            get {
                return ResourceManager.GetString("AspectExPossiblyMissapplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute requires {{{1}}} to have {{{4}}} {{{2}}}({{{3}}}) method ..
        /// </summary>
        internal static string AspectExTypeShouldHaveXxxMethod {
            get {
                return ResourceManager.GetString("AspectExTypeShouldHaveXxxMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in type {{{1}}}. {{{0}}} attribute requires {{{1}}} to implement {{{2}}}..
        /// </summary>
        internal static string AspectExTypeShouldImplementXxx {
            get {
                return ResourceManager.GetString("AspectExTypeShouldImplementXxx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member must be a field..
        /// </summary>
        internal static string ExMemberMustBeField {
            get {
                return ResourceManager.GetString("ExMemberMustBeField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown linked field type..
        /// </summary>
        internal static string ExUnknownLinkedFieldType {
            get {
                return ResourceManager.GetString("ExUnknownLinkedFieldType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LogAttribute initialization failed..
        /// </summary>
        internal static string LogAttributeInitializationError {
            get {
                return ResourceManager.GetString("LogAttributeInitializationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t log {0} invocation: Instance property of found Log object returned an object other then ILog..
        /// </summary>
        internal static string LogCantLogNoLogError {
            get {
                return ResourceManager.GetString("LogCantLogNoLogError", resourceCulture);
            }
        }
    }
}
