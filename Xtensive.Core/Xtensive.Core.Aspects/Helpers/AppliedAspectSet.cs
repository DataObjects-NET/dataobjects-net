// Copyright (C) 2003-2010 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Alex Yakunin
// Created:    2008.07.17

using System;
using System.Collections.Generic;
using System.Threading;

namespace Xtensive.Core.Aspects.Helpers
{
  /// <summary>
  /// A helper class allowing to apply the particular aspect just once.
  /// </summary>
  public static class AppliedAspectSet
  {
    private static readonly Dictionary<Pair<Type, object>, object> aspects = 
      new Dictionary<Pair<Type, object>, object>();

    /// <summary>
    /// Adds a new aspect created by <paramref name="generator"/> 
    /// with the specified key to the set, if there is no aspect with the same key; 
    /// otherwise, does nothing.
    /// </summary>
    /// <typeparam name="T">The type of aspect to add.</typeparam>
    /// <param name="key">The key of aspect to add.</param>
    /// <param name="generator">The aspect generator.</param>
    /// <returns>A generated aspect, if aspect with the specified 
    /// <paramref name="key"/> was not found; 
    /// otherwise, <see langword="null" />.</returns>
    public static T Add<T>(object key, Func<T> generator)
      where T : class
    {
      var tType = typeof (T);
      var fullKey = new Pair<Type, object>(tType, key);
      lock (aspects) {
        object result;
        if (!aspects.TryGetValue(fullKey, out result)) {
          result = generator.Invoke();
          Thread.MemoryBarrier();
          aspects.Add(fullKey, result);
        }
        else
          result = null;
        return (T) result;
      }
    }

    /// <summary>
    /// Adds an <paramref name="aspect"/> with the specified key to the set, 
    /// if there is no aspect with the same key; 
    /// otherwise, combines the <paramref name="aspect"/>
    /// with the existing one using <paramref name="combiner"/>.
    /// </summary>
    /// <typeparam name="T">The type of aspect to add.</typeparam>
    /// <param name="key">The key of aspect to add.</param>
    /// <param name="aspect">The aspect to add.</param>
    /// <param name="combiner">The aspect combiner. 
    /// Its first argument is an existing aspect, that should be modified; 
    /// the second one is <paramref name="aspect"/>.</param>
    /// <returns>A generated aspect, if aspect with the specified 
    /// <paramref name="key"/> was not found; 
    /// otherwise, <see langword="null" />.</returns>
    public static T AddOrCombine<T>(object key, T aspect, Action<T,T> combiner)
      where T : class
    {
      var tType = typeof (T);
      var fullKey = new Pair<Type, object>(tType, key);
      lock (aspects) {
        object result;
        if (!aspects.TryGetValue(fullKey, out result)) {
          result = aspect;
          Thread.MemoryBarrier();
          aspects.Add(fullKey, result);
        }
        else {
          combiner.Invoke((T) result, aspect);
          Thread.MemoryBarrier();
          result = null;
        }
        return (T) result;
      }
    }

    /// <summary>
    /// Adds a new aspect created by <paramref name="generator"/> 
    /// with the specified key to the set, if there is no aspect with the same key;
    /// </summary>
    /// <typeparam name="T">The type of aspect to add.</typeparam>
    /// <param name="key">The key of aspect to add.</param>
    /// <param name="generator">The aspect generator.</param>
    /// <returns>Aspect that was found in set by specified key or generated by <paramref name="generator"/>.</returns>
    public static T GetOrCreate<T>(object key, Func<T> generator)
      where T : class 
    {
      var tType = typeof (T);
      var fullKey = new Pair<Type, object>(tType, key);
      lock (aspects) {
        object result;
        if (!aspects.TryGetValue(fullKey, out result)) {
          result = generator.Invoke();
          Thread.MemoryBarrier();
          aspects.Add(fullKey, result);
        }

        return (T) result;
      }
    }
  }
}