// Copyright (C) 2010 Xtensive LLC.
// All rights reserved.
// For conditions of distribution and use, see license.
// Created by: Alexis Kochetov
// Created:    2010.03.18

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Xtensive.Core.Tuples.Internals
{
  /// <summary>
  /// Provides access to maximal generated tuple length value.
  /// </summary>
  public static class MaxGeneratedTupleLength
  {
    /// <summary>
    /// Defines maximal generated tuple length value.
    /// The value is <see langword="32" />.
    /// </summary>
    public const int Value = 32;
  }

  /// <summary>
  /// Describes tuple of length 1.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0> : RegularTuple
  {
    private const int count = 1;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 2.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1> : RegularTuple
  {
    private const int count = 2;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 3.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2> : RegularTuple
  {
    private const int count = 3;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 4.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3> : RegularTuple
  {
    private const int count = 4;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 5.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4> : RegularTuple
  {
    private const int count = 5;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 6.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5> : RegularTuple
  {
    private const int count = 6;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 7.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6> : RegularTuple
  {
    private const int count = 7;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 8.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7> : RegularTuple
  {
    private const int count = 8;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 9.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8> : RegularTuple
  {
    private const int count = 9;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 10.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> : RegularTuple
  {
    private const int count = 10;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 11.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> : RegularTuple
  {
    private const int count = 11;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 12.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> : RegularTuple
  {
    private const int count = 12;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 13.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> : RegularTuple
  {
    private const int count = 13;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 14.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> : RegularTuple
  {
    private const int count = 14;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 15.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> : RegularTuple
  {
    private const int count = 15;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 16.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> : RegularTuple
  {
    private const int count = 16;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 17.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> : RegularTuple
  {
    private const int count = 17;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 18.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> : RegularTuple
  {
    private const int count = 18;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 19.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> : RegularTuple
  {
    private const int count = 19;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 20.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19> : RegularTuple
  {
    private const int count = 20;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 21.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20> : RegularTuple
  {
    private const int count = 21;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 22.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21> : RegularTuple
  {
    private const int count = 22;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 23.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22> : RegularTuple
  {
    private const int count = 23;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 24.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23> : RegularTuple
  {
    private const int count = 24;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 25.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24> : RegularTuple
  {
    private const int count = 25;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 26.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25> : RegularTuple
  {
    private const int count = 26;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 27.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26> : RegularTuple
  {
    private const int count = 27;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Value number 26.
    /// </summary>
    [DataMember]
    public T26 Value26;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
        case 26:
          return Value26;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
          case 26:
            Value26 = default(T26);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
          case 26:
            Value26 = (T26)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }
    /// <summary>
    /// Gets the value and state of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T26 GetValue26(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (26 << 1)) & 3);
      return t.Value26;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }
    /// <summary>
    /// Sets the value of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue26(Tuple tuple, T26 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>)tuple;
      const long mask = 3L << (26 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (26 << 1));
      t.Value26 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T26>.Default.Equals(Value26, tuple.Value26))
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      result = HashCodeMultiplier * result ^ EqualityComparer<T26>.Default.GetHashCode(Value26);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25),
        typeof (T26)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Value26 = template.Value26;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 28.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27> : RegularTuple
  {
    private const int count = 28;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Value number 26.
    /// </summary>
    [DataMember]
    public T26 Value26;
	
    /// <summary>
    /// Value number 27.
    /// </summary>
    [DataMember]
    public T27 Value27;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
        case 26:
          return Value26;
        case 27:
          return Value27;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
          case 26:
            Value26 = default(T26);
            break;
          case 27:
            Value27 = default(T27);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
          case 26:
            Value26 = (T26)fieldValue;
            break;
          case 27:
            Value27 = (T27)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }
    /// <summary>
    /// Gets the value and state of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T26 GetValue26(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (26 << 1)) & 3);
      return t.Value26;
    }
    /// <summary>
    /// Gets the value and state of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T27 GetValue27(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (27 << 1)) & 3);
      return t.Value27;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }
    /// <summary>
    /// Sets the value of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue26(Tuple tuple, T26 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (26 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (26 << 1));
      t.Value26 = value;
    }
    /// <summary>
    /// Sets the value of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue27(Tuple tuple, T27 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>)tuple;
      const long mask = 3L << (27 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (27 << 1));
      t.Value27 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T27>.Default.Equals(Value27, tuple.Value27))
        return false;
      if (!EqualityComparer<T26>.Default.Equals(Value26, tuple.Value26))
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      result = HashCodeMultiplier * result ^ EqualityComparer<T26>.Default.GetHashCode(Value26);
      result = HashCodeMultiplier * result ^ EqualityComparer<T27>.Default.GetHashCode(Value27);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25),
        typeof (T26),
        typeof (T27)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Value26 = template.Value26;
      Value27 = template.Value27;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 29.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28> : RegularTuple
  {
    private const int count = 29;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Value number 26.
    /// </summary>
    [DataMember]
    public T26 Value26;
	
    /// <summary>
    /// Value number 27.
    /// </summary>
    [DataMember]
    public T27 Value27;
	
    /// <summary>
    /// Value number 28.
    /// </summary>
    [DataMember]
    public T28 Value28;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
        case 26:
          return Value26;
        case 27:
          return Value27;
        case 28:
          return Value28;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
          case 26:
            Value26 = default(T26);
            break;
          case 27:
            Value27 = default(T27);
            break;
          case 28:
            Value28 = default(T28);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
          case 26:
            Value26 = (T26)fieldValue;
            break;
          case 27:
            Value27 = (T27)fieldValue;
            break;
          case 28:
            Value28 = (T28)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }
    /// <summary>
    /// Gets the value and state of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T26 GetValue26(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (26 << 1)) & 3);
      return t.Value26;
    }
    /// <summary>
    /// Gets the value and state of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T27 GetValue27(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (27 << 1)) & 3);
      return t.Value27;
    }
    /// <summary>
    /// Gets the value and state of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T28 GetValue28(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (28 << 1)) & 3);
      return t.Value28;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }
    /// <summary>
    /// Sets the value of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue26(Tuple tuple, T26 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (26 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (26 << 1));
      t.Value26 = value;
    }
    /// <summary>
    /// Sets the value of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue27(Tuple tuple, T27 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (27 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (27 << 1));
      t.Value27 = value;
    }
    /// <summary>
    /// Sets the value of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue28(Tuple tuple, T28 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>)tuple;
      const long mask = 3L << (28 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (28 << 1));
      t.Value28 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T28>.Default.Equals(Value28, tuple.Value28))
        return false;
      if (!EqualityComparer<T27>.Default.Equals(Value27, tuple.Value27))
        return false;
      if (!EqualityComparer<T26>.Default.Equals(Value26, tuple.Value26))
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      result = HashCodeMultiplier * result ^ EqualityComparer<T26>.Default.GetHashCode(Value26);
      result = HashCodeMultiplier * result ^ EqualityComparer<T27>.Default.GetHashCode(Value27);
      result = HashCodeMultiplier * result ^ EqualityComparer<T28>.Default.GetHashCode(Value28);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25),
        typeof (T26),
        typeof (T27),
        typeof (T28)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Value26 = template.Value26;
      Value27 = template.Value27;
      Value28 = template.Value28;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 30.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29> : RegularTuple
  {
    private const int count = 30;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Value number 26.
    /// </summary>
    [DataMember]
    public T26 Value26;
	
    /// <summary>
    /// Value number 27.
    /// </summary>
    [DataMember]
    public T27 Value27;
	
    /// <summary>
    /// Value number 28.
    /// </summary>
    [DataMember]
    public T28 Value28;
	
    /// <summary>
    /// Value number 29.
    /// </summary>
    [DataMember]
    public T29 Value29;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
        case 26:
          return Value26;
        case 27:
          return Value27;
        case 28:
          return Value28;
        case 29:
          return Value29;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
          case 26:
            Value26 = default(T26);
            break;
          case 27:
            Value27 = default(T27);
            break;
          case 28:
            Value28 = default(T28);
            break;
          case 29:
            Value29 = default(T29);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
          case 26:
            Value26 = (T26)fieldValue;
            break;
          case 27:
            Value27 = (T27)fieldValue;
            break;
          case 28:
            Value28 = (T28)fieldValue;
            break;
          case 29:
            Value29 = (T29)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }
    /// <summary>
    /// Gets the value and state of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T26 GetValue26(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (26 << 1)) & 3);
      return t.Value26;
    }
    /// <summary>
    /// Gets the value and state of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T27 GetValue27(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (27 << 1)) & 3);
      return t.Value27;
    }
    /// <summary>
    /// Gets the value and state of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T28 GetValue28(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (28 << 1)) & 3);
      return t.Value28;
    }
    /// <summary>
    /// Gets the value and state of field 29.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T29 GetValue29(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (29 << 1)) & 3);
      return t.Value29;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }
    /// <summary>
    /// Sets the value of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue26(Tuple tuple, T26 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (26 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (26 << 1));
      t.Value26 = value;
    }
    /// <summary>
    /// Sets the value of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue27(Tuple tuple, T27 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (27 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (27 << 1));
      t.Value27 = value;
    }
    /// <summary>
    /// Sets the value of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue28(Tuple tuple, T28 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (28 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (28 << 1));
      t.Value28 = value;
    }
    /// <summary>
    /// Sets the value of field 29.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue29(Tuple tuple, T29 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>)tuple;
      const long mask = 3L << (29 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (29 << 1));
      t.Value29 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T29>.Default.Equals(Value29, tuple.Value29))
        return false;
      if (!EqualityComparer<T28>.Default.Equals(Value28, tuple.Value28))
        return false;
      if (!EqualityComparer<T27>.Default.Equals(Value27, tuple.Value27))
        return false;
      if (!EqualityComparer<T26>.Default.Equals(Value26, tuple.Value26))
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      result = HashCodeMultiplier * result ^ EqualityComparer<T26>.Default.GetHashCode(Value26);
      result = HashCodeMultiplier * result ^ EqualityComparer<T27>.Default.GetHashCode(Value27);
      result = HashCodeMultiplier * result ^ EqualityComparer<T28>.Default.GetHashCode(Value28);
      result = HashCodeMultiplier * result ^ EqualityComparer<T29>.Default.GetHashCode(Value29);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25),
        typeof (T26),
        typeof (T27),
        typeof (T28),
        typeof (T29)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Value26 = template.Value26;
      Value27 = template.Value27;
      Value28 = template.Value28;
      Value29 = template.Value29;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 31.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30> : RegularTuple
  {
    private const int count = 31;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Value number 26.
    /// </summary>
    [DataMember]
    public T26 Value26;
	
    /// <summary>
    /// Value number 27.
    /// </summary>
    [DataMember]
    public T27 Value27;
	
    /// <summary>
    /// Value number 28.
    /// </summary>
    [DataMember]
    public T28 Value28;
	
    /// <summary>
    /// Value number 29.
    /// </summary>
    [DataMember]
    public T29 Value29;
	
    /// <summary>
    /// Value number 30.
    /// </summary>
    [DataMember]
    public T30 Value30;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
        case 26:
          return Value26;
        case 27:
          return Value27;
        case 28:
          return Value28;
        case 29:
          return Value29;
        case 30:
          return Value30;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
          case 26:
            Value26 = default(T26);
            break;
          case 27:
            Value27 = default(T27);
            break;
          case 28:
            Value28 = default(T28);
            break;
          case 29:
            Value29 = default(T29);
            break;
          case 30:
            Value30 = default(T30);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
          case 26:
            Value26 = (T26)fieldValue;
            break;
          case 27:
            Value27 = (T27)fieldValue;
            break;
          case 28:
            Value28 = (T28)fieldValue;
            break;
          case 29:
            Value29 = (T29)fieldValue;
            break;
          case 30:
            Value30 = (T30)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }
    /// <summary>
    /// Gets the value and state of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T26 GetValue26(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (26 << 1)) & 3);
      return t.Value26;
    }
    /// <summary>
    /// Gets the value and state of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T27 GetValue27(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (27 << 1)) & 3);
      return t.Value27;
    }
    /// <summary>
    /// Gets the value and state of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T28 GetValue28(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (28 << 1)) & 3);
      return t.Value28;
    }
    /// <summary>
    /// Gets the value and state of field 29.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T29 GetValue29(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (29 << 1)) & 3);
      return t.Value29;
    }
    /// <summary>
    /// Gets the value and state of field 30.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T30 GetValue30(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (30 << 1)) & 3);
      return t.Value30;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }
    /// <summary>
    /// Sets the value of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue26(Tuple tuple, T26 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (26 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (26 << 1));
      t.Value26 = value;
    }
    /// <summary>
    /// Sets the value of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue27(Tuple tuple, T27 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (27 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (27 << 1));
      t.Value27 = value;
    }
    /// <summary>
    /// Sets the value of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue28(Tuple tuple, T28 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (28 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (28 << 1));
      t.Value28 = value;
    }
    /// <summary>
    /// Sets the value of field 29.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue29(Tuple tuple, T29 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (29 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (29 << 1));
      t.Value29 = value;
    }
    /// <summary>
    /// Sets the value of field 30.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue30(Tuple tuple, T30 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>)tuple;
      const long mask = 3L << (30 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (30 << 1));
      t.Value30 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T30>.Default.Equals(Value30, tuple.Value30))
        return false;
      if (!EqualityComparer<T29>.Default.Equals(Value29, tuple.Value29))
        return false;
      if (!EqualityComparer<T28>.Default.Equals(Value28, tuple.Value28))
        return false;
      if (!EqualityComparer<T27>.Default.Equals(Value27, tuple.Value27))
        return false;
      if (!EqualityComparer<T26>.Default.Equals(Value26, tuple.Value26))
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      result = HashCodeMultiplier * result ^ EqualityComparer<T26>.Default.GetHashCode(Value26);
      result = HashCodeMultiplier * result ^ EqualityComparer<T27>.Default.GetHashCode(Value27);
      result = HashCodeMultiplier * result ^ EqualityComparer<T28>.Default.GetHashCode(Value28);
      result = HashCodeMultiplier * result ^ EqualityComparer<T29>.Default.GetHashCode(Value29);
      result = HashCodeMultiplier * result ^ EqualityComparer<T30>.Default.GetHashCode(Value30);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25),
        typeof (T26),
        typeof (T27),
        typeof (T28),
        typeof (T29),
        typeof (T30)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Value26 = template.Value26;
      Value27 = template.Value27;
      Value28 = template.Value28;
      Value29 = template.Value29;
      Value30 = template.Value30;
      Flags = template.Flags;
    }
  }
  
  /// <summary>
  /// Describes tuple of length 32.
  /// </summary>
  [DataContract]
  [Serializable]
  public sealed class Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31> : RegularTuple
  {
    private const int count = 32;
	
    /// <summary>
    /// Value number 0.
    /// </summary>
    [DataMember]
    public T0 Value0;
	
    /// <summary>
    /// Value number 1.
    /// </summary>
    [DataMember]
    public T1 Value1;
	
    /// <summary>
    /// Value number 2.
    /// </summary>
    [DataMember]
    public T2 Value2;
	
    /// <summary>
    /// Value number 3.
    /// </summary>
    [DataMember]
    public T3 Value3;
	
    /// <summary>
    /// Value number 4.
    /// </summary>
    [DataMember]
    public T4 Value4;
	
    /// <summary>
    /// Value number 5.
    /// </summary>
    [DataMember]
    public T5 Value5;
	
    /// <summary>
    /// Value number 6.
    /// </summary>
    [DataMember]
    public T6 Value6;
	
    /// <summary>
    /// Value number 7.
    /// </summary>
    [DataMember]
    public T7 Value7;
	
    /// <summary>
    /// Value number 8.
    /// </summary>
    [DataMember]
    public T8 Value8;
	
    /// <summary>
    /// Value number 9.
    /// </summary>
    [DataMember]
    public T9 Value9;
	
    /// <summary>
    /// Value number 10.
    /// </summary>
    [DataMember]
    public T10 Value10;
	
    /// <summary>
    /// Value number 11.
    /// </summary>
    [DataMember]
    public T11 Value11;
	
    /// <summary>
    /// Value number 12.
    /// </summary>
    [DataMember]
    public T12 Value12;
	
    /// <summary>
    /// Value number 13.
    /// </summary>
    [DataMember]
    public T13 Value13;
	
    /// <summary>
    /// Value number 14.
    /// </summary>
    [DataMember]
    public T14 Value14;
	
    /// <summary>
    /// Value number 15.
    /// </summary>
    [DataMember]
    public T15 Value15;
	
    /// <summary>
    /// Value number 16.
    /// </summary>
    [DataMember]
    public T16 Value16;
	
    /// <summary>
    /// Value number 17.
    /// </summary>
    [DataMember]
    public T17 Value17;
	
    /// <summary>
    /// Value number 18.
    /// </summary>
    [DataMember]
    public T18 Value18;
	
    /// <summary>
    /// Value number 19.
    /// </summary>
    [DataMember]
    public T19 Value19;
	
    /// <summary>
    /// Value number 20.
    /// </summary>
    [DataMember]
    public T20 Value20;
	
    /// <summary>
    /// Value number 21.
    /// </summary>
    [DataMember]
    public T21 Value21;
	
    /// <summary>
    /// Value number 22.
    /// </summary>
    [DataMember]
    public T22 Value22;
	
    /// <summary>
    /// Value number 23.
    /// </summary>
    [DataMember]
    public T23 Value23;
	
    /// <summary>
    /// Value number 24.
    /// </summary>
    [DataMember]
    public T24 Value24;
	
    /// <summary>
    /// Value number 25.
    /// </summary>
    [DataMember]
    public T25 Value25;
	
    /// <summary>
    /// Value number 26.
    /// </summary>
    [DataMember]
    public T26 Value26;
	
    /// <summary>
    /// Value number 27.
    /// </summary>
    [DataMember]
    public T27 Value27;
	
    /// <summary>
    /// Value number 28.
    /// </summary>
    [DataMember]
    public T28 Value28;
	
    /// <summary>
    /// Value number 29.
    /// </summary>
    [DataMember]
    public T29 Value29;
	
    /// <summary>
    /// Value number 30.
    /// </summary>
    [DataMember]
    public T30 Value30;
	
    /// <summary>
    /// Value number 31.
    /// </summary>
    [DataMember]
    public T31 Value31;
	
    /// <summary>
    /// Nullability and availability map..
    /// </summary>
    [DataMember]
    public long Flags;

    /// <inheritdoc/>
    public override int Count
    {
      get { return count; }
    }

    /// <inheritdoc/>
    public override Tuple CreateNew()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>(descriptor);
    }

    /// <inheritdoc/>
    public override Tuple Clone()
    {
      return new Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>(this);
    }

    /// <inheritdoc/>
    public override TupleFieldState GetFieldState(int fieldIndex)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var intValue = (int)((Flags >> (fieldIndex << 1)) & 3);
      return (TupleFieldState) intValue;
    }

    /// <inheritdoc/>
    protected internal override void SetFieldState(int fieldIndex, TupleFieldState fieldState)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");
      var longValue = (long)fieldState;
      var mask = 3L << (fieldIndex << 1);
      Flags = (Flags & ~mask) | (longValue << (fieldIndex << 1));
    }

    /// <inheritdoc/>
    public override object GetValue(int fieldIndex, out TupleFieldState fieldState)
    {
      fieldState = GetFieldState(fieldIndex);
      switch(fieldIndex) {
        case 0:
          return Value0;
        case 1:
          return Value1;
        case 2:
          return Value2;
        case 3:
          return Value3;
        case 4:
          return Value4;
        case 5:
          return Value5;
        case 6:
          return Value6;
        case 7:
          return Value7;
        case 8:
          return Value8;
        case 9:
          return Value9;
        case 10:
          return Value10;
        case 11:
          return Value11;
        case 12:
          return Value12;
        case 13:
          return Value13;
        case 14:
          return Value14;
        case 15:
          return Value15;
        case 16:
          return Value16;
        case 17:
          return Value17;
        case 18:
          return Value18;
        case 19:
          return Value19;
        case 20:
          return Value20;
        case 21:
          return Value21;
        case 22:
          return Value22;
        case 23:
          return Value23;
        case 24:
          return Value24;
        case 25:
          return Value25;
        case 26:
          return Value26;
        case 27:
          return Value27;
        case 28:
          return Value28;
        case 29:
          return Value29;
        case 30:
          return Value30;
        case 31:
          return Value31;
      }
      throw new ArgumentOutOfRangeException("fieldIndex");
    }

    /// <inheritdoc/>
    public override void SetValue(int fieldIndex, object fieldValue)
    {
      if (fieldIndex < 0 || fieldIndex >= count)
        throw new ArgumentOutOfRangeException("fieldIndex");

      var mask = 3L << (fieldIndex << 1);
      if (fieldValue == null) {
        Flags |= mask;
        switch (fieldIndex) {
          case 0:
            Value0 = default(T0);
            break;
          case 1:
            Value1 = default(T1);
            break;
          case 2:
            Value2 = default(T2);
            break;
          case 3:
            Value3 = default(T3);
            break;
          case 4:
            Value4 = default(T4);
            break;
          case 5:
            Value5 = default(T5);
            break;
          case 6:
            Value6 = default(T6);
            break;
          case 7:
            Value7 = default(T7);
            break;
          case 8:
            Value8 = default(T8);
            break;
          case 9:
            Value9 = default(T9);
            break;
          case 10:
            Value10 = default(T10);
            break;
          case 11:
            Value11 = default(T11);
            break;
          case 12:
            Value12 = default(T12);
            break;
          case 13:
            Value13 = default(T13);
            break;
          case 14:
            Value14 = default(T14);
            break;
          case 15:
            Value15 = default(T15);
            break;
          case 16:
            Value16 = default(T16);
            break;
          case 17:
            Value17 = default(T17);
            break;
          case 18:
            Value18 = default(T18);
            break;
          case 19:
            Value19 = default(T19);
            break;
          case 20:
            Value20 = default(T20);
            break;
          case 21:
            Value21 = default(T21);
            break;
          case 22:
            Value22 = default(T22);
            break;
          case 23:
            Value23 = default(T23);
            break;
          case 24:
            Value24 = default(T24);
            break;
          case 25:
            Value25 = default(T25);
            break;
          case 26:
            Value26 = default(T26);
            break;
          case 27:
            Value27 = default(T27);
            break;
          case 28:
            Value28 = default(T28);
            break;
          case 29:
            Value29 = default(T29);
            break;
          case 30:
            Value30 = default(T30);
            break;
          case 31:
            Value31 = default(T31);
            break;
        }
      }
      else {
        Flags = (Flags & ~mask) | (1L << (fieldIndex << 1));
        switch (fieldIndex) {
          case 0:
            Value0 = (T0)fieldValue;
            break;
          case 1:
            Value1 = (T1)fieldValue;
            break;
          case 2:
            Value2 = (T2)fieldValue;
            break;
          case 3:
            Value3 = (T3)fieldValue;
            break;
          case 4:
            Value4 = (T4)fieldValue;
            break;
          case 5:
            Value5 = (T5)fieldValue;
            break;
          case 6:
            Value6 = (T6)fieldValue;
            break;
          case 7:
            Value7 = (T7)fieldValue;
            break;
          case 8:
            Value8 = (T8)fieldValue;
            break;
          case 9:
            Value9 = (T9)fieldValue;
            break;
          case 10:
            Value10 = (T10)fieldValue;
            break;
          case 11:
            Value11 = (T11)fieldValue;
            break;
          case 12:
            Value12 = (T12)fieldValue;
            break;
          case 13:
            Value13 = (T13)fieldValue;
            break;
          case 14:
            Value14 = (T14)fieldValue;
            break;
          case 15:
            Value15 = (T15)fieldValue;
            break;
          case 16:
            Value16 = (T16)fieldValue;
            break;
          case 17:
            Value17 = (T17)fieldValue;
            break;
          case 18:
            Value18 = (T18)fieldValue;
            break;
          case 19:
            Value19 = (T19)fieldValue;
            break;
          case 20:
            Value20 = (T20)fieldValue;
            break;
          case 21:
            Value21 = (T21)fieldValue;
            break;
          case 22:
            Value22 = (T22)fieldValue;
            break;
          case 23:
            Value23 = (T23)fieldValue;
            break;
          case 24:
            Value24 = (T24)fieldValue;
            break;
          case 25:
            Value25 = (T25)fieldValue;
            break;
          case 26:
            Value26 = (T26)fieldValue;
            break;
          case 27:
            Value27 = (T27)fieldValue;
            break;
          case 28:
            Value28 = (T28)fieldValue;
            break;
          case 29:
            Value29 = (T29)fieldValue;
            break;
          case 30:
            Value30 = (T30)fieldValue;
            break;
          case 31:
            Value31 = (T31)fieldValue;
            break;
        }
      }
    }

    /// <summary>
    /// Gets the value and state of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T0 GetValue0(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (0 << 1)) & 3);
      return t.Value0;
    }
    /// <summary>
    /// Gets the value and state of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T1 GetValue1(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (1 << 1)) & 3);
      return t.Value1;
    }
    /// <summary>
    /// Gets the value and state of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T2 GetValue2(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (2 << 1)) & 3);
      return t.Value2;
    }
    /// <summary>
    /// Gets the value and state of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T3 GetValue3(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (3 << 1)) & 3);
      return t.Value3;
    }
    /// <summary>
    /// Gets the value and state of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T4 GetValue4(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (4 << 1)) & 3);
      return t.Value4;
    }
    /// <summary>
    /// Gets the value and state of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T5 GetValue5(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (5 << 1)) & 3);
      return t.Value5;
    }
    /// <summary>
    /// Gets the value and state of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T6 GetValue6(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (6 << 1)) & 3);
      return t.Value6;
    }
    /// <summary>
    /// Gets the value and state of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T7 GetValue7(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (7 << 1)) & 3);
      return t.Value7;
    }
    /// <summary>
    /// Gets the value and state of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T8 GetValue8(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (8 << 1)) & 3);
      return t.Value8;
    }
    /// <summary>
    /// Gets the value and state of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T9 GetValue9(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (9 << 1)) & 3);
      return t.Value9;
    }
    /// <summary>
    /// Gets the value and state of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T10 GetValue10(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (10 << 1)) & 3);
      return t.Value10;
    }
    /// <summary>
    /// Gets the value and state of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T11 GetValue11(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (11 << 1)) & 3);
      return t.Value11;
    }
    /// <summary>
    /// Gets the value and state of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T12 GetValue12(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (12 << 1)) & 3);
      return t.Value12;
    }
    /// <summary>
    /// Gets the value and state of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T13 GetValue13(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (13 << 1)) & 3);
      return t.Value13;
    }
    /// <summary>
    /// Gets the value and state of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T14 GetValue14(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (14 << 1)) & 3);
      return t.Value14;
    }
    /// <summary>
    /// Gets the value and state of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T15 GetValue15(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (15 << 1)) & 3);
      return t.Value15;
    }
    /// <summary>
    /// Gets the value and state of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T16 GetValue16(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (16 << 1)) & 3);
      return t.Value16;
    }
    /// <summary>
    /// Gets the value and state of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T17 GetValue17(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (17 << 1)) & 3);
      return t.Value17;
    }
    /// <summary>
    /// Gets the value and state of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T18 GetValue18(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (18 << 1)) & 3);
      return t.Value18;
    }
    /// <summary>
    /// Gets the value and state of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T19 GetValue19(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (19 << 1)) & 3);
      return t.Value19;
    }
    /// <summary>
    /// Gets the value and state of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T20 GetValue20(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (20 << 1)) & 3);
      return t.Value20;
    }
    /// <summary>
    /// Gets the value and state of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T21 GetValue21(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (21 << 1)) & 3);
      return t.Value21;
    }
    /// <summary>
    /// Gets the value and state of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T22 GetValue22(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (22 << 1)) & 3);
      return t.Value22;
    }
    /// <summary>
    /// Gets the value and state of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T23 GetValue23(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (23 << 1)) & 3);
      return t.Value23;
    }
    /// <summary>
    /// Gets the value and state of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T24 GetValue24(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (24 << 1)) & 3);
      return t.Value24;
    }
    /// <summary>
    /// Gets the value and state of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T25 GetValue25(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (25 << 1)) & 3);
      return t.Value25;
    }
    /// <summary>
    /// Gets the value and state of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T26 GetValue26(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (26 << 1)) & 3);
      return t.Value26;
    }
    /// <summary>
    /// Gets the value and state of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T27 GetValue27(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (27 << 1)) & 3);
      return t.Value27;
    }
    /// <summary>
    /// Gets the value and state of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T28 GetValue28(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (28 << 1)) & 3);
      return t.Value28;
    }
    /// <summary>
    /// Gets the value and state of field 29.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T29 GetValue29(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (29 << 1)) & 3);
      return t.Value29;
    }
    /// <summary>
    /// Gets the value and state of field 30.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T30 GetValue30(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (30 << 1)) & 3);
      return t.Value30;
    }
    /// <summary>
    /// Gets the value and state of field 31.
    /// </summary>
    /// <param name="tuple">The tuple to get field value and state for.</param>
    /// <param name="fieldState">Field state associated with the field.</param>
    /// <returns>Field value, if it is available; otherwise, default value for field type.</returns>
    public static T31 GetValue31(Tuple tuple, out TupleFieldState fieldState)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      fieldState = (TupleFieldState) ((t.Flags >> (31 << 1)) & 3);
      return t.Value31;
    }

    /// <summary>
    /// Sets the value of field 0.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue0(Tuple tuple, T0 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (0 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (0 << 1));
      t.Value0 = value;
    }
    /// <summary>
    /// Sets the value of field 1.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue1(Tuple tuple, T1 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (1 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (1 << 1));
      t.Value1 = value;
    }
    /// <summary>
    /// Sets the value of field 2.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue2(Tuple tuple, T2 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (2 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (2 << 1));
      t.Value2 = value;
    }
    /// <summary>
    /// Sets the value of field 3.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue3(Tuple tuple, T3 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (3 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (3 << 1));
      t.Value3 = value;
    }
    /// <summary>
    /// Sets the value of field 4.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue4(Tuple tuple, T4 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (4 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (4 << 1));
      t.Value4 = value;
    }
    /// <summary>
    /// Sets the value of field 5.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue5(Tuple tuple, T5 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (5 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (5 << 1));
      t.Value5 = value;
    }
    /// <summary>
    /// Sets the value of field 6.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue6(Tuple tuple, T6 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (6 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (6 << 1));
      t.Value6 = value;
    }
    /// <summary>
    /// Sets the value of field 7.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue7(Tuple tuple, T7 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (7 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (7 << 1));
      t.Value7 = value;
    }
    /// <summary>
    /// Sets the value of field 8.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue8(Tuple tuple, T8 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (8 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (8 << 1));
      t.Value8 = value;
    }
    /// <summary>
    /// Sets the value of field 9.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue9(Tuple tuple, T9 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (9 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (9 << 1));
      t.Value9 = value;
    }
    /// <summary>
    /// Sets the value of field 10.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue10(Tuple tuple, T10 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (10 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (10 << 1));
      t.Value10 = value;
    }
    /// <summary>
    /// Sets the value of field 11.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue11(Tuple tuple, T11 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (11 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (11 << 1));
      t.Value11 = value;
    }
    /// <summary>
    /// Sets the value of field 12.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue12(Tuple tuple, T12 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (12 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (12 << 1));
      t.Value12 = value;
    }
    /// <summary>
    /// Sets the value of field 13.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue13(Tuple tuple, T13 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (13 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (13 << 1));
      t.Value13 = value;
    }
    /// <summary>
    /// Sets the value of field 14.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue14(Tuple tuple, T14 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (14 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (14 << 1));
      t.Value14 = value;
    }
    /// <summary>
    /// Sets the value of field 15.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue15(Tuple tuple, T15 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (15 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (15 << 1));
      t.Value15 = value;
    }
    /// <summary>
    /// Sets the value of field 16.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue16(Tuple tuple, T16 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (16 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (16 << 1));
      t.Value16 = value;
    }
    /// <summary>
    /// Sets the value of field 17.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue17(Tuple tuple, T17 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (17 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (17 << 1));
      t.Value17 = value;
    }
    /// <summary>
    /// Sets the value of field 18.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue18(Tuple tuple, T18 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (18 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (18 << 1));
      t.Value18 = value;
    }
    /// <summary>
    /// Sets the value of field 19.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue19(Tuple tuple, T19 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (19 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (19 << 1));
      t.Value19 = value;
    }
    /// <summary>
    /// Sets the value of field 20.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue20(Tuple tuple, T20 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (20 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (20 << 1));
      t.Value20 = value;
    }
    /// <summary>
    /// Sets the value of field 21.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue21(Tuple tuple, T21 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (21 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (21 << 1));
      t.Value21 = value;
    }
    /// <summary>
    /// Sets the value of field 22.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue22(Tuple tuple, T22 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (22 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (22 << 1));
      t.Value22 = value;
    }
    /// <summary>
    /// Sets the value of field 23.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue23(Tuple tuple, T23 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (23 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (23 << 1));
      t.Value23 = value;
    }
    /// <summary>
    /// Sets the value of field 24.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue24(Tuple tuple, T24 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (24 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (24 << 1));
      t.Value24 = value;
    }
    /// <summary>
    /// Sets the value of field 25.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue25(Tuple tuple, T25 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (25 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (25 << 1));
      t.Value25 = value;
    }
    /// <summary>
    /// Sets the value of field 26.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue26(Tuple tuple, T26 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (26 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (26 << 1));
      t.Value26 = value;
    }
    /// <summary>
    /// Sets the value of field 27.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue27(Tuple tuple, T27 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (27 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (27 << 1));
      t.Value27 = value;
    }
    /// <summary>
    /// Sets the value of field 28.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue28(Tuple tuple, T28 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (28 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (28 << 1));
      t.Value28 = value;
    }
    /// <summary>
    /// Sets the value of field 29.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue29(Tuple tuple, T29 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (29 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (29 << 1));
      t.Value29 = value;
    }
    /// <summary>
    /// Sets the value of field 30.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue30(Tuple tuple, T30 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (30 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (30 << 1));
      t.Value30 = value;
    }
    /// <summary>
    /// Sets the value of field 31.
    /// </summary>
    /// <param name="tuple">The tuple to set field value for.</param>
    /// <param name="value">The value to set.</param>
    public static void SetValue31(Tuple tuple, T31 value)
    {
      var t = (Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>)tuple;
      const long mask = 3L << (31 << 1);
      if (value == null) 
        t.Flags |= mask;
      else
        t.Flags = (t.Flags & ~mask) | (1L << (31 << 1));
      t.Value31 = value;
    }

    /// <inheritdoc/>
    public override bool Equals(Tuple other)
    {
      if (other == null)
        return false;
      var tuple = other as Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31>;
      if (tuple == null)
        return base.Equals(other);
      if (Flags != tuple.Flags)
        return false;
      if (!EqualityComparer<T31>.Default.Equals(Value31, tuple.Value31))
        return false;
      if (!EqualityComparer<T30>.Default.Equals(Value30, tuple.Value30))
        return false;
      if (!EqualityComparer<T29>.Default.Equals(Value29, tuple.Value29))
        return false;
      if (!EqualityComparer<T28>.Default.Equals(Value28, tuple.Value28))
        return false;
      if (!EqualityComparer<T27>.Default.Equals(Value27, tuple.Value27))
        return false;
      if (!EqualityComparer<T26>.Default.Equals(Value26, tuple.Value26))
        return false;
      if (!EqualityComparer<T25>.Default.Equals(Value25, tuple.Value25))
        return false;
      if (!EqualityComparer<T24>.Default.Equals(Value24, tuple.Value24))
        return false;
      if (!EqualityComparer<T23>.Default.Equals(Value23, tuple.Value23))
        return false;
      if (!EqualityComparer<T22>.Default.Equals(Value22, tuple.Value22))
        return false;
      if (!EqualityComparer<T21>.Default.Equals(Value21, tuple.Value21))
        return false;
      if (!EqualityComparer<T20>.Default.Equals(Value20, tuple.Value20))
        return false;
      if (!EqualityComparer<T19>.Default.Equals(Value19, tuple.Value19))
        return false;
      if (!EqualityComparer<T18>.Default.Equals(Value18, tuple.Value18))
        return false;
      if (!EqualityComparer<T17>.Default.Equals(Value17, tuple.Value17))
        return false;
      if (!EqualityComparer<T16>.Default.Equals(Value16, tuple.Value16))
        return false;
      if (!EqualityComparer<T15>.Default.Equals(Value15, tuple.Value15))
        return false;
      if (!EqualityComparer<T14>.Default.Equals(Value14, tuple.Value14))
        return false;
      if (!EqualityComparer<T13>.Default.Equals(Value13, tuple.Value13))
        return false;
      if (!EqualityComparer<T12>.Default.Equals(Value12, tuple.Value12))
        return false;
      if (!EqualityComparer<T11>.Default.Equals(Value11, tuple.Value11))
        return false;
      if (!EqualityComparer<T10>.Default.Equals(Value10, tuple.Value10))
        return false;
      if (!EqualityComparer<T9>.Default.Equals(Value9, tuple.Value9))
        return false;
      if (!EqualityComparer<T8>.Default.Equals(Value8, tuple.Value8))
        return false;
      if (!EqualityComparer<T7>.Default.Equals(Value7, tuple.Value7))
        return false;
      if (!EqualityComparer<T6>.Default.Equals(Value6, tuple.Value6))
        return false;
      if (!EqualityComparer<T5>.Default.Equals(Value5, tuple.Value5))
        return false;
      if (!EqualityComparer<T4>.Default.Equals(Value4, tuple.Value4))
        return false;
      if (!EqualityComparer<T3>.Default.Equals(Value3, tuple.Value3))
        return false;
      if (!EqualityComparer<T2>.Default.Equals(Value2, tuple.Value2))
        return false;
      if (!EqualityComparer<T1>.Default.Equals(Value1, tuple.Value1))
        return false;
      if (!EqualityComparer<T0>.Default.Equals(Value0, tuple.Value0))
        return false;
      return true;
    }
	
    /// <inheritdoc/>
    public override int GetHashCode()
    {
      int result = 0;
      result = HashCodeMultiplier * result ^ EqualityComparer<T0>.Default.GetHashCode(Value0);
      result = HashCodeMultiplier * result ^ EqualityComparer<T1>.Default.GetHashCode(Value1);
      result = HashCodeMultiplier * result ^ EqualityComparer<T2>.Default.GetHashCode(Value2);
      result = HashCodeMultiplier * result ^ EqualityComparer<T3>.Default.GetHashCode(Value3);
      result = HashCodeMultiplier * result ^ EqualityComparer<T4>.Default.GetHashCode(Value4);
      result = HashCodeMultiplier * result ^ EqualityComparer<T5>.Default.GetHashCode(Value5);
      result = HashCodeMultiplier * result ^ EqualityComparer<T6>.Default.GetHashCode(Value6);
      result = HashCodeMultiplier * result ^ EqualityComparer<T7>.Default.GetHashCode(Value7);
      result = HashCodeMultiplier * result ^ EqualityComparer<T8>.Default.GetHashCode(Value8);
      result = HashCodeMultiplier * result ^ EqualityComparer<T9>.Default.GetHashCode(Value9);
      result = HashCodeMultiplier * result ^ EqualityComparer<T10>.Default.GetHashCode(Value10);
      result = HashCodeMultiplier * result ^ EqualityComparer<T11>.Default.GetHashCode(Value11);
      result = HashCodeMultiplier * result ^ EqualityComparer<T12>.Default.GetHashCode(Value12);
      result = HashCodeMultiplier * result ^ EqualityComparer<T13>.Default.GetHashCode(Value13);
      result = HashCodeMultiplier * result ^ EqualityComparer<T14>.Default.GetHashCode(Value14);
      result = HashCodeMultiplier * result ^ EqualityComparer<T15>.Default.GetHashCode(Value15);
      result = HashCodeMultiplier * result ^ EqualityComparer<T16>.Default.GetHashCode(Value16);
      result = HashCodeMultiplier * result ^ EqualityComparer<T17>.Default.GetHashCode(Value17);
      result = HashCodeMultiplier * result ^ EqualityComparer<T18>.Default.GetHashCode(Value18);
      result = HashCodeMultiplier * result ^ EqualityComparer<T19>.Default.GetHashCode(Value19);
      result = HashCodeMultiplier * result ^ EqualityComparer<T20>.Default.GetHashCode(Value20);
      result = HashCodeMultiplier * result ^ EqualityComparer<T21>.Default.GetHashCode(Value21);
      result = HashCodeMultiplier * result ^ EqualityComparer<T22>.Default.GetHashCode(Value22);
      result = HashCodeMultiplier * result ^ EqualityComparer<T23>.Default.GetHashCode(Value23);
      result = HashCodeMultiplier * result ^ EqualityComparer<T24>.Default.GetHashCode(Value24);
      result = HashCodeMultiplier * result ^ EqualityComparer<T25>.Default.GetHashCode(Value25);
      result = HashCodeMultiplier * result ^ EqualityComparer<T26>.Default.GetHashCode(Value26);
      result = HashCodeMultiplier * result ^ EqualityComparer<T27>.Default.GetHashCode(Value27);
      result = HashCodeMultiplier * result ^ EqualityComparer<T28>.Default.GetHashCode(Value28);
      result = HashCodeMultiplier * result ^ EqualityComparer<T29>.Default.GetHashCode(Value29);
      result = HashCodeMultiplier * result ^ EqualityComparer<T30>.Default.GetHashCode(Value30);
      result = HashCodeMultiplier * result ^ EqualityComparer<T31>.Default.GetHashCode(Value31);
      return result;
    }

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context)
    {
      descriptor = TupleDescriptor.Create(new[] {
        typeof (T0),
        typeof (T1),
        typeof (T2),
        typeof (T3),
        typeof (T4),
        typeof (T5),
        typeof (T6),
        typeof (T7),
        typeof (T8),
        typeof (T9),
        typeof (T10),
        typeof (T11),
        typeof (T12),
        typeof (T13),
        typeof (T14),
        typeof (T15),
        typeof (T16),
        typeof (T17),
        typeof (T18),
        typeof (T19),
        typeof (T20),
        typeof (T21),
        typeof (T22),
        typeof (T23),
        typeof (T24),
        typeof (T25),
        typeof (T26),
        typeof (T27),
        typeof (T28),
        typeof (T29),
        typeof (T30),
        typeof (T31)
      });
    }


    // Constructors

    /// <inheritdoc/>
    public Tuple(TupleDescriptor descriptor)
      : base(descriptor)
    {
    }

    private Tuple(Tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22,T23,T24,T25,T26,T27,T28,T29,T30,T31> template)
      : base(template.descriptor)
    {
      Value0 = template.Value0;
      Value1 = template.Value1;
      Value2 = template.Value2;
      Value3 = template.Value3;
      Value4 = template.Value4;
      Value5 = template.Value5;
      Value6 = template.Value6;
      Value7 = template.Value7;
      Value8 = template.Value8;
      Value9 = template.Value9;
      Value10 = template.Value10;
      Value11 = template.Value11;
      Value12 = template.Value12;
      Value13 = template.Value13;
      Value14 = template.Value14;
      Value15 = template.Value15;
      Value16 = template.Value16;
      Value17 = template.Value17;
      Value18 = template.Value18;
      Value19 = template.Value19;
      Value20 = template.Value20;
      Value21 = template.Value21;
      Value22 = template.Value22;
      Value23 = template.Value23;
      Value24 = template.Value24;
      Value25 = template.Value25;
      Value26 = template.Value26;
      Value27 = template.Value27;
      Value28 = template.Value28;
      Value29 = template.Value29;
      Value30 = template.Value30;
      Value31 = template.Value31;
      Flags = template.Flags;
    }
  }
  
  internal static class TupleFactory
  {
    public static RegularTuple Create(TupleDescriptor descriptor)
    {
      var fieldCount = descriptor.Count;
      if (fieldCount < 0)
        throw new ArgumentOutOfRangeException("fieldCount");
      if (fieldCount > MaxGeneratedTupleLength.Value) {
        var firstDescriptor = descriptor.TrimFields(MaxGeneratedTupleLength.Value);
        var secondDescriptor = descriptor.SkipFields(MaxGeneratedTupleLength.Value);
        if (firstDescriptor == null || secondDescriptor == null)
          throw new InvalidOperationException();
        return new JoinedTuple(descriptor, Create(firstDescriptor), Create(secondDescriptor));
      }
      if (fieldCount == 0)
        return EmptyTuple.Instance;
      Type tupleDef = null;
      switch (fieldCount) {
        case 1:
          tupleDef = typeof(Tuple< >);
          break;
        case 2:
          tupleDef = typeof(Tuple< , >);
          break;
        case 3:
          tupleDef = typeof(Tuple< , , >);
          break;
        case 4:
          tupleDef = typeof(Tuple< , , , >);
          break;
        case 5:
          tupleDef = typeof(Tuple< , , , , >);
          break;
        case 6:
          tupleDef = typeof(Tuple< , , , , , >);
          break;
        case 7:
          tupleDef = typeof(Tuple< , , , , , , >);
          break;
        case 8:
          tupleDef = typeof(Tuple< , , , , , , , >);
          break;
        case 9:
          tupleDef = typeof(Tuple< , , , , , , , , >);
          break;
        case 10:
          tupleDef = typeof(Tuple< , , , , , , , , , >);
          break;
        case 11:
          tupleDef = typeof(Tuple< , , , , , , , , , , >);
          break;
        case 12:
          tupleDef = typeof(Tuple< , , , , , , , , , , , >);
          break;
        case 13:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , >);
          break;
        case 14:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , >);
          break;
        case 15:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , >);
          break;
        case 16:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , >);
          break;
        case 17:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , >);
          break;
        case 18:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , >);
          break;
        case 19:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , >);
          break;
        case 20:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , >);
          break;
        case 21:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 22:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 23:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 24:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 25:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 26:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 27:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 28:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 29:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 30:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 31:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
        case 32:
          tupleDef = typeof(Tuple< , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , >);
          break;
      }
      var tupleType = tupleDef.MakeGenericType(descriptor.fieldTypes);
      return (RegularTuple)Activator.CreateInstance(tupleType, BindingFlags.CreateInstance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, new object[]{descriptor}, null);
    }
  }
}
