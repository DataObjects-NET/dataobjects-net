<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExArgumentValueMustBeGreaterThanOrEqualToZero" xml:space="preserve">
    <value>Argument value must be greater than or equal to zero.</value>
  </data>
  <data name="ExArgumentValueMustBeGreaterThanZero" xml:space="preserve">
    <value>Argument value must be greater than zero.</value>
  </data>
  <data name="ExCollectionAlreadyContainsItemWithSpecifiedKey" xml:space="preserve">
    <value>Collection already contains item with the specified key.</value>
  </data>
  <data name="ExCollectionHasBeenChanged" xml:space="preserve">
    <value>Collection has been changed during the enumeration.</value>
  </data>
  <data name="ExCollectionIsEmpty" xml:space="preserve">
    <value>Collection is empty.</value>
  </data>
  <data name="ExCollectionIsReadOnly" xml:space="preserve">
    <value>Collection is read-only.</value>
  </data>
  <data name="ExDependencyOperationIsAlreadyRegistered" xml:space="preserve">
    <value>Dependency operation with full name "{0}" is already registered.</value>
  </data>
  <data name="ExDescriptorIsInInvalidState" xml:space="preserve">
    <value>Descriptor is in invalid state.</value>
  </data>
  <data name="ExDestionationArrayIsTooSmall" xml:space="preserve">
    <value>Destionation array is too small.</value>
  </data>
  <data name="ExGivenKeyNotPresent" xml:space="preserve">
    <value>The given key was not present in the dictionary.</value>
  </data>
  <data name="ExIncompatibleArrayType" xml:space="preserve">
    <value>Incompatible array type.</value>
  </data>
  <data name="ExInconsistentComparisons" xml:space="preserve">
    <value>The two collections cannot be combined because they use different comparison operations.</value>
  </data>
  <data name="ExIndexShouldBeInNMRange" xml:space="preserve">
    <value>Index should be in [{0}...{1}] range.</value>
  </data>
  <data name="ExInstanceIsLocked" xml:space="preserve">
    <value>Instance is locked.</value>
  </data>
  <data name="ExInvalidCapacity" xml:space="preserve">
    <value>The specified capacity value is less than collection count.</value>
  </data>
  <data name="ExItemCantBeCachedIncompatibleType" xml:space="preserve">
    <value>The specified item cannot be cached because its type is incompatible with underlying storage format.</value>
  </data>
  <data name="ExItemIsInUse" xml:space="preserve">
    <value>Specified item is already in use.</value>
  </data>
  <data name="ExItemIsNotInUse" xml:space="preserve">
    <value>Specified item is not in use.</value>
  </data>
  <data name="ExItemIsNotPooled" xml:space="preserve">
    <value>Specified item isn't pooled.</value>
  </data>
  <data name="ExItemNotFound" xml:space="preserve">
    <value>Specified item isn't found.</value>
  </data>
  <data name="ExLinkedOperationMissingFormat" xml:space="preserve">
    <value>Linked operation for property {0} missing.</value>
  </data>
  <data name="ExMaxItemCountIsN" xml:space="preserve">
    <value>Maximal item count is {0}.</value>
  </data>
  <data name="ExNoAvailableItems" xml:space="preserve">
    <value>There are no more available items.</value>
  </data>
  <data name="ExNoObjectWithSpecifiedKey" xml:space="preserve">
    <value>There is no object with specified key.</value>
  </data>
  <data name="ExOperationLinkTypeUndefined" xml:space="preserve">
    <value>Operation LinkType should be defined before it can be registered in OperationDictionary.</value>
  </data>
  <data name="ExOperationMustBeLocked" xml:space="preserve">
    <value>Operation must be locked before it can be registered in OperationDictionary.</value>
  </data>
  <data name="ExOperationPropertyNameUndefined" xml:space="preserve">
    <value>Operation PropertyName must be specified before it can be registered in OperationDictionary.</value>
  </data>
  <data name="ExPoolMustBeSyncronized" xml:space="preserve">
    <value>Pool should be in syncronized mode to utilize AutoCleanup feature.</value>
  </data>
  <data name="ExPoolWrongKey" xml:space="preserve">
    <value>Item already exists in the pool with another key.</value>
  </data>
  <data name="ExPortOutOfRange" xml:space="preserve">
    <value>Port value must be in [0,65535] range.</value>
  </data>
  <data name="ExInvalidUrl" xml:space="preserve">
    <value>"{0}" is invalid URL.</value>
  </data>
  <data name="ExArrayDoesNotHaveZeroBasedIndexing" xml:space="preserve">
    <value>Array does not have zero-based indexing.</value>
  </data>
  <data name="ExWrongSourceCollectionElementType" xml:space="preserve">
    <value>Source collection contains at least one item of type "{0}", that cannot be cast to the item type of the destination collection.</value>
  </data>
  <data name="ExInstanceMustHaveSyncRoot" xml:space="preserve">
    <value>A instance must have non-null IHasSyncRoot.SyncRoot property value.</value>
  </data>
  <data name="ExCouldNotLoadTypesFromAssembly" xml:space="preserve">
    <value>Could not load types from the assembly '{0}'.</value>
  </data>
  <data name="ExItemCantBeComparedIncompatibleType" xml:space="preserve">
    <value>The specified item cannot be cached because its type is incompatible with ITuple.</value>
  </data>
  <data name="ExArgumentCannotBeEmptyString" xml:space="preserve">
    <value>Argument can't be an empty string.</value>
  </data>
  <data name="ExArrayIsMultidimensional" xml:space="preserve">
    <value>Array is multidimentional.</value>
  </data>
  <data name="ExCollectionAlreadyContainsSpecifiedItem" xml:space="preserve">
    <value>Collecton already contains specified item.</value>
  </data>
  <data name="ExSpecifiedCapacityIsLessThenCollectionCount" xml:space="preserve">
    <value>The specified capacity value is less than collection count.</value>
  </data>
  <data name="ExIndexOutOfRange" xml:space="preserve">
    <value>Index is out of range.</value>
  </data>
  <data name="ExInvalidArgumentType" xml:space="preserve">
    <value>Invalid argument type: expected type is {0}.</value>
  </data>
  <data name="ExSystemTimeChanged" xml:space="preserve">
    <value>System date \ time has been changed.</value>
  </data>
  <data name="ExMeasurementIsAlreadyCompleted" xml:space="preserve">
    <value>Measurement is already completed.</value>
  </data>
  <data name="ExInternalError" xml:space="preserve">
    <value>Internal error: {0}</value>
  </data>
  <data name="ExItemWithTheSameKeyHasBeenAdded" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
  </data>
  <data name="ExArgumentShouldBeInRange" xml:space="preserve">
    <value>Argument should be in range [{0}...{1}].</value>
  </data>
  <data name="ExPropertyDoesNotHaveGetter" xml:space="preserve">
    <value>Property '{0}' of type '{1}' does not have public get accessor.</value>
  </data>
  <data name="ExPropertyDoesNotHaveSetter" xml:space="preserve">
    <value>Property '{0}' of type '{1}' does not have public set accessor.</value>
  </data>
  <data name="ExMemberIsNotPublicPropertyOrField" xml:space="preserve">
    <value>Member: '{0}' is not a Public Property or Field of Type: '{1}'</value>
  </data>
  <data name="ExDeserializationStreamLengthIncorrect" xml:space="preserve">
    <value>Stream length not enough to deserialize object of specified type.</value>
  </data>
  <data name="ExTypeIsNotSupportedByBinaryPrimitiveSerializer" xml:space="preserve">
    <value>Type is not supported by BinaryPrimitiveSerializer.</value>
  </data>
  <data name="ExObjectIsReadOnly" xml:space="preserve">
    <value>Object is read-only.</value>
  </data>
  <data name="ExAlreadyInitialized" xml:space="preserve">
    <value>Instance is already initialized.</value>
  </data>
  <data name="ExPropertyIsAlreadyInitialized" xml:space="preserve">
    <value>Property '{0}' is already initialized.</value>
  </data>
  <data name="ExInvalidActiveScope" xml:space="preserve">
    <value>Active scope is invalid - it differs from the expected one. Probably you have forgot to dispose some nested scope.</value>
  </data>
  <data name="ExScopeCantBeDisposed" xml:space="preserve">
    <value>Scope can't be disposed. Most likely it is bound to a different thread.</value>
  </data>
  <data name="ExContextRequired" xml:space="preserve">
    <value>{0} is required. Use {1} to set it.</value>
  </data>
  <data name="AssertCollectionsArntEqual" xml:space="preserve">
    <value>Collections arn't equal.</value>
  </data>
  <data name="ExCantFindAssociate" xml:space="preserve">
    <value>Can't find associated {0} of type '{1}' for type '{2}'.</value>
  </data>
  <data name="ExStreamCopyMustOperateDifferentStreams" xml:space="preserve">
    <value>Unable to copy stream to itself. Use StreamUtils.InstreamCopy instead.</value>
  </data>
  <data name="ExUnableToCreateProviderInstance" xml:space="preserve">
    <value>Unable to create provider instance. Check if provider's class has static "Instance" property.</value>
  </data>
  <data name="LogScopeDisposeError" xml:space="preserve">
    <value>Scope dispose error.</value>
  </data>
  <data name="ExCollectionOrCoutableExcpected" xml:space="preserve">
    <value>Item should be either an ICollection or ICountable.</value>
  </data>
  <data name="ExCantCreateAssociateForGenericTypeDefinitions" xml:space="preserve">
    <value>Can't create associates for generic type definitions (type '{0}').</value>
  </data>
  <data name="ExMultipleAssociatesMatch" xml:space="preserve">
    <value>Multiple associates match type '{0}' by its interfaces (at least '{1}' and '{2}').</value>
  </data>
  <data name="LogGenericAssociateCreationHasFailedFor" xml:space="preserve">
    <value>'{0}&lt;{1}, {2}&gt;' creation has failed for '{3}'.</value>
  </data>
  <data name="LogGenericAssociateIsUsedFor" xml:space="preserve">
    <value>'{0}&lt;{1}, {2}&gt;' was used for '{3}'.</value>
  </data>
  <data name="ExCantFindAssociate2" xml:space="preserve">
    <value>Can't find associated {0} of type '{1}' for type '{2}' or '{3}'.</value>
  </data>
  <data name="ExCantPassNoInfinityToThisConstructor" xml:space="preserve">
    <value>InfinityType.None can't be passed to this constructor.</value>
  </data>
  <data name="ExValueIsNotAvailable" xml:space="preserve">
    <value>Value is not available.</value>
  </data>
  <data name="Infinity" xml:space="preserve">
    <value>inf</value>
  </data>
  <data name="ReversedFormat" xml:space="preserve">
    <value>Reversed({0})</value>
  </data>
  <data name="ExInadmissibleTypeConversion" xml:space="preserve">
    <value>Conversion from type {0} to type {1} is inadmissible.</value>
  </data>
  <data name="LogCantFindAssociateFor" xml:space="preserve">
    <value>Can't find {0} ('{1}') for type '{2}'.</value>
  </data>
  <data name="ExMinMaxValuesAreNotSupportedForTupleFieldAdvancedComparer" xml:space="preserve">
    <value>MinMaxValues aren't supported for TupleFieldAdvancedComparer.</value>
  </data>
  <data name="ExSpecifiedTypeShouldBeGeneratedTupleDescriptorOrItsDescendant" xml:space="preserve">
    <value>Specified type should be either GeneratedTupleDescriptor or its descendant.</value>
  </data>
  <data name="ExTypeXMustBeReferenceType" xml:space="preserve">
    <value>Type '{0}' must be reference type.</value>
  </data>
  <data name="ExTypeXMustImplementY" xml:space="preserve">
    <value>Type '{0}' must implement '{1}', or must be its descendant.</value>
  </data>
  <data name="ExFieldIsInfinite" xml:space="preserve">
    <value>Field with index '{0}' is infinitу.</value>
  </data>
  <data name="ExCultureOfAppliedRuleShouldBeEitherNullOrTheSameAsOnTarget" xml:space="preserve">
    <value>Culture of the applied rule should either be undefined (null), or be the same as on target rule.</value>
  </data>
  <data name="InfinitesimalFormat" xml:space="preserve">
    <value>{0}{1}d</value>
  </data>
  <data name="ExGenericParameterShouldBeOfTypeT" xml:space="preserve">
    <value>Generic parameter '{0}' should be of type '{1}'.</value>
  </data>
  <data name="ExMergeOperationRequireIntersectionOfOperands" xml:space="preserve">
    <value>Merge operation require intersection of operands.</value>
  </data>
  <data name="ExEndPointOrderMustBeEqual" xml:space="preserve">
    <value>EndPoints order of both ranges must be equal.</value>
  </data>
  <data name="ExRangeIsEmpty" xml:space="preserve">
    <value>Range is empty.</value>
  </data>
  <data name="ExValueXIsNotAllowedHere" xml:space="preserve">
    <value>'{0}' is not allowed or invalid here.</value>
  </data>
  <data name="ExItemWithNameWasNotFound" xml:space="preserve">
    <value>Item with name '{0}' was not found.</value>
  </data>
  <data name="ExEnumerationIsAlreadyFinished" xml:space="preserve">
    <value>Enumeration is already finished.</value>
  </data>
  <data name="ExInvalidCast" xml:space="preserve">
    <value>Cast from '{0}' to '{1}' is invalid.</value>
  </data>
  <data name="ExBothMeasurementsHaveNoValue" xml:space="preserve">
    <value>Both measurements have no value.</value>
  </data>
  <data name="ExMeasurementMustHaveValue" xml:space="preserve">
    <value>Measurement '{0}' must have value.</value>
  </data>
  <data name="MeasureWithTheNameWasNotFound" xml:space="preserve">
    <value>Measure with the name '{0}' was not found.</value>
  </data>
  <data name="AnyCulture" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="ComparisonRuleFormat" xml:space="preserve">
    <value>ComparisonRule({0}, {1})</value>
  </data>
  <data name="ComparisonRulesFormat" xml:space="preserve">
    <value>ComparisonRules({0}, [{1}])</value>
  </data>
  <data name="BoxFormat" xml:space="preserve">
    <value>Box({0})</value>
  </data>
  <data name="EntireFormat" xml:space="preserve">
    <value>Entire({0})</value>
  </data>
  <data name="PairFormat" xml:space="preserve">
    <value>({0}, {1})</value>
  </data>
  <data name="TripletFormat" xml:space="preserve">
    <value>({0}, {1}, {2})</value>
  </data>
  <data name="TupleFormat" xml:space="preserve">
    <value>({0})</value>
  </data>
  <data name="NotAvailable" xml:space="preserve">
    <value>n\a</value>
  </data>
  <data name="Null" xml:space="preserve">
    <value>null</value>
  </data>
  <data name="MeasuresAndMeasurementsHaveDifferentAmountOfItems" xml:space="preserve">
    <value>Measures and measurements have different amount of items.</value>
  </data>
  <data name="Recursive" xml:space="preserve">
    <value>recursive</value>
  </data>
  <data name="ExRecursiveAssociateLookupDetected" xml:space="preserve">
    <value>Recursive associate lookup is detected.</value>
  </data>
  <data name="ExNotInitialized" xml:space="preserve">
    <value>Instance is not initialized (or not initialized properly).</value>
  </data>
  <data name="ExPropertyIsNotInitialized" xml:space="preserve">
    <value>Property '{0}' is not initialized (or not initialized properly).</value>
  </data>
  <data name="ExDifferentTupleDescriptors" xml:space="preserve">
    <value>Different TupleDescriptors are not valid here: {0} and {1}.</value>
  </data>
  <data name="LogRegionBegin" xml:space="preserve">
    <value>{0}: started.</value>
  </data>
  <data name="LogRegionEnd" xml:space="preserve">
    <value>{0}: completed.</value>
  </data>
  <data name="LogAttemptToUseDisposedInstance" xml:space="preserve">
    <value>Attempt to use disposed instance of type '{0}'.</value>
  </data>
  <data name="LogSafeDisposeFailing" xml:space="preserve">
    <value>Safe dispose of '{0}' failing.</value>
  </data>
  <data name="ExInvalidTupleDescriptorExpectedDescriptorIs" xml:space="preserve">
    <value>Invalid TupleDescriptor. Expected descriptor is {0}.</value>
  </data>
  <data name="TransformedTupleFormat" xml:space="preserve">
    <value>{0}: {1} of ({2})</value>
  </data>
  <data name="TupleTransformFormat" xml:space="preserve">
    <value>{0}({1})</value>
  </data>
  <data name="ExTheNumberOfSourcesIsTooSmallExpected" xml:space="preserve">
    <value>The number of sources is too small. Expected number is {0}.</value>
  </data>
  <data name="TupleDescriptorFormat" xml:space="preserve">
    <value>TupleDescriptor({0})</value>
  </data>
  <data name="SegmentFormat" xml:space="preserve">
    <value>[{0} ... {1}]</value>
  </data>
  <data name="ReadOnly" xml:space="preserve">
    <value>read-only</value>
  </data>
  <data name="ReadOnlyShort" xml:space="preserve">
    <value>r/o</value>
  </data>
  <data name="ReadWrite" xml:space="preserve">
    <value>read-write</value>
  </data>
  <data name="ReadWriteShort" xml:space="preserve">
    <value>r/w</value>
  </data>
  <data name="ExMultipleAttributesOfTypeXAreNotAllowedHere" xml:space="preserve">
    <value>{0}: multiple attributes of type '{1}' are not allowed here.</value>
  </data>
  <data name="HasVersionFormat" xml:space="preserve">
    <value>{0} (v{1})</value>
  </data>
  <data name="LogException" xml:space="preserve">
    <value>Exception!</value>
  </data>
  <data name="ExUseLogCaptureScopeConstructorInstead" xml:space="preserve">
    <value>Use LogCaptureScope constructor instead.</value>
  </data>
  <data name="LogUnableToGetDefaultHasherForTypeXxx" xml:space="preserve">
    <value>Unable to get default hasher for type {0}</value>
  </data>
  <data name="OriginalExceptions" xml:space="preserve">
    <value>Original exception(s)</value>
  </data>
  <data name="ExASetOfExceptionsIsCaught" xml:space="preserve">
    <value>A set of exceptions is caught.</value>
  </data>
  <data name="ExServiceNotFound" xml:space="preserve">
    <value>Service '{0}' is not found.</value>
  </data>
  <data name="CachedFormat" xml:space="preserve">
    <value>Cached({0})</value>
  </data>
  <data name="ThreadSafeCachedFormat" xml:space="preserve">
    <value>ThreadSafeCached({0})</value>
  </data>
</root>